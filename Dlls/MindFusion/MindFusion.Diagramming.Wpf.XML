<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MindFusion.Diagramming.Wpf</name>
    </assembly>
    <members>
        <member name="T:MindFusion.Diagramming.Wpf.TranslateLayer">
            <summary>
            A UIElement that is child to Diagram and contains all its items.
            It allows to apply translation on all items without changing the diagram object.
            This is used for implementation of Diagram.Bounds, e.g. when Bounds = (20,20,40,40)
            Item at coordinate 20,20 must be rendered at Diagram coordinate 0,0.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TranslateLayer.AddToSortedList(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Adds the specified object to the internal sorted list.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.StringFormat">
            <summary>
            Replaces System.Drawing.StringFormat
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.StringFormat.#ctor">
            <summary>
            Initializes a new StringFormat object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.StringFormat.#ctor(MindFusion.Diagramming.Wpf.StringFormatFlags)">
            <summary>
            Initializes a new StringFormat object.
            </summary>
            <param name="flags"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.StringFormat.#ctor(MindFusion.Diagramming.Wpf.StringFormat)">
            <summary>
            Initializes a new StringFormat object.
            </summary>
            <param name="sf"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.StringFormat.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.StringFormat.GenericDefault">
            <summary>
            Gets a generic default StringFormat object.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.StringFormat.GenericTypographic">
            <summary>
            Gets a generic typographic StringFormat object.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.StringFormat.Alignment">
            <summary>
            Gets or sets text alignment information on the vertical plane.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.StringFormat.DigitSubstitutionLanguage">
            <summary>
            Gets or sets the language that is used when local digits are substituted for western digits.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.StringFormat.FormatFlags">
            <summary>
            Gets or sets a StringFormatFlags enumeration that contains formatting information.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.StringFormat.HotkeyPrefix">
            <summary>
            Gets or sets the HotkeyPrefix object for this StringFormat object.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.StringFormat.LineAlignment">
            <summary>
            Gets or sets the line alignment on the horizontal plane.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.StringFormat.Trimming">
            <summary>
            Gets or sets the StringTrimming enumeration for this StringFormat object.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.SelectionCopy">
            <summary>
            Used internally in the implementation of copy/paste functions.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.SelectionCopy.#ctor(MindFusion.Diagramming.Wpf.DiagramItemCollection,MindFusion.Diagramming.Wpf.DiagramItemCollection,MindFusion.Diagramming.Wpf.GroupCollection)">
            <summary>
            Initializes a new instance of the SelectionCopy class.
            </summary>
            <param name="items">
            A collection containing the item copies.
            </param>
            <param name="originalItems">
            A collection containing the original items.
            </param>
            <param name="groups">
            A collection containing the group copies.
            </param>
            <remarks>
            This constructor supports the WpfDiagram infrastructure and is
            not intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.SelectionCopy.Items">
            <summary>
            Gets the underlying collection of items.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.SelectionCopy.OriginalItems">
            <summary>
            Gets a collection of the original items.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.SelectionCopy.Groups">
            <summary>
            Gets the underlying collection of groups.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.RoundRectangleTemplate">
            <summary>
            Represents an ElementTemplate that draws round rectangle.
            </summary>
            <remarks>
            This class ensures that the round corners do not change during
            resizing which is visually better. The drawback is that the radius
            appears to be specified in DiagramViewMeasure units and therefore
            a given shape instance will look bad when the measure unit is not
            the one for which the shape was designed.
            </remarks>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ElementTemplate">
            <summary>
            Represents an element of a shape definition. This is the parent class of
            specific element types, such as ArcTemplate, LineTemplate and BezierTemplate.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ElementTemplate.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Loads the template contents from the specified XML element.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ElementTemplate.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the template contents into the specified XML element.
            </summary>
            <param name="xmlElement">
            The XmlElement the template's data should be stored into.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information
            about the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ElementTemplate.Clone">
            <summary>
            Creates an exact copy of this element.
            </summary>
            <returns>
            An instance of the appropriate type that represents the element clone.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ElementTemplate.InitData(System.Windows.Rect,System.Double)">
            <summary>
            Performs one-time initialization of the element internal data.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ElementTemplate.UpdateData(System.Windows.Rect,System.Double[],System.Double)">
            <summary>
            Updates the internal data of the element.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ElementTemplate.UpdatePath(System.Windows.Media.PathFigure,System.Double[])">
            <summary>
            Appends the countour represented by the current element
            to the specified path.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ElementTemplate.OutsideBounds">
            <summary>
            Checks whether the element contains points outside of
            the (0, 0, 100, 100) percentage rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ElementTemplate.HitTest(System.Windows.Point,System.Double[],System.Double)">
            <summary>
            Determines whether a point lies near this shape definition element.
            </summary>
            <param name="point">
            A Point value specifying the point location, assuming
            the shape rotation angle is zero.
            </param>
            <param name="data"></param>
            <param name="maxDist"></param>
            <returns>
            true if the point is on or near to this element.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ElementTemplate.Draw(System.Windows.Media.DrawingContext,System.Windows.Media.Pen)">
            <summary>
            Renders the element to the specified graphics using the
            specified pen.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ElementTemplate.GetElementPen(System.Windows.Media.Pen)">
            <summary>
            Gets a pen used to render the element. If no pen properties
            are explicitly specified for this element, returns the pen
            passed as an argument.
            </summary>
            <param name="pen">
            The Pen object specifying the base pen.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ElementTemplate.SameAs(MindFusion.Diagramming.Wpf.ElementTemplate)">
            <summary>
            Checks whether the current element and the specified element
            resemble each other closely enough to be considered identical.
            </summary>
            <param name="obj">
            The ElementTemplate to compare to this element.
            </param>
            <returns>
            true if the specified object closely approximates this element;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ElementTemplate.FromXmlName(System.String)">
            <summary>
            Creates an ElementTemplate-derived object from the appropriate type,
            according to the specified XML name.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ElementTemplate.Color">
            <summary>
            Gest or sets the outline color of this element.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ElementTemplate.DashStyle">
            <summary>
            Gets or sets the dash style of the outline of this element.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ElementTemplate.Width">
            <summary>
            Gets or sets the outline width of this element.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ElementTemplate.XmlName">
            <summary>
            Gets the name of the XML tag representing elements of this type
            in an XML document.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoundRectangleTemplate.#ctor">
            <summary>
            Initializes a new istance of the RoundRectangleTemplate class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoundRectangleTemplate.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new istance of the RoundRectangleTemplate class
            with the specified settings.
            </summary>
            <param name="x">
            The x-coordinate of the top-left corner of the rectangle,
            expressed in percents of a shape node's bounding rectangle.
            </param>
            <param name="y">
            The y-coordinate of the top-left corner of the rectangle,
            expressed in percents of a shape node's bounding rectangle.
            </param>
            <param name="w">
            The width of the rectangle, expressed in percents of a shape
            node's bounding rectangle.
            </param>
            <param name="h">
            The height of the rectangle, expressed in percents of a shape
            node's bounding rectangle.
            </param>
            <param name="r">
            The round radius of the rectangle.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoundRectangleTemplate.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            ElementTemplate.SaveToXml override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoundRectangleTemplate.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            ElementTemplate.LoadFromXml override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoundRectangleTemplate.Clone">
            <summary>
            Creates an exact copy of this RoundRectangleTemplate element.
            </summary>
            <returns>
            An instance of the RoundRectangleTemplate class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoundRectangleTemplate.InitData(System.Windows.Rect,System.Double)">
            <summary>
            ElementTemplate.InitData override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoundRectangleTemplate.UpdateData(System.Windows.Rect,System.Double[],System.Double)">
            <summary>
            ElementTemplate.UpdateData override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoundRectangleTemplate.UpdatePath(System.Windows.Media.PathFigure,System.Double[])">
            <summary>
            ElementTemplate.UpdatePath override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoundRectangleTemplate.OutsideBounds">
            <summary>
            ElementTemplate.OutsideBounds override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoundRectangleTemplate.HitTest(System.Windows.Point,System.Double[],System.Double)">
            <summary>
            Determines whether a point lies near this round rectangle.
            </summary>
            <param name="point">
            A Point value specifying the point location, assuming
            the shape rotation angle is zero.
            </param>
            <param name="data"></param>
            <param name="maxDist"></param>
            <returns>
            true if the point is on or near to this round rectangle.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoundRectangleTemplate.SameAs(MindFusion.Diagramming.Wpf.ElementTemplate)">
            <summary>
            ElementTemplate.SameAs override.
            </summary>
            <param name="obj">
            The ElementTemplate to compare to this template.
            </param>
            <returns>
            true if the specified object is a RoundRectangleTemplate
            closely approximating this template; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoundRectangleTemplate.Draw(System.Windows.Media.DrawingContext,System.Windows.Media.Pen)">
            <summary>
            ElementTemplate.Draw override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RoundRectangleTemplate.Bounds">
            <summary>
            Gets the bounding rectangle of this element.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RoundRectangleTemplate.Radius">
            <summary>
            Gets or sets the round radius of this element.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RoundRectangleTemplate.XmlName">
            <summary>
            ElementTemplate.XmlName override.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Behaviors.LinkNodesBehavior">
            <summary>
            Declares a base class for all node-link behaviors,
            such as LinkShapesBehavior, LinkTablesBehavior, and so on.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Behaviors.BehaviorBase">
            <summary>
            An abstract base class for classes that define how WpfDiagram
            reacts to users' actions with a mouse or other pointing devices.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Interaction">
            <summary>
            Tracks mouse messages to implement user interaction with the diagram.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Interaction.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the Interaction class.
            </summary>
            <param name="diagram">The Diagram whose content will be modified.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Interaction.OnMouseDown(System.Windows.Point,MindFusion.Diagramming.Wpf.MouseButton)">
            <summary>
            Invoked when the mouse button is pressed.
            </summary>
            <param name="mousePosition">A Point instance that specifies the mouse pointer position.</param>
            <param name="mouseButton">A member of the MouseButton enumeration.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Interaction.OnMouseMove(System.Windows.Point)">
            <summary>
            Invoked when the mouse moves.
            </summary>
            <param name="mousePosition">A Point instance that specifies the mouse pointer position.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Interaction.OnMouseUp(System.Windows.Point,MindFusion.Diagramming.Wpf.MouseButton)">
            <summary>
            Invoked when the mouse button is released.
            </summary>
            <param name="mousePosition">A Point instance that specifies the mouse pointer position.</param>
            <param name="mouseButton">A member of the MouseButton enumeration.</param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Interaction.Diagram">
            <summary>
            Gets the Diagram modified through this Interaction object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.BehaviorBase.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the BehaviorBase class.
            </summary>
            <param name="diagram">
            The Diagram this behavior will be associated with.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.BehaviorBase.OnMouseDown(System.Windows.Point,MindFusion.Diagramming.Wpf.MouseButton)">
            <summary>
            Interaction.OnMouseDown override.
            </summary>
            <param name="mousePosition">A Point instance that specifies the mouse pointer position.</param>
            <param name="mouseButton">A member of the MouseButton enumeration.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.BehaviorBase.OnMouseMove(System.Windows.Point)">
            <summary>
            Interaction.OnMouseMove override.
            </summary>
            <param name="mousePosition">A Point instance that specifies the mouse pointer position.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.BehaviorBase.OnMouseUp(System.Windows.Point,MindFusion.Diagramming.Wpf.MouseButton)">
            <summary>
            Interaction.OnMouseUp override.
            </summary>
            <param name="mousePosition">A Point instance that specifies the mouse pointer position.</param>
            <param name="mouseButton">A member of the MouseButton enumeration.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.BehaviorBase.StartDraw(System.Windows.Point)">
            <summary>
            Invoked when a user presses the left mouse button inside
            the diagram drawing area.
            </summary>
            <param name="point">
            A Point structure, which specifies the current position of
            the mouse cursor, in document coordinates.
            </param>
            <returns>
            An instance of the InteractionState class, which specifies
            whether dragging the mouse should create or modify an item.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.BehaviorBase.SetMouseCursor(System.Windows.Point,System.Boolean@)">
            <summary>
            Invoked while the mouse is moved to let your application
            set the mouse cursor.
            </summary>
            <param name="point">
            A Point structure that specifies the position of the mouse cursor.
            </param>
            <param name="startInteraction">
            true if the user is going to create, delete, modify or select a
            DiagramItem; false if mouse behavior is not considered; in this
            case the mouse pointer is set to a default cursor according to
            the background LaneGrid.
            </param>
            <return>
            A member of the CursorHint enumeration.
            </return>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.BehaviorBase.StartDraw(System.Windows.Point,MindFusion.Diagramming.Wpf.MouseButton)">
            <summary>
            Invoked by the control when the user presses the left mouse button.
            </summary>
            <remarks>
            This method is invoked first and it relies on the public
            StartDraw method implemented by derived behavior classes.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.BehaviorBase.CreateLink">
            <summary>
            Creates a link of the type appropriate for the current behavior.
            </summary>
            <returns>
            An instance of the DiagramLink class.
            </returns>
            <remarks>
            Override this method to specify the type of DiagramLink, which
            is most appropriate for your diagram. The link is created every
            time the user connects two DiagramNode objects.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.BehaviorBase.SetModfCursor(System.Windows.Point,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Updates the current cursor according to the
            specified cursor position and diagram state.
            </summary>
            <param name="pt">
            A Point structure that specifies the current mouse position.
            </param>
            <param name="handle">
            The index of the adjustment handle, at which the mouse points.
            </param>
            <param name="active">
            Specifies whether the mouse is over the ActiveItem.
            </param>
            <param name="autoh">
            true when the mouse is over a DiagramItem and the ModificationStart
            property of the DiagramView is set to AutoHandles.
            </param>
            <returns>
            A member of the CursorHint enumeration.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.BehaviorBase.ShouldSplitLink(System.Windows.Point,System.Int32@)">
            <summary>
            Checks whether the link located at the specified
            point is allowed to split.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Behaviors.BehaviorBase.CurrentCursor">
            <summary>
            Gets or sets the current mouse cursor.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.LinkNodesBehavior.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the LinkNodesBehavior class.
            </summary>
            <param name="diagram">
            The Diagram this behavior will be associated with.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.LinkNodesBehavior.StartDraw(System.Windows.Point)">
            <summary>
            BehaviorBase.StartDraw override.
            </summary>
            <param name="point">
            A Point structure, which specifies the current position
            of the mouse cursor, in document coordinates.
            </param>
            <returns>
            An instance of the InteractionState class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.LinkNodesBehavior.CreateNode">
            <summary>
            Creates a node of the type appropriate for the current behavior.
            </summary>
            <returns>
            An instance of the DiagramNode class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.LinkNodesBehavior.SetMouseCursor(System.Windows.Point,System.Boolean@)">
            <summary>
            BehaviorBase.SetMouseCursor override.
            </summary>
            <param name="point">
            A Point structure that specifies the position of the mouse cursor.
            </param>
            <param name="startInteraction">
            true if the user is going to create, delete, modify or select
            a DiagramItem; false if mouse behavior is not considered; in
            this case the mouse pointer is set to a default cursor according
            to the background LaneGrid.
            </param>
            <returns>
            A member of the CursorHint enumeration.
            </returns>
        </member>
        <member name="T:MindFusion.Layout.IElement">
            <summary>
            An abstraction of a node (vertex) or link (edge) in a graph.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.IElement.GetBounds">
            <summary>
            Returns an approximation of the element's smallest bounding rectangle.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.IElement.Traits">
            <summary>
            Contains properties specific to each layout algorithm.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.IElement.Weight">
            <summary>
            Gets the weight of the element.
            </summary>
            <remarks>
            Rarely used by some layouting procedures and path-finding.
            </remarks>
        </member>
        <member name="P:MindFusion.Layout.IElement.RuntimeData">
            <summary>
            Gets or sets custom data associated with this element.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.IElement.IsVirtual">
            <summary>
            Gets or sets a value indicating whether this element is virtual, that is, temporarily
            created by the layout algorithm and with no actual representation in the source graph.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.INode">
            <summary>
            An abstraction of a node (vertex) in a graph.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.INode.Bounds">
            <summary>
            Gets or sets the bounding rectangle of the node.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.INode.OutLinks">
            <summary>
            Gets all outgoing links.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.INode.InLinks">
            <summary>
            Gets all incoming links.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.INode.Center">
            <summary>
            Gets or sets the geometric center of this node.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.PointList.#ctor">
            <summary>
            Initializes a new instance of the PointList class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.PointList.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the PointList class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.PointList.#ctor(System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the PointList class
            with the specified point values.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.PointList.Clone">
            <summary>
            Creates a shallow copy of this collection.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.PointList.First">
            <summary>
            Gets or sets the first point in the collection.
            </summary>
            <remarks>
            An IndexOutOfRangeException will be thrown if the
            collection is empty.
            </remarks>
        </member>
        <member name="P:MindFusion.Layout.PointList.Last">
            <summary>
            Gets or sets the last point in the collection.
            </summary>
            <remarks>
            An IndexOutOfRangeException will be thrown if the
            collection is empty.
            </remarks>
        </member>
        <member name="T:MindFusion.Layout.ILink">
            <summary>
            An abstraction of a link (edge) in a graph.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.ILink.SetPoints(System.Collections.ArrayList)">
            <summary>
            Invoked by some layouting algorithms to update the sequence
            of points which define the link.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.ILink.UpdatePoints">
            <summary>
            Invoked to update the link after its point sequence
            has been changed.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.ILink.UpdatePointsFromSource">
            <summary>
            Invoked to update the points of this abstract object from its underlying source.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.ILink.GetOppositeNode(MindFusion.Layout.INode)">
            <summary>
            Returns the node at the opposite end of the link.
            </summary>
            <param name="aNode">
            Specifies a node whose opposite node should be returned.
            </param>
            <returns>
            The node opposite to the specified node.
            </returns>
        </member>
        <member name="P:MindFusion.Layout.ILink.Origin">
            <summary>
            Gets the origin node of this link.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.ILink.Destination">
            <summary>
            Gets the destination node of this link.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.ILink.Points">
            <summary>
            Gets or sets the sequence of points defining this link.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.IGraph">
            <summary>
            An abstraction of a general purpose graph.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.IGraph.CreateVirtualNode(System.Windows.Rect)">
            <summary>
            Creates a vertex in the graph.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.IGraph.RemoveVirtualNode(MindFusion.Layout.INode)">
            <summary>
            Removes the specified virtual vertex from the graph.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.IGraph.CreateVirtualLink(MindFusion.Layout.INode,MindFusion.Layout.INode)">
            <summary>
            Creates an edge in the graph between the specified vertices.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.IGraph.RemoveVirtualLink(MindFusion.Layout.ILink)">
            <summary>
            Removes the specified virtual edge from the graph.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.IGraph.Nodes">
            <summary>
            Gets a collection with all nodes (vertices) of the graph.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.IGraph.Links">
            <summary>
            Gets a collection with all links (edges) in the graph.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.IGraph.DocRect">
            <summary>
            Gets the bounding rectangle of the document, containing the graph.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.IGraph.Directed">
            <summary>
            Gets a value indicating whether the direction of links
            in this graph should be considered, i.e. the graph is a
            'directed graph'.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.ElementCollection">
            <summary>
            Represents a strongly-typed collection of IElement objects.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.ElementCollection.#ctor">
            <summary>
            Initializes a new instance of the ElementCollection class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.ElementCollection.Clone">
            <summary>
            Creates a shallow copy of this collection.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.ElementCollection.Add(MindFusion.Layout.IElement)">
            <summary>
            Adds the specified element to the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.ElementCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds all elements of the specified collection to this collection.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.ElementCollection.Insert(System.Int32,MindFusion.Layout.IElement)">
            <summary>
            Inserts the specified element at the specified index.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.ElementCollection.GetAt(System.Int32)">
            <summary>
            Returns the element at the specified position.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.ElementCollection.Remove(MindFusion.Layout.IElement)">
            <summary>
            Removes the specified element from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.ElementCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.ElementCollection.Contains(MindFusion.Layout.IElement)">
            <summary>
            Checks whether the specified element is contained in the collection.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.ElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified position within the collection.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.NodeCollection">
            <summary>
            Represents a strongly-typed collection of INode objects.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.NodeCollection.#ctor">
            <summary>
            Initializes a new instance of the NodeCollection class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.NodeCollection.Clone">
            <summary>
            Creates a shallow copy of this collection.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.NodeCollection.Add(MindFusion.Layout.INode)">
            <summary>
            Adds the specified node to the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.NodeCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds all nodes of the specified collection to this collection.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.NodeCollection.Insert(System.Int32,MindFusion.Layout.INode)">
            <summary>
            Inserts the specified node at the specified index.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.NodeCollection.GetAt(System.Int32)">
            <summary>
            Returns the node at the specified position.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.NodeCollection.Remove(MindFusion.Layout.INode)">
            <summary>
            Removes the specified node from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.NodeCollection.Clear">
            <summary>
            Removes all nodes from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.NodeCollection.Contains(MindFusion.Layout.INode)">
            <summary>
            Checks whether the specified node is contained in the collection.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.NodeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the node at the specified position within the collection.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.LinkCollection">
            <summary>
            Represents a strongly-typed collection of ILink objects.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LinkCollection.#ctor">
            <summary>
            Initializes a new instance of the LinkCollection class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LinkCollection.Clone">
            <summary>
            Creates a shallow copy of this collection.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LinkCollection.Add(MindFusion.Layout.ILink)">
            <summary>
            Adds the specified link to the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LinkCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds all links from the specified collection to this collection.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LinkCollection.Insert(System.Int32,MindFusion.Layout.ILink)">
            <summary>
            Inserts the specified link at the specified position.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LinkCollection.GetAt(System.Int32)">
            <summary>
            Get the link at the specified position.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LinkCollection.Remove(MindFusion.Layout.ILink)">
            <summary>
            Removes the specified link from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LinkCollection.Clear">
            <summary>
            Removes all links from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LinkCollection.Contains(MindFusion.Layout.ILink)">
            <summary>
            Checks whether the specified link is contained within the collection.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.LinkCollection.Item(System.Int32)">
            <summary>
            Gets or sets the link at the specified position.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.GraphNode">
            <summary>
            Represents a node in a graph.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.GraphNode.#ctor(MindFusion.Layout.INode)">
            <summary>
            Initializes a new instance of the GraphNode class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.GraphNode.#ctor(System.Windows.Rect)">
            <summary>
            Initializes a new instance of the GraphNode class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.GraphNode.GetData(System.Int32)">
            <summary>
            Returns the user data object associated with this node under the specified key.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.GraphNode.SetData(System.Int32,System.Object)">
            <summary>
            Associates a user data object with this node under the specified key.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.GraphNode.Node">
            <summary>
            Gets the underlying INode.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.GraphNode.InLinks">
            <summary>
            Gets all incoming links.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.GraphNode.OutLinks">
            <summary>
            Gets all outgoing links.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.GraphNode.LinkCount">
            <summary>
            Gets the total number of link of this node.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.GraphNode.Center">
            <summary>
            Gets the geometric center of this node.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.GraphNode.Z">
            <summary>
            Gets or sets the z-coordinate of this node.
            </summary>
            <remarks>
            Used by 3-dimensional layouting algorithms.
            </remarks>
        </member>
        <member name="P:MindFusion.Layout.GraphNode.Bounds">
            <summary>
            Gets the bounding rectangle of this node.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.GraphNode.Index">
            <summary>
            An integer index of the node within the graph.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.GraphLink">
            <summary>
            Represents a link in a graph.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.GraphLink.#ctor(MindFusion.Layout.ILink,MindFusion.Layout.GraphNode,MindFusion.Layout.GraphNode)">
            <summary>
            Initializes a new instance of the GraphLink class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.GraphLink.#ctor(MindFusion.Layout.GraphNode,MindFusion.Layout.GraphNode)">
            <summary>
            Initializes a new instance of the GraphLink class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.GraphLink.GetData(System.Int32)">
            <summary>
            Returns the user data object associated with link under the specified key.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.GraphLink.SetData(System.Int32,System.Object)">
            <summary>
            Associates a user data object with this link under the specified key.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.GraphLink.Reverse">
            <summary>
            Reverses the direction of this link.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.GraphLink.Link">
            <summary>
            Gets the underlying ILink object.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.GraphLink.Origin">
            <summary>
            Gets or sets the origin node of this link.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.GraphLink.Destination">
            <summary>
            Gets or sets the destination node of this link.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.GraphLink.IsReversed">
            <summary>
            Gets a value indicating whether the link's direction has been reversed.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.Graph">
            <summary>
            Represents a graph.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Graph.#ctor(MindFusion.Layout.IGraph)">
            <summary>
            Initializes a new instance of the Graph class
            based on the specified IGraph.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Graph.CreateNode(MindFusion.Layout.INode)">
            <summary>
            Creates a new GraphNode based on the specified INode.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Graph.CreateLink(MindFusion.Layout.ILink,System.Collections.Generic.List{MindFusion.Layout.GraphNode})">
            <summary>
            Creates a new GraphLink object based on the specified ILink.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Graph.GetData(System.Int32)">
            <summary>
            Returns the user data object associated with this node under the specified key.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Graph.SetData(System.Int32,System.Object)">
            <summary>
            Associates a user data object with this node under the specified key.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.Graph.Nodes">
            <summary>
            Gets a collection with all nodes in this graph.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.Graph.Links">
            <summary>
            Gets a collection with all links in this graph.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.ITreeNodeVisitor">
            <summary>
            Base interface for all tree visitors.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.ITreeNodeVisitor.Visit(MindFusion.Layout.TreeNode)">
            <summary>
            Visits the specified tree node.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.VisitOperation">
            <summary>
            Represents methods invoked on tree nodes by tree visitors.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.MethodCallVisitor">
            <summary>
            A visitor that invokes particular method on all visited tree nodes.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.MethodCallVisitor.#ctor(MindFusion.Layout.VisitOperation)">
            <summary>
            Initialize a new instance of the MethodCallVisitor class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.MethodCallVisitor.Visit(MindFusion.Layout.TreeNode)">
            <summary>
            ITreeNodeVisitor.Visit implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.MethodCallVisitor.GetData(System.Int32)">
            <summary>
            Returns custom data associated with this visitor under the specified key.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.MethodCallVisitor.SetData(System.Int32,System.Object)">
            <summary>
            Associates the specified data with this visitor under the specified key.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.TreeNode">
            <summary>
            Internal class for the TreeLayout system,
            used during the rearrangement.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.TreeNode.#ctor(MindFusion.Layout.TreeNode,MindFusion.Layout.INode)">
            <summary>
            Initializes a new instance of the TreeNode class with
            a given parent and an adapter, containing interface to
            access the client's tree node.
            </summary>
            <param name="parent">
            The parent node of this node.
            </param>
            <param name="node">
            The adapter object.
            </param>
        </member>
        <member name="M:MindFusion.Layout.TreeNode.SetLevel(System.Int32)">
            <summary>
            Overrides this TreeNode's level.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TreeNode.Level">
            <summary>
            Gets the depth within the tree of this node.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TreeNode.Parent">
            <summary>
            Gets this node's parent.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TreeNode.Children">
            <summary>
            Gets a collection with all child nodes.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TreeNode.InLinks">
            <summary>
            GraphNode.InLinks override.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TreeNode.OutLinks">
            <summary>
            GraphNode.OutLinks override.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TreeNode.LinkCount">
            <summary>
            GraphNode.LinkCount override.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TreeNode.Center">
            <summary>
            GraphNode.Center override.
            </summary>
            TODO (cecko): why the hell are we overriding this?
        </member>
        <member name="P:MindFusion.Layout.TreeNode.Weight">
            <summary>
            Gets or sets the weight of this node - the total number
            of its children (both direct and indirect).
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TreeNode.AssistantType">
            <summary>
            Gets a value indicating whether the node is "assistant" and its type.
            </summary>
            <remarks>
            Assistant nodes are arranged differently than normal (so-called
            "subordinate" nodes) in a center tree layout.
            </remarks>
        </member>
        <member name="P:MindFusion.Layout.TreeNode.AssistantPosition">
            <summary>
            Gets or sets the final position of this assistant relative to its parent.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TreeNode.HasAssistants">
            <summary>
            Gets a value indicating whether this node has at least one assistant.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.WeightComparer">
            <summary>
            Compares TreeNode objects by their Weight according to a specified
            balancing criteria.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.WeightComparer.#ctor(MindFusion.Layout.TreeLayoutBalance)">
            <summary>
            Initializes a new instance of the WeightComparer class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.WeightComparer.Compare(MindFusion.Layout.TreeNode,MindFusion.Layout.TreeNode)">
            <summary>
            IComparer.Compare implementation.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.Tree">
            <summary>
            Represents a tree.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Tree.#ctor(MindFusion.Layout.TreeLayoutBalance)">
            <summary>
            Initializes a new instance of the Tree class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Tree.WalkTree(MindFusion.Layout.TreeNode,MindFusion.Layout.ITreeNodeVisitor)">
            <summary>
            Performs an operation over all tree nodes in the
            specified order. The operation is specified
            through a visitor object.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Tree.Build(MindFusion.Layout.INode)">
            <summary>
            Build the tree.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Tree.Build(MindFusion.Layout.INode,System.Boolean,System.Boolean)">
            <summary>
            Build the tree.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Tree.IsVisited(MindFusion.Layout.INode)">
            <summary>
            Checks whether the specified node has already been visited.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Tree.UpdateAssistantPositions(MindFusion.Layout.TreeNode)">
            <summary>
            Updates the relative position of all assistant nodes.
            Left and right assistants are distributed to left and right
            accordingly. Normal assistants are distributed according
            to their order in the children list.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Tree.ReassignLevels(MindFusion.Layout.TreeNode,System.Boolean)">
            <summary>
            Reassigns tree levels when "assistants" are enabled.
            </summary>
            <returns>
            The maximum level assigned to a child of the specified node,
            that is, the depth of the branch.
            </returns>
        </member>
        <member name="M:MindFusion.Layout.Tree.BuildChildren(MindFusion.Layout.TreeNode)">
            <summary>
            Recursive child-building function.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Tree.BuildLevels">
            <summary>
            Build the levels of the tree. Each level contain all the nodes from that level.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Tree.Balance">
            <summary>
            Balances the tree according to the current balancing criteria.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Tree.Balance(MindFusion.Layout.TreeNode,MindFusion.Layout.MethodCallVisitor)">
            <summary>
            Sorts the children of the specified node according to the
            underlying balancing criteria.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Tree.ReverseOrder(MindFusion.Layout.TreeNode)">
            <summary>
            Reverses the order of children of the specified node, and recursively
            for the node's children by calculating appropriate weights.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Tree.CalculateWeight(MindFusion.Layout.TreeNode)">
            <summary>
            Calculates the weight of the specified node, as the number of total
            number of children (both direct and indirect). Also recursively
            calculates the weights of all children of the specified node in order
            to receive the weight of the node itself.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.Tree._root">
            <summary>
            The root tree node.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.Tree._balance">
            <summary>
            The balancing criteria for the tree.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.Tree._treeLevels">
            <summary>
            A list with all levels of the tree. A level is
            defined as a set of all nodes that are located at
            the same distance relative to the root node.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.Tree._visited">
            <summary>
            A list with all visited tree nodes.
            This will ensure that no loops will occur.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.Tree.Root">
            <summary>
            Gets the root node in the tree.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.Tree.TreeLevels">
            <summary>
            Gets a collection with all nodes in this tree divided by levels.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Path">
            <summary>
            Represents a sequence of connected DiagramNode and DiagramLink elements.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Path.#ctor(MindFusion.Layout.Path)">
            <summary>
            Initializes a new instance of the Path class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Path.GetWeight(System.Boolean,System.Boolean)">
            <summary>
            Calculates the weight of this Path by accumulating the
            Weight of all participating Diagram elements.
            </summary>
            <param name="incNodes">
            A boolean value, which specifies whether the Weight of
            DiagramNode elements should be considered.
            </param>
            <param name="incLinks">
            A boolean value, which specifies whether the Weight of
            DiagramLink elements should be considered.
            </param>
            <returns>
            A double value that represents the total weight of the elements
            in this Path according to the incNodes and incLinks parameters.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Path.Nodes">
            <summary>
            Gets a collection of all DiagramNode elements participating in the path.
            </summary>
            <remarks>
            Use Links to get all DiagramLinks elements in the Path.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Path.Links">
            <summary>
            Gets a collection of all DiagramLink elements participating in the path.
            </summary>
            <remarks>
            Use Nodes to get all DiagramNode elements in the Path.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Path.Items">
            <summary>
            Gets a collection of all DiagramNode and DiagramLink elements in the path.
            </summary>
            <remarks>
            The collection contains consecutive DiagramNode and DiagramLink objects.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Path.Length">
            <summary>
            Gets the length of the Path expressed as the number of Links
            participating in it.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.PathCollection">
            <summary>
            Represents a strongly-typed collection of Path objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PathCollection.#ctor">
            <summary>
            Initializes a new instance of the PathCollection class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PathCollection.#ctor(MindFusion.Layout.PathList)">
            <summary>
            Initializes a new instance of the PathCollection class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PathCollection.Add(MindFusion.Diagramming.Wpf.Path)">
            <summary>
            Adds the specified Path to the collection.
            </summary>
            <param name="path">
            The Path object to add.
            </param>
            <remarks>
            The Path object is added at the end of the PathCollection.
            Use Insert to specify the place of the new element.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PathCollection.Insert(System.Int32,MindFusion.Diagramming.Wpf.Path)">
            <summary>
            Inserts the specified path to the collection
            at the specified index.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PathCollection.GetAt(System.Int32)">
            <summary>
            Gets the Path at the specified position.
            </summary>
            <param name="index">
            The zero-based index of the Path element to get.
            </param>
            <returns>
            The Path at the specified position in the PathCollection.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PathCollection.Remove(MindFusion.Diagramming.Wpf.Path)">
            <summary>
            Removes the specified Path element from the PathCollection.
            </summary>
            <param name="path">
            The Path element to remove.
            </param>
            <remarks>
            The size of the PathCollection is corrected. Indexes of the
            elements after path are updated too.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PathCollection.Clear">
            <summary>
            Removes all Path elements from the PathCollection.
            </summary>
            <remarks>
            The method removes all Path elements in the collection.
            If you want to delete a specific element use Remove.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.PathCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Path at the specified position.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.PathFinder">
            <summary>
            Provides methods that help you find paths and cycles in a graph.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PathFinder.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the PathFinder class.
            Path-finding will depend on the direction of links.
            </summary>
            <param name="diagram">
            An instance of the Diagram class in which to look for paths or cycles.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PathFinder.#ctor(MindFusion.Diagramming.Wpf.Diagram,System.Boolean)">
            <summary>
            Initializes a new instance of the PathFinder class,
            optionally ignoring the link direction.
            </summary>
            <param name="diagram">
            A Diagram instance in which to look for paths or cycles.
            </param>
            <param name="ignoreDirection">
            Specifies whether the direction of links should be considered
            when looking for paths or cycles.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PathFinder.FindAllPaths(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Finds and returns all paths that exist between two DiagramNode objects.
            </summary>
            <param name="from">
            The first DiagramNode in the Path.
            </param>
            <param name="to">
            The last DiagramNode in the Path.
            </param>
            <returns>
            A collection of Path objects; if no paths are found, the collection is empty.
            </returns>
            <remarks>
            The returned Path instances include the from an to nodes.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PathFinder.FindAllPaths(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.DiagramNode,System.Int32)">
            <summary>
            Finds and returns all paths that exist between two DiagramNode objects.
            </summary>
            <param name="from">
            The first DiagramNode in the Path.
            </param>
            <param name="to">
            The last DiagramNode in the Path.
            </param>
            <param name="maxPaths">
            The maximum number of paths to find.
            </param>
            <returns>
            A collection of Path objects; if no paths are found, the collection is empty.
            </returns>
            <remarks>
            The returned Path instances include the from an to nodes.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PathFinder.FindShortestPath(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Finds and returns the shortest Path between the specified
            DiagramNode objects.
            </summary>
            <param name="from">
            The first DiagramNode in the Path.
            </param>
            <param name="to">
            The last DiagramNode in the Path.
            </param>
            <returns>
            A Path instance that represents the shortest path found; null
            (Nothing in Visual Basic) if there is no path connecting from and to.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PathFinder.FindShortestPath(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.DiagramNode,System.Boolean,System.Boolean)">
            <summary>
            Finds and returns the shortest path between two DiagramNode elements,
            considering the Weight of the nodes, the Weight of the links or both.
            </summary>
            <param name="from">
            The first DiagramNode in the Path.
            </param>
            <param name="to">
            The last DiagramNode in the Path.
            </param>
            <param name="useNodeWeights">
            If true, the Path with minimal total weight is found, summing the
            Weight of nodes in the Path.
            </param>
            <param name="useLinkWeights">
            If true, the Path with minimal total weight is found, summing the
            Weight of links in the Path.
            </param>
            <returns>
            A Path instance that represents the shortest Path found or null
            (Nothing in Visual Basic) if there is no Path connecting from and to.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PathFinder.FindLongestPath(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Finds the longest path between the specified DiagramNode objects.
            </summary>
            <param name="from">
            The first DiagramNode element in the Path.
            </param>
            <param name="to">
            The last DiagramNode element in the Path.
            </param>
            <returns>
            A Path instance that represents the longest path found; null
            (Nothing in Visual Basic) if there is no Path connecting from and to.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PathFinder.FindLongestPath">
            <summary>
            Finds the longest path in the graph.
            </summary>
            <returns>
            A Path instance that represents the longest path found;
            null (Nothing in Visual Basic) if there are no DiagramNode
            elements in the graph.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PathFinder.FindLongestPath(System.Int64)">
            <summary>
            Finds the longest path in the diagram.
            </summary>
            <param name="timeLimit">
            The maximum duaration of the search process, in milliseconds.
            </param>
            <returns>
            The longest Path found; null (Nothing in Visual Basic) if
            no Path has been detected.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PathFinder.FindCycle(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Detects whether the specified DiagramNode participates in a cycle.
            </summary>
            <param name="participant">
            A DiagramNode element which should participate in the found cycle.
            </param>
            <returns>
            A Path instance that represents the found cycle;
            null (Nothing in Visual Basic) if no cycle is detected.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PathFinder.FindCycle">
            <summary>
            Finds a cycle in the Diagram.
            </summary>
            <returns>
            A Path instance that represents the found cycle; null
            (Nothing in Visual Basic) if no cycle is detected.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PathFinder.FindAllCycles">
            <summary>
            Finds all cycles in the underlying diagram.
            </summary>
            <returns>
            A collection of Path objects; if no cycles are detected,
            the collection is empty.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PathFinder.EnumAllCycles">
            <summary>
            Enumerates all cycles in the underlying diagram.
            </summary>
            <returns>
            A collection of Path objects; if no cycles are detected,
            the collection is empty.
            </returns>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Behaviors.DrawControlsBehavior">
            <summary>
            This class is used when the diagram behavior is set to BehaviorType.DrawControls.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Behaviors.DrawNodesBehavior">
            <summary>
            This class is the base for node-drawing behavior classes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.DrawNodesBehavior.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the DrawNodesBehavior class.
            </summary>
            <param name="diagram">
            The Diagram this behavior will be associated with.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.DrawNodesBehavior.StartDraw(System.Windows.Point)">
            <summary>
            BehaviorBase.StartDraw override.
            </summary>
            <param name="point">
            A Point structure, which specifies the current position of
            the mouse cursor, in document coordinates.
            </param>
            <returns>
            An instance of the InteractionState class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.DrawNodesBehavior.SetMouseCursor(System.Windows.Point,System.Boolean@)">
            <summary>
            BehaviorBase.SetMouseCursor override.
            </summary>
            <param name="point">
            A Point structure that specifies the position of the mouse cursor.
            </param>
            <param name="startInteraction">
            true if the user is going to create, delete, modify or select a
            DiagramItem; false if mouse behavior is not considered; in this
            case the mouse pointer is set to a default cursor according to
            the background LaneGrid.
            </param>
            <returns>
            A member of the CursorHint enumeration.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.DrawNodesBehavior.CreateNode">
            <summary>
            Creates a node of the type appropriate for the current behavior.
            </summary>
            <returns>
            An instance of the DiagramNode class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.DrawControlsBehavior.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the DrawControlsBehavior class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.DrawControlsBehavior.CreateNode">
            <summary>
            LinkNodesBehavior.CreateNode override.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DiagramItemProperties">
            <summary>
            The base class for classes that store diagram item
            properties during undo / redo operations.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItemProperties.FreeResources">
            <summary>
            Frees stored unmanaged resources which will not be used any longer.
            The component invokes this method when a record is discarded form the undo history queue.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Converter">
            <summary>
            Provides capabilities to convert various types to and from strings
            in a cutlure-independent way.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToBoolean(System.String)">
            <summary>
            Converts the specified string value to bool.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A boolean value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.FromBoolean(System.Boolean)">
            <summary>
            Converts the specified bool value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToDecimal(System.String)">
            <summary>
            Converts the specified string value to decimal.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A decimal value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.FromDecimal(System.Decimal)">
            <summary>
            Converts the specified decimal to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToSingle(System.String)">
            <summary>
            Converts the specified string value to float.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A float value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.FromSingle(System.Single)">
            <summary>
            Converts the specified float value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.FromSingle(System.Double)">
            <summary>
            Converts the specified double value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToDouble(System.String)">
            <summary>
            Converts the specifed string value to double.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A double value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.FromDouble(System.Double)">
            <summary>
            Converts the specified double value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToByte(System.String)">
            <summary>
            Converts the specified string value to byte value.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A byte value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.FromByte(System.Byte)">
            <summary>
            Converts the specified byte value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToSByte(System.String)">
            <summary>
            Converts the specified string value to 8-bit signed integer.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            An 8-bit signed integer value that is deserialized from the
            specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.FromSByte(System.SByte)">
            <summary>
            Converts the specified 8-bit signed integer to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToUint16(System.String)">
            <summary>
            Converts the specified string value to unsigned 16-bit integer.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            An unsigned 16-bit integer value that is deserialized from
            the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.FromUInt16(System.UInt16)">
            <summary>
            Converts the specified unsigned 16-bit integer value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToUint32(System.String)">
            <summary>
            Converts the specified string value to unsigned 32-bit integer.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            An unsigned 32-bit integer value that is deserialized from
            the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.FromUInt32(System.UInt32)">
            <summary>
            Converts the specified unsigned 32-bit integer value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToUint64(System.String)">
            <summary>
            Converts the specified string value to unsigned 64-bit integer.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <remarks>
            An unsigned 64-bit integer value that is deserialized from
            the specified string.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.FromUInt64(System.UInt64)">
            <summary>
            Converts the specified unsigned 64-bit integer value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToChar(System.String)">
            <summary>
            Converts the specified string value to char.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A char value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.FromChar(System.Char)">
            <summary>
            Converts the specified char value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToInt16(System.String)">
            <summary>
            Converts the specified string value to 16-bit integer.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A 16-bit integer value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.FromInt16(System.Int16)">
            <summary>
            Converts the specified 16-bit integer value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToInt32(System.String)">
            <summary>
            Converts the specified string value to 32-bit integer.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A 32-bit integer value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToInt32(System.String,System.Int32)">
            <summary>
            Converts the specified string value to 32-bit integer without throwing
            exceptions. In case the specified string cannot be converted, the
            specified default value is returned.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <param name="defaultValue">
            The default value to return if s cannot be deserialized.
            </param>
            <returns>
            A 32-bit integer value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.FromInt32(System.Int32)">
            <summary>
            Converts the specified 32-bit integer value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToInt64(System.String)">
            <summary>
            Converts the specified string value to 64-bit integer.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A 64-bit integer value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.FromInt64(System.Int64)">
            <summary>
            Converts the specified 64-bit integer to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToColor(System.String)">
            <summary>
            Converts the specified string value to Color.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A Color value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToBrush(System.String)">
            <summary>
            Converts the specified string value to Color.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.FromColor(System.Windows.Media.Color)">
            <summary>
            Converts the specified color value to string in the format #AARRGGBB.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ImageFromString(System.String)">
            <summary>
            Converts the specified string value to image.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            An instance of the .NET Image class that is deserialized
            from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToImageV4(System.String)">
            <summary>
            Converts the specified string value to image.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A .NET BitmapSource object that is deserialized from the specified string.
            </returns>
            <remarks>
            This method is used in XML file format 4 and earlier.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToImage(System.String)">
            <summary>
            Converts the specified string value to image.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A .NET Image object that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.FromImage(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Converts the specified image to string.
            </summary>
            <param name="val">
            The image object to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToStreamV4(System.String)">
            <summary>
            Converts the specified string value to stream.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A .NET Stream object that is deserialized from the specified string.
            </returns>
            <remarks>
            This method is used in XML file format 4 and earlier.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.FromStreamV4(System.IO.MemoryStream)">
            <summary>
            Converts the specified memory stream to string.
            </summary>
            <param name="val">
            The Stream object to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
            <remarks>
            This method is used in XML file format 4 and earlier.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToStream(System.String)">
            <summary>
            Converts the specified string value to stream.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A .NET Stream object that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.FromStream(System.IO.Stream)">
            <summary>
            Converts the specified stream to string.
            </summary>
            <param name="val">
            The Stream object to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.FromEnum(System.Object)">
            <summary>
            Converts the specified enum value to a string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.ToEnum(System.Type,System.String)">
            <summary>
            Converts the specified string value to its corresponding
            enumeration member of the specified type.
            </summary>
            <param name="type">
            The type of the enumeration to convert to.
            </param>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A member of the specified enumeration that is deserialized from
            the specified string, possibly a null reference (Nothing in Visual
            Basic) if the deserialization failed.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Converter.FromXmlElement(System.Xml.XmlElement)">
            <summary>
            Deserializes a Point object from the specified XmlElement.
            </summary>
            <param name="point">
            The XmlElement representing the serialized point.
            </param>
            <returns>
            A Point object deserialized from the specified XmlElement.
            </returns>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ConnectionPoint">
            <summary>
            This class represent a connection between an edge and
            a node in a graph. It decouples the DiagramLink class from
            the DiagramNode class, allowing edges to connect different
            types of nodes without knowing anything of their
            implementation details. Each DiagramLink objects contains
            two ConnectionPoint instances describing the connections at both
            ends of the link.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.#ctor(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean)">
            <summary>
            Initializes a new instance of the ConnectionPoint class between the
            specified node and link.
            </summary>
            <param name="node">
            The node whose connection to a link is managed by this ConnectionPoint.
            </param>
            <param name="link">
            The link whose connection to a node is managed by this ConnectionPoint.
            </param>
            <param name="incoming">
            Specifies which end of the link is represented by this ConnectionPoint.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.#ctor">
            <summary>
            Initializes a new instance of the ConnectionPoint class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.SameNode(MindFusion.Diagramming.Wpf.ConnectionPoint)">
            <summary>
            Checks whether the current connection point and the specified
            connection point are associated with the same node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.LinkChanges(MindFusion.Diagramming.Wpf.DiagramItem,System.Windows.Point)">
            <summary>
            Checks whether the link would change if attached to
            the specified node at the specified point.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.UpdateFromPoint(System.Windows.Point)">
            <summary>
            Updates the connection stated according to the specified point,
            without changing the related node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.NodesIntersect(MindFusion.Diagramming.Wpf.ConnectionPoint)">
            <summary>
            Checks whether the node associated with the current connection point
            and the node associated with the specified connection point intersect.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.GetIntersection(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates the intersection point between the specified
            line segment and the contour of the node associated with
            this connection point.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.GetNodeRect(System.Boolean)">
            <summary>
            Returns the bounding rectangle of the node associated
            with this connection point.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.AddLinkToNode">
            <summary>
            Adds the link associated with this connection point to
            the associated node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.RemoveLinkFromNode">
            <summary>
            Removes the link associated with this connection point from
            the associated node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.SaveEndRelative">
            <summary>
            Updates the coordinates of the connection point represented by
            this link, relative to the bounding rectangle of the associated
            node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.GetEndPoint">
            <summary>
            Calculates the coordinates of the this connection point
            expressed in document coordinates.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.GetInitialPoint">
            <summary>
            Returns a point (usually the center of the bounding rectangle)
            contained within the associated node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.CanMoveLink(System.Windows.Point)">
            <summary>
            Checks whether the specified point, expressed in document coordinates,
            is a valid location for this connection point.
            </summary>
            <param name="pt">
            The Point to check for validity.
            </param>
            <returns>
            true if the specified point represents a valid location for the connection
            point; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.CalculateIntersections">
            <summary>
            Determines whether the end of a link should be aligned to the
            point where the node contour is intersected by the line
            connecting the centers of the connected nodes.
            </summary>
            <returns>
            true to align the link end; otherwise false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.GetAnchoredPoint(MindFusion.Diagramming.Wpf.AnchorPosition,System.Boolean)">
            <summary>
            Returns the document coordinates of the specified anchor
            regarding the node associated with this connection point.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.GetAnchor(System.Windows.Point,System.Boolean,System.Int32@)">
            <summary>
            Returns the anchor point closest to the specified point
            from the node's asociated anchor pattern.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.GetAnchorPos(System.Int32)">
            <summary>
            Returns the point from the node's associated anchor pattern
            (if any) with the specified index or the link's initial point.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.GetAnchorPos(System.Int32,System.Windows.Point@)">
            <summary>
            Retrieves the point from the node's associated anchor pattern
            (if any) with the specified index.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.AnchorPointFromIndex(System.Int32)">
            <summary>
            Returns the AnchorPoint instance with the specified index.
            </summary>
            <param name="index">An index of a point within the target AnchorPattern.</param>
            <returns>An instance of the AnchorPoint class.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.GetNearestAnchorPoint(System.Windows.Point)">
            <summary>
            Returns the nearest anchor point pertinent to this connection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ConnectionPoint.GetNearestBorderPoint(System.Windows.Point)">
            <summary>
            Returns the nearest point lying on the node border.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ConnectionPoint.Link">
            <summary>
            Gets the link associated with this connection point.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ConnectionPoint.Node">
            <summary>
            Gets the node associated with this connection point.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ConnectionPoint.Incoming">
            <summary>
            Gets a flag indicating whether this connection point is at the
            origin or the destination of the associated link.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ConnectionPoint.RelativePosition">
            <summary>
            Gets or sets the position of this connection point,
            relative to the associated node's bounding rectangle,
            expressed in percents.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ConnectionPoint.Row">
            <summary>
            Gets the index of a constituent item within the associated node where the
            link represented by this connection point is connected, or -1, if the link is
            connected to the node itself.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.CommandContext">
            <summary>
            The context of an executing command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CommandContext.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the CommandContext class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.CommandContext.Document">
            <summary>
            Gets the document this command will operate on.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.AnchorPattern">
            <summary>
            Represents a set of anchor points, which specify the
            exact locations where links are allowed to connect to nodes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPattern.#ctor">
            <summary>
            Intializes a new empty instance of the AnchorPattern class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPattern.#ctor(System.String)">
            <summary>
            Intializes a new empty instance of the AnchorPattern class.
            </summary>
            <param name="id">
            An unique identifier for this anchor pattern.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPattern.#ctor(MindFusion.Diagramming.Wpf.AnchorPoint[])">
            <summary>
            Intializes a new instance of the AnchorPattern class with
            the specified anchor points.
            </summary>
            <param name="points">
            Contains the initial set of AnchorPoint instances for the new pattern.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPattern.#ctor(MindFusion.Diagramming.Wpf.AnchorPoint[],System.String)">
            <summary>
            Intializes a new instance of the AnchorPattern class with
            the specified anchor points.
            </summary>
            <param name="points">
            Contains the initial set of AnchorPoint instances for the new pattern.
            </param>
            <param name="id">
            An unique identifier for this anchor pattern.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPattern.#ctor(MindFusion.Diagramming.Wpf.AnchorPointCollection)">
            <summary>
            Intializes a new instance of the AnchorPattern class with
            the specified anchor points.
            </summary>
            <param name="points">
            A collection of AnchorPoint objects.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPattern.#ctor(MindFusion.Diagramming.Wpf.AnchorPointCollection,System.String)">
            <summary>
            Intializes a new instance of the AnchorPattern class with
            the specified anchor points.
            </summary>
            <param name="points">
            A collection of AnchorPoint objects.
            </param>
            <param name="id">
            An unique identifier for this anchor pattern.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPattern.#ctor(System.Int32,MindFusion.Diagramming.Wpf.AnchorPointCollection,System.String)">
            <summary>
            Intializes a new instance of the AnchorPattern class with
            the specified id and anchor points.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPattern.FromId(System.String)">
            <summary>
            Returns a reference to the anchor pattern with the specified
            string identifier.
            </summary>
            <param name="id">
            A string identifying an AnchorPattern instance.
            </param>
            <returns>
            The AnchorPattern object whose Id is equal to the id parameter,
            or null (Nothing in Visual Basic) if no such object exists.
            </returns>
            <remarks>
            The id argument should match an identifier passed to the constructor
            of an existing AnchorPattern object.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPattern.Register(MindFusion.Diagramming.Wpf.AnchorPattern)">
            <summary>
            Registers the specified anchor pattern as shared.
            </summary>
            <param name="pattern">
            The AnchorPattern to register.
            </param>
            <remarks>
            This method is obsolete. Please use the Id property to create
            shared anchor patterns.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPattern.GetRegisteredPattern(System.Int32)">
            <summary>
            Returns a previously registered anchor pattern given its index.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPattern.Clone">
            <summary>
            Creates an exact clone of this AnchorPattern object.
            </summary>
            <returns>
            An instance of the AnchorPattern class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPattern.AllowLinkDirection(System.Boolean,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Checks whether the anchor pattern when applied to the specified
            node would allow links having the specified direction.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPattern.AssignId(System.String)">
            <summary>
            Assigns the specified id to the pattern if the id is not
            used yet and the pattern does not have an id.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPattern.Apply(MindFusion.Diagramming.Wpf.AnchorPattern)">
            <summary>
            Applies the specified anchor pattern to this pattern,
            making them identical.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPattern.GetRegIndex">
            <summary>
            Gets the index with which the anchor pattern was registered.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPattern.SetPatternId(System.String)">
            <summary>
            Set the unique AnchorPattern string identifier and store
            it in the internal dictionary that maps ids to patterns.
            </summary>
            <param name="id">The AnchorPattern id.</param>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AnchorPattern.decision2In2Out">
            <summary>
            A preregistered anchor pattern.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AnchorPattern.decision1In3Out">
            <summary>
            A preregistered anchor pattern.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AnchorPattern.leftInRightOut">
            <summary>
            A preregistered anchor pattern.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AnchorPattern.topInBottomOut">
            <summary>
            A preregistered anchor pattern.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPattern.Decision2In2Out">
            <summary>
            Gets the predefined anchor pattern Decision2In2Out.
            </summary>
            <remarks>
            Incoming links can connect with the top and left vertices;
            outgoing links can start from the right and bottom vertices.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPattern.Decision1In3Out">
            <summary>
            Gets the predefined anchor pattern Decision1In3Out.
            </summary>
            <remarks>
            Incoming links connect to the top vertex; outgoing links can start
            from the other vertices.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPattern.LeftInRightOut">
            <summary>
            Gets the predefined anchor pattern LeftInRightOut.
            </summary>
            <remarks>
            The middle point of a node's bounding rectangle left side is anchor
            for incoming links; that on the right side - for outgoing.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPattern.TopInBottomOut">
            <summary>
            Gets the predefined anchor pattern TopInBottomOut.
            </summary>
            <remarks>
            The middle point of a node's bounding rectangle top side is anchor
            for incoming links; that on the bottom - for outgoing.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPattern.RegisteredPatterns">
            <summary>
            Gets a list with all registered patterns mapped to their ids.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPattern.Points">
            <summary>
            Gets a collection of the anchor points in this pattern.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPattern.Id">
            <summary>
            Gets the AnchorPattern unique identifier.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPattern.IsRegistered">
            <summary>
            Gets a flag indicating whether the pattern has been registered.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.AddToContainerCmd">
            <summary>
            Undoable command that implements an addition of a node to a container.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.Command">
            <summary>
            Represent an action that can be carried out on a diagram,
            and later undone or redone.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.Command.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Command class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.Command.Execute(System.Boolean)">
            <summary>
            Carries out an action, usually changing the diagram in some way.
            </summary>
            <param name="undoEnabled">
            Specifies whether undo/redo is enabled. If undo is disabled,
            the command won't be saved in undo history and will never be
            called to undo or redo itself. In such case you might choose
            to skip some housekeeping operations such as saving state
            variables for later undo/redo.
            </param>
            <remarks>
            Implement your action's logic here. You must not execute
            commands by calling this method - instead pass them to
            diagram's ExecuteCommand. ExecuteCommand calls Execute and
            if UndoEnabled is set to true, adds the command to the undo
            manager's history.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.Command.Undo">
            <summary>
            Undoes an action, restoring the diagram to the state it was
            in before carrying out the action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.Command.Redo">
            <summary>
            Repeats an action that has been undone.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.Command.AddSubCmd(MindFusion.Diagramming.Wpf.Commands.Command)">
            <summary>
            Adds an action to a composite command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.Command.FreeUndoResources">
            <summary>
            Called to free the undo data when the command is removed from
            the undo/redo history.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.Command.FreeRedoResources">
            <summary>
            Called to free the redo data when the command is removed from
            the undo/redo history.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.Command.GetItem">
            <summary>
            Gets the diagram item associated with the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.Command.IsContainerOf(MindFusion.Diagramming.Wpf.Commands.Command)">
            <summary>
            Determines whether a command has been initiated by this command
            and should be treated as a derivative.
            </summary>
            <param name="command">
            The Command for which to determine whether it is a derivative.
            </param>
            <returns>
            true if the specified command should be considered a derivative;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.Command.Adopt(MindFusion.Diagramming.Wpf.Commands.Command)">
            <summary>
            Merges adjacent commands in the history queue if they are related.
            </summary>
            <param name="command">
            The Command that might be adopted by this command.
            </param>
            <returns>
            true if the specified command has been adopted; otherwise, false.
            </returns>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Commands.Command.title">
            <summary>
            Might use this title in Undo/Redo menu item labels e.g.
            if title == 'Create' -> 'Undo Create' or 'Redo Create'.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.Command.Title">
            <summary>
            Gets or sets the text associated with the action.
            </summary>
            <remarks>
            This text can be used to indicate to users what exactly
            will be undone or redone.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.Command.Context">
            <summary>
            Gets the command's context.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.Command.SubCommands">
            <summary>
            Gets a collection of all command objects contained
            within the composite one.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.AddToContainerCmd.#ctor(MindFusion.Diagramming.Wpf.ContainerNode,MindFusion.Diagramming.Wpf.DiagramNodeCollection,System.Boolean)">
            <summary>
            Intializes a new instance of the AddToContainerCmd class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.AddToContainerCmd.Execute">
            <summary>
            Executes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.AddToContainerCmd.Execute(System.Boolean)">
            <summary>
            Carries out the command action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.AddToContainerCmd.Undo">
            <summary>
            Undoes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.AddToContainerCmd.Redo">
            <summary>
            Redoes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.AddToContainerCmd.IsContainerOf(MindFusion.Diagramming.Wpf.Commands.Command)">
            <summary>
            Determines whether a command has been initiated by this command and should
            be treated as a derivative.
            </summary>
            <param name="command">
            The Command for which to determine whether it is a derivative.
            </param>
            <returns>
            true if the specified command should be considered a derivative;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.AddToContainerCmd.Adopt(MindFusion.Diagramming.Wpf.Commands.Command)">
            <summary>
            Merges adjacent commands in the history queue if they are related.
            </summary>
            <param name="command">
            The Command that might be adopted by this command.
            </param>
            <returns>
            true if the specified command has been adopted; otherwise, false.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.AddToContainerCmd.Container">
            <summary>
            Gets the container node associated with the command.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.AddToContainerCmd.Nodes">
            <summary>
            Gets the item associated with the command.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Xml.XmlReader">
            <summary>
            Reads a pre-5.0 diagrams within a WpfDiagram 5.0 Diagram.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Xml.XmlReader.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the XmlReader class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Xml.XmlReader.ReadFromString(System.String)">
            <summary>
            Reads the diagram contents from a string created through
            the WriteString method of a pre-5.0 XmlWriter.
            </summary>
            <param name="diagram">
            A string containing the diagram XML markup.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Xml.XmlReader.Read(System.IO.Stream)">
            <summary>
            Deserializes a diagram from the specified stream.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Xml.XmlReader.Read(System.String)">
            <summary>
            Deserializes a diagram from the specified file.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Xml.XmlReader.Read(System.Xml.XmlReader)">
            <summary>
            Deserializes a diagram from the specified System.Xml.XmlReader.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Xml.XmlReader.ReadMandatory(System.Xml.XmlReader,System.Xml.XmlNodeType,System.String)">
            <summary>
            Reads the next element from the specified reader
            and throws an exception if the element does not conform
            to the specified type.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Xml.XmlReader.ReadMandatory(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            Reads the next element from the specified reader
            and throws an exception if the element does not have
            the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Xml.XmlReader.ReadFontElement(System.Xml.XmlReader)">
            <summary>
            Reads a font from the specified reader.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Xml.XmlReader.ReadFloatArrayElement(System.Xml.XmlReader)">
            <summary>
            Reads a double array from the specified reader.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Xml.XmlReader.ReadColorArrayElement(System.Xml.XmlReader)">
            <summary>
            Reads a color array from the specified reader.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Xml.XmlReader.ReadPenElement(System.Xml.XmlReader,System.Collections.SortedList)">
            <summary>
            Reads a pen from the specified reader.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Xml.XmlReader.ReadAnchorPatternCore(System.Xml.XmlReader)">
            <summary>
            Reads an anchor pattern from the specified reader,
            ignoring version-dependent constructs.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Xml.XmlReader.ReadAnchorPatternElement(System.Xml.XmlReader)">
            <summary>
            Reads an anchor pattern from the specified reader.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Xml.XmlReader.ReadNodeConstraints(System.Xml.XmlReader,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Reades the constraints of the specified node from the
            specified reader.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Xml.XmlReader.GetPropertyName(System.String,System.Type)">
            <summary>
            Gets the real name of the specified property
            for an object of the specified type.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Xml.XmlReader.ReadProperties(System.Xml.XmlReader,System.Object,System.Int32)">
            <summary>
            Reades the properties of the specified component
            from the specified reader.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TableStructure">
            <summary>
            Encapsulates structure information for a Table object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableStructure.#ctor">
            <summary>
            Initializes a new instance of the TableStructure class.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ShapeNode">
            <summary>
            ShapeNode instances are diagram nodes that represent geometric shapes.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DiagramNode">
            <summary>
            Represents a diagram node.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DiagramItem">
            <summary>
            Represents an item in the diagram document. All classes representing
            diagram elements derive from DiagramItem.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ITextAttributes">
            <summary>
            Defines attributes of text content displayed by diagram items.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ITextAttributes.TextPadding">
            <summary>
            Gets or sets the thickness of padding space between the item boundaries and its text.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ITextAttributes.FontFamily">
            <summary>
            Gets or sets the preferred font family for this DiagramItem. 
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ITextAttributes.FontSize">
            <summary>
            Gets or sets the font size for this DiagramItem.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ITextAttributes.FontStyle">
            <summary>
            Gets or sets the font style for this DiagramItem.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ITextAttributes.FontWeight">
            <summary>
            Gets or sets the font weight for this DiagramItem.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ITextAttributes.FontStretch">
            <summary>
            Gets or sets the font-stretching characteristics for this DiagramItem.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ITextAttributes.TextDecorations">
            <summary>
            Gets or sets the effects to apply to the text of this DiagramItem.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ITextAttributes.TextAlignment">
            <summary>
            Gets or sets a value that indicates the horizontal alignment of text content.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ITextAttributes.TextVerticalAlignment">
            <summary>
            Gets or sets a value that indicates the vertical alignment of text content.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ITextAttributes.TextTrimming">
            <summary>
            Gets or sets the text trimming to employ when text overflows the item area.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ITextAttributes.TextWrapping">
            <summary>
            Gets or sets how this DiagramItem should wrap text.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ITextAttributes.TextBrush">
            <summary>
            Gets or sets the brush used to draw the item's text.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.#ctor">
            <summary>
            Initializes a new instance of the DiagramItem class.
            </summary>
            <remarks>
            This constructor sets the DiagramItem properties to their default values.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the DiagramItem class with default
            values supplied form the specified Diagram.
            </summary>
            <param name="parent">
            The Diagram from which to obtain default values for the item properties.
            </param>
            <remarks>
            This constructor initializes the DiagramItem properties with
            the values specified in the respective default-value properties
            of the Diagram object.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.#ctor(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Initializes a new instance of the DiagramItem class using the
            specified diagram item as a prototype.
            </summary>
            <param name="prototype">
            The item to use as a prototype. The properties of the new item
            are initialized from the property values of this item.
            </param>
            <remarks>
            This constructor copies the DiagramItem property values from
            the specified prototype item.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.ClearStyleableProperties">
            <summary>
            Clears the local values of all styleable appearance properties.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.Clone(System.Boolean)">
            <summary>
            Creates a copy of this item.
            </summary>
            <param name="clipboard">
            true if the copy will be stored in the Windows clipboard; otherwise, false.
            </param>
            <returns>
            The copy of this item.
            </returns>
            <remarks>
            The default implementation of this item invokes the item's class
            copy constructor through reflection. If your custom type does not
            provide a copy constructor, you must implement this method to provide
            for clipboard operations support.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.OnAdd">
            <summary>
            Called when the item is added to a Diagram, either by the user,
            programmatically or via undo / redo.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.OnLoad">
            <summary>
            Called after successful deserialization.
            </summary>
            <remarks>
            Override this method if you need to update the state of items
            after successfully loading a diagram.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.OnRemove">
            <summary>
            Called when an item is removed from a Diagram, either by
            the user, programmatically or via undo / redo.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.FreeResources">
            <summary>
            Called when the item is completely disassociated from a Diagram,
            that is, when it is no longer referenced from an item collection
            or the undo/redo history.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.Dispose">
            <summary>
            Disposes the resources managed by this item.
            </summary>
            <remarks>
            This method is used in the implementation of the IDisposable pattern.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.Dispose(System.Boolean)">
            <summary>
            Disposes any disposable resources managed by this item.
            </summary>
            <param name="disposing">
            Specifies whether the method is called explicitly
            or from the garbage collector.
            </param>
            <remarks>
            This method is used in the implementation of the IDisposable pattern.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the item content into an XML element.
            </summary>
            <param name="xmlElement">
            An XmlElement the item's data should be stored into.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information
            about the serialization process and some helper serialization methods.
            </param>
            <remarks>
            This method is invoked when an item is being serialized into an
            XML-format diagram file.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Loads the item content from an XML element.
            </summary>
            <param name="xmlElement">
            An XmlElement containing the item's data.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information about
            the serialization process and some helper serialization methods.
            </param>
            <remarks>
            This method is invoked when an item is being deserialized from a
            diagram file saved in XML format.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.CreateState">
            <summary>
            Creates an item state corresponding to the
            type of this diagram item.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.SaveState(MindFusion.Diagramming.Wpf.DiagramItemState)">
            <summary>
            Saves the state of this diagram item.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.RestoreState(MindFusion.Diagramming.Wpf.DiagramItemState)">
            <summary>
            Restores the state of this diagram item.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.CreateProperties">
            <summary>
            Creates an item property set corresponding to the type of
            this diagram item.
            </summary>
            <returns>
            A DiagramItemProperties-derived object containing a snapshot
            of the item's properties.
            </returns>
            <remarks>
            This method is invoked by the undo/redo subsystem when creating
            a ChangeItemCmd instance.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.SaveProperties(MindFusion.Diagramming.Wpf.DiagramItemProperties)">
            <summary>
            Saves the properties of this diagram item.
            </summary>
            <param name="props">
            A DiagramItemProperties-derived object where the item's properties
            should be saved.
            </param>
            <remarks>
            This method is invoked by the undo/redo subsystem when saving a
            ChangeItemCmd instance.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.RestoreProperties(MindFusion.Diagramming.Wpf.DiagramItemProperties)">
            <summary>
            Restores the properties of this diagram item.
            </summary>
            <param name="props">
            A DiagramItemProperties -derived object containing a
            snapshot of the item's properties.
            </param>
            <remarks>
            This method is invoked by the undo/redo subsystem when
            undoing or redoing a ChangeItemCmd instance.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.StartCreate(System.Windows.Point)">
            <summary>
            Invoked once when the user starts creating a new item interactively.
            </summary>
            <param name="org">
            Position of the mouse pointer.
            </param>
            <remarks>
            This method is invoked in response to the MouseDown event, just after
            an item has been instantiated.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.UpdateCreate(System.Windows.Point)">
            <summary>
            Invoked during interactive creation of this item.
            </summary>
            <param name="current">
            Position of the mouse pointer.
            </param>
            <remarks>
            This methods is invoked after each mouse movement in order to update
            the item's state in accordance with the new mouse position.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.CompleteCreate(System.Windows.Point)">
            <summary>
            Invoked when the item creation has been completed.
            </summary>
            <param name="end">
            The mouse pointer position.
            </param>
            <remarks>
            This method is invoked when the user releases the mouse button while drawing a new item.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.CompleteCreate">
            <summary>
            Invoked when the object creation has been completed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.AllowCreate(System.Windows.Point,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Invoked during interactive creation of items to test whether
            the operation can be completed in the current context.
            </summary>
            <param name="current">
            The current mouse pointer position.
            </param>
            <param name="ist">
            An InteractionState object containing more information about
            the current state of the operation.
            </param>
            <returns>
            true to allow the creation of this item; otherwise, false.
            </returns>
            <remarks>
            This method is invoked after each mouse movement in order to
            update the mouse pointer icon, so do not perform any time-consuming
            operations in its implementation.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.SetOwned(System.Boolean)">
            <summary>
            Modifies the constructed state of an object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.StartModify(System.Windows.Point,System.Int32,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Invoked when the user starts modifying this item interactively.
            </summary>
            <param name="org">
            Position of the mouse pointer.
            </param>
            <param name="handle">
            Index of the adjustment handle used to modify the item.
            </param>
            <param name="ist">
            An InteractionState object containing more information about the
            current state of the operation.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.UpdateModify(System.Windows.Point,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Invoked during interactive modification of this item.
            </summary>
            <param name="current">
            Position of the mouse pointer.
            </param>
            <param name="ist">
            An InteractionState object containing more information about
            the current state of the operation.
            </param>
            <remarks>
            This methods is invoked after each mouse movement in order to
            update the item's state in accordance with the new mouse position.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.ModifyTranslate(System.Double,System.Double,System.Boolean)">
            <summary>
            Translates the object during a modification with the specified values.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.CompleteModify(System.Windows.Point,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Invoked when the item modification has been completed.
            </summary>
            <param name="end">
            The mouse pointer position.
            </param>
            <param name="ist">
            An InteractionState object containing more information about the current
            state of the operation.
            </param>
            <remarks>
            This method is invoked when the user releases the mouse button while
            modifying an item.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.CompleteModify(System.Boolean)">
            <summary>
            Invoked when the object modification has been completed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.AllowModify(System.Windows.Point,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Invoked during interactive modification of items to test
            whether the operation can be completed in the current context.
            </summary>
            <param name="current">
            The current mouse pointer position.
            </param>
            <param name="ist">
            An InteractionState object containing more information about
            the current state of the operation.
            </param>
            <returns>
            true to allow the modification of this item; otherwise, false.
            </returns>
            <remarks>
            This method is invoked after each mouse movement in order to
            update the mouse pointer icon, so do not perform any time-consuming
            operations in its implementation.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.CanModify(System.Int32)">
            <summary>
            Invoked to test whether the object can be modified
            through the specified handle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.CancelModify(MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Invoked when the interactive modification of this
            object has been canceled.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.NowModifying">
            <summary>
            Gets a flag indicating whether this object is being
            currently modified interactively by the user.
            </summary>
            <returns>
            true is the item is being modified; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            UIElement.OnRender override.
            </summary>
            <param name="drawingContext">
            The drawing instructions for a specific element.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            UIElement.OnMouseDown override.
            </summary>
            <param name="e">
            The System.Windows.Input.MouseButtonEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            UIElement.OnMouseUp override.
            </summary>
            <param name="e">
            The System.Windows.Input.MouseButtonEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            UIElement.OnPreviewMouseWheel override.
            </summary>
            <param name="e">
            The System.Windows.Input.MouseButtonEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            UIElement.OnPreviewMouseUp override.
            </summary>
            <param name="e">
            The System.Windows.Input.MouseButtonEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.MeasureOverride(System.Windows.Size)">
            <summary>
            FrameworkElement.MeasureOverride override.
            </summary>
            <param name="availableSize">
            The available size that the parent element can allocate for the child.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.ItemToDiagramMatrix(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
             <summary>
            Creates a matrix m that maps current bounds to specified new bounds
             </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.TransformDiagramToItem(System.Windows.Point)">
            <summary>
            Transforms a point in document coordinates to item coordinates.
            This method should be used instead Visual.TransformToDescendant because
            it works correctly when the item is not yet Arrange()d.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.TransformDistanceToItem(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates the distance between point in diagram coordinates to item units 
            </summary>
            <param name="diagramPoint1"></param>
            <param name="diagramPoint2"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.ScalePercentToSize">
            <summary>
            Return a scale transform that transforms points from shape percent units
            to diagram units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.TransformItemToDiagram(System.Windows.Point)">
            <summary>
            Transforms point from item-relative coordinates to document coordinates.
            For links this does not have effect as they are defined in document coordinates.
            </summary>
            <param name="itemPoint"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.Draw(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.RenderOptions)">
            <summary>
            Draws the item on the specified DrawingContext object.
            </summary>
            <param name="graphics">
            A DrawingContext object where the item should be rendered.
            </param>
            <param name="options">
            Provides options for the drawing operation.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.ShouldRender">
            <summary>
            Determines whether the item should be rendered in the current context.
            </summary>
            <returns>
            true to draw the item; otherwise, false,
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.DrawHandles(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.HandlesVisualStyle)">
            <summary>
            Renders the selection handles.
            </summary>
            <param name="graphics">
            The DrawingContext surface to draw the handles on.
            </param>
            <param name="style">
            The style that should be used to render the handles.
            </param>
            <remarks>
            This method is invoked when the item's adjustment handles must be rendered.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.DrawMark(MindFusion.Diagramming.Wpf.DrawAnchorPointEventArgs)">
            <summary>
            Draws the anchor points of the current object when the
            mark style is set to Custom.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.GetRepaintRect(System.Boolean)">
            <summary>
            Gets the repaint region for this item, taking into account
            factors such as pen, selection handles and shadow.
            </summary>
            <param name="includeConnected">
            true is related items should be considered too; otherwise, false.
            </param>
            <returns>
            A rectangular region that should be repainted when this item is modified.
            </returns>
            <remarks>
            This method is invoked when an item is modified by the user, or when
            an appearance property of the item changes. The returned region is
            invalidated and redrawn at the next paint operation.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.OnMeasureUnitChanged">
            <summary>
            Called when the diagram's MeasureUnit changes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.OnSizeChanged">
            <summary>
            Called when the size of the item changes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.OnBoundsChanged(System.Windows.Rect)">
            <summary>
            Called when either size or position is set, but called fewer times if both are set
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.OnPositioningChanged">
            <summary>
            Called when the item's position changes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.OnZoomChanged">
            <summary>
            Called when the WpfDiagram's ZoomFactor changes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.GetBounds">
            <summary>
            Gets the bounding rectangle of this item.
            </summary>
            <returns>
            The rectangle that bounds this item.
            </returns>
            <remarks>
            The Bounds property getter returns the result of this method.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.GetRotatedBounds">
            <summary>
            Gets the bounding rectangle of this item when it is rotated.
            </summary>
            <returns>
            A rectangle that bounds the rotated shape of the item.
            </returns>
            <remarks>
            This method is invoked during hit-testing to do a quick test
            whether a point is within the item's bounds, before calling
            the possibly more time-consuming ContainsPoint method.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.ContainsPoint(System.Windows.Point)">
            <summary>
            Determines whether this item contains the specified point.
            </summary>
            <param name="point">
            The point to check.
            </param>
            <returns>
            true it this item contains the specified point; otherwise, false.
            </returns>
            <remarks>
            This method is used during hit-testing to see if the mouse is
            inside the item.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.Intersects(System.Windows.Rect)">
            <summary>
            Checks whether the specified specified rectangle intersects with
            this object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.HitTestHandle(System.Windows.Point,System.Int32@)">
            <summary>
            Determines whether a selection handle of this item is
            located at the specified point.
            </summary>
            <param name="pt">
            A Point value specifying where to look for a selection handle.
            </param>
            <param name="handle">
            A reference to an integer variable, which receives the index of
            the found selection handle.
            </param>
            <returns>
            true if there is a selection handle at the specified location;
            otherwise, false.
            </returns>
            <remarks>
            You might use this method when implementing custom hit-testing
            by handling the HitTestAdjustmentHandles event for nodes whose
            HandlesStyle is set to Custom.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.GetHandleIdx(System.Windows.Point)">
            <summary>
            Returns the index of the selection handle located at the
            specified point. The point is expressed in document coordinates.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.GetRegion">
            <summary>
            Returns a graphical region representing the shape of the
            current object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.GetCannotDropCursor">
            <summary>
            Gets the cursor which should be displayed when
            an interactive operation cannot be performed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.GetCanDropCursor">
            <summary>
            Gets the cursor which should be displayed when
            an interactive operation can be performed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.SetGroup(MindFusion.Diagramming.Wpf.Group)">
            <summary>
            Sets the subordinate group of this object if it has
            not been already set.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.HasAttachedGroup">
            <summary>
            Checks whether this object has a subordinate group.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.OnChildModified(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.AdjustmentHandles)">
            <summary>
            Called when a group child node has been modified.
            </summary>
            <param name="node">
            The node that has been modified.
            </param>
            <param name="handle">
            The adjustment handle used to modify the node.
            </param>
            <remarks>
            Override this method if you need to know when a node from
            the SubordinateGroup is modified.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.GetMasterGroup">
            <summary>
            For compatibility with older serialization formats.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.ZLevelUp">
            <summary>
            Moves the item one level up in the z-order.
            </summary>
            <remarks>
            Call the method to change the item's position in z-order with one level up.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.ZLevelDown">
            <summary>
            Moves the item one level down in the z-order.
            </summary>
            <remarks>
            Call the method to change the item's position in z-order with
            one level down.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.ZTop">
            <summary>
            Moves the item to the top of the z-order.
            </summary>
            <remarks>
            Call the method to move the item to the top of the z-order.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.ZBottom">
            <summary>
            Moves the item to the bottom of the z-order.
            </summary>
            <remarks>
            Call the method to move the item to the bottom of the z-order.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.OnChangeZ">
            <summary>
            Invoked when the Z-index of this object has been changed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.UpdateZIndex(System.Int32)">
            <summary>
            Sets the Z-index of this object to the specified value.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.AddManipulator(MindFusion.Diagramming.Wpf.Manipulator)">
            <summary>
            Adds the specified manipulator to this object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.RemoveManipulator(MindFusion.Diagramming.Wpf.Manipulator)">
            <summary>
            Removes the specified manipulator from the object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.DrawManipulators(System.Windows.Media.DrawingContext,System.Boolean)">
            <summary>
            Draws the associated manipulators in the specified context.
            </summary>
            <param name="graphics">
            The DrawingContext object to draw the manipulators on.
            </param>
            <param name="clip">
            true to render only inside the item's bounds; otherwise, false.
            </param>
            <remarks>
            This method is invoked to render the item's manipulators,
            for example, collapse/expand buttons, scrollbars, and so on.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.ManipulatorEnacted(System.Windows.Point)">
            <summary>
            Triggers the manipulator located at the specified point.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.AddIntrRepaintRect(System.Windows.Rect@)">
            <summary>
            Updates the specified rectangle with the repaint
            rectangles of all associated manipulators.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.PtInManipulator(System.Windows.Point)">
            <summary>
            Tests whether the specified point is contained within
            one of the associated manipulators.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.IsExpanded">
            <summary>
            Gets a value indicated whether the object is 'expanded'.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.SetExpanded(System.Boolean)">
            <summary>
            Sets whether the item is in expanded or collapsed state.
            </summary>
            <param name="e">
            Specifies the new state of the item.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.Expand(System.Boolean)">
            <summary>
            Expands the object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.Collapse(System.Boolean)">
            <summary>
            Collapses the object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.Query(System.String)">
            <summary>
            Returns the items that can be reached from this item by following
            the path specified in the given query expression.
            </summary>
            <param name="query">A query expression consisting of selectors and boolean predicates.</param>
            <returns>A collection of the found items.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.SetParent(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Changes the parent of this item.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.RectFromPoints">
            <summary>
            Updates the bounding rectangle of this object
            from its origin and destination points.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.NotInteractive">
            <summary>
            Gets whether the user is prevented from manipulating this item.
            </summary>
            <returns>
            true to prevent user interaction with this item; otherwise, false.
            </returns>
            <remarks>
            The default implementation prevents manipulation of invisible or
            locked items.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.SetSelected(System.Boolean)">
            <summary>
            Changes the selected state of this object.
            </summary>
            <remarks>
            This method is called internally by the selection
            object to effectively change the selection state
            of this item. The Selected property indirectly uses
            this method.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.GetSelected">
            <summary>
            Gets a value indicating whether this item is selection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.GetToolTip(System.Windows.Point,System.Boolean)">
            <summary>
            Gets the tooltip that should be displayed for this item
            at the specified point.
            </summary>
            <param name="point">
            The mouse pointer position.
            </param>
            <param name="isDiagramCoordinate">
            true if the point is specified in logical diagram coordinates;
            false if the point is specified in WPF points.
            </param>
            <returns>
            An object specifying the tooltip contents.
            </returns>
            <remarks>
            You can override this method to return different tooltips for
            different regions of the item.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.SetData(MindFusion.Diagramming.Wpf.RuntimeDataKey,System.Object)">
            <summary>
            Associates a data chunk with this diagram item,
            related to the specified key.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.GetData(MindFusion.Diagramming.Wpf.RuntimeDataKey)">
            <summary>
            Gets the data chunk associated with the specified key.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.FreeData(MindFusion.Diagramming.Wpf.RuntimeDataKey)">
            <summary>
            Releases the data chunk associated with the specified key.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.GetOutlinePoly">
            <summary>
            Gets a polygon approximating the outline of this object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.GetOutlinePath">
            <summary>
            Like GetOutlinePoly, but returns PathFigure
            </summary>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.SetDiagramDirty">
            <summary>
            Marks the diagram as changed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.Repaint">
            <summary>
            Repaints the region of the diagram where this item is located.
            </summary>
            <remarks>
            Call this method to repaint the diagram after changing appearance
            attributes of this item.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.Repaint(System.Boolean)">
            <summary>
            Repaints the specified region of the diagram.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.OppositeHandle(MindFusion.Diagramming.Wpf.AdjustmentHandles)">
            <summary>
            Returns the opposite handle according to center (move) handle
            Works correct only for single handle
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.TextBrushProperty">
            <summary>
            Identifies the TextBrush dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.TextProperty">
            <summary>
            Identifies the Text dependency property.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.OnTextAttributeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when any of the attributes defined in ITextAttributes changes.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.TextPaddingProperty">
            <summary>
            Identifies the TextPadding dependency property.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.GetTextRect(System.Windows.Rect)">
            <summary>
            Subtracts the TextPadding values from the specified rectangle.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.FontFamilyProperty">
            <summary>
            Identifies the FontFamily dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.FontSizeProperty">
            <summary>
            Identifies the FontSize dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.FontStyleProperty">
            <summary>
            Identifies the FontStyle dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.FontWeightProperty">
            <summary>
            Identifies the FontWeight dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.FontStretchProperty">
            <summary>
            Identifies the FontStretch dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.TextDecorationsProperty">
            <summary>
            Identifies the TextDecorations dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.TextAlignmentProperty">
            <summary>
            Identifies the TextAlignment dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.TextVerticalAlignmentProperty">
            <summary>
            Identifies the TextVerticalAlignment dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.TextTrimmingProperty">
            <summary>
            Identifies the TextTrimming dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.TextWrappingProperty">
            <summary>
            Identifies the TextWrapping dependency property.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.OnStrokeAttributeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when any of the item's stroke attributes changes.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.StrokeProperty">
            <summary>
            Identifies the Stroke dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.StrokeMiterLimitProperty">
            <summary>
            Identifies the StrokeMiterLimit dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.StrokeThicknessProperty">
            <summary>
            Identifies the StrokeThickness dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.StrokeStartLineCapProperty">
            <summary>
            Identifies the StrokeStartLineCap dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.StrokeEndLineCapProperty">
            <summary>
            Identifies the StrokeEndLineCap dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.StrokeLineJoinProperty">
            <summary>
            Identifies the StrokeLineJoin dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.StrokeDashCapProperty">
            <summary>
            Identifies the StrokeDashCap dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.StrokeDashStyleProperty">
            <summary>
            Identifies the StrokeDashStyle dependency property.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.OnSerializablePropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when a FrameworkElement property serializable by DiagramItem changes.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.BrushProperty">
            <summary>
            Identifies the Brush dependency property.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.GetX">
            <summary>
            Gets or sets the x-coordinate of the current position of this item.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.GetY">
            <summary>
            Gets or sets the y-coordinate of the current position of this item.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.GetWidth">
            <summary>
            Gets or sets the width of this item.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItem.GetHeight">
            <summary>
            Gets or sets the height of this item.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramItem.disposed">
            <summary>
            For internal use.
            </summary>
            <remarks>
            This field is used in the implementation of the IDisposable pattern.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.MeasureUnit">
            <summary>
            Returns the diagram measure unit.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.TextBrush">
            <summary>
            Gets or sets the brush used to draw the item's text.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.Text">
            <summary>
            Gets or sets the text displayed inside this item.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.TextPadding">
            <summary>
            Gets or sets the thickness of padding space between the item boundaries and its text.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.FontFamily">
            <summary>
            Gets or sets the preferred font family for this DiagramItem. 
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.FontSize">
            <summary>
            Gets or sets the font size for this DiagramItem.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.FontStyle">
            <summary>
            Gets or sets the font style for this DiagramItem.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.FontWeight">
            <summary>
            Gets or sets the font weight for this DiagramItem.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.FontStretch">
            <summary>
            Gets or sets the font-stretching characteristics for this DiagramItem.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.TextDecorations">
            <summary>
            Gets or sets the effects to apply to the text of this DiagramItem.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.TextAlignment">
            <summary>
            Gets or sets a value that indicates the horizontal alignment of text content.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.TextVerticalAlignment">
            <summary>
            Gets or sets a value that indicates the vertical alignment of text content.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.TextTrimming">
            <summary>
            Gets or sets the text trimming to employ when text overflows the item area.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.TextWrapping">
            <summary>
            Gets or sets how this DiagramItem should wrap text.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.Stroke">
            <summary>
            Gets or sets the Brush that specifies how the item outline is painted.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.StrokeMiterLimit">
            <summary>
            Gets or sets a limit on the ratio of the miter length
            to half the StrokeThickness of an item outline element.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.StrokeThickness">
            <summary>
            Gets or sets the width of the DiagramItem stroke outline.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.StrokeStartLineCap">
            <summary>
            Gets or sets a PenLineCap enumeration value that specifies
            what shape to draw at the start of a Stroke.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.StrokeEndLineCap">
            <summary>
            Gets or sets a PenLineCap enumeration value that specifies
            what shape to draw at the end of a Stroke.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.StrokeLineJoin">
            <summary>
            Gets or sets a PenLineJoin enumeration value that specifies
            the type of join that is used at the vertices of the item's outline.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.StrokeDashCap">
            <summary>
            Gets or sets a PenLineCap enumeration value that specifies how the ends of a dash are drawn.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.StrokeDashStyle">
            <summary>
            Gets or sets the pattern of dashes and gaps used to outline items.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.Parent">
            <summary>
            Gets the diagram that contains this item.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.Font">
            <summary>
            Gets or sets the font used to render the item's text.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.Pen">
            <summary>
            Gets or sets the pen used to paint the frame of the item.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.Brush">
            <summary>
            Gets or sets the brush used to fill the interior of this item.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.Locked">
            <summary>
            Gets or sets a value indicating whether users are allowed to
            edit the diagram item.
            </summary>
            <remarks>
            A locked item cannot be selected, moved or resized interactively.
            Additionaly, its text cannot be edited in-place.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.Selected">
            <summary>
            Gets or sets a value indicating whether a diagram item is selected.
            </summary>
            <remarks>
            Use the property to check which items are selected by the user, or to
            programmatically select items if needed.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.ZIndex">
            <summary>
            Gets or sets the z-order position of the object.
            </summary>
            <remarks>
            Use the property to arrange item in z-order. Items with
            lower ZIndex appear behind items with higher ZIndex.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.SubordinateGroup">
            <summary>
            Gets a reference to the group of items that are attached to this one.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.Visible">
            <summary>
            Gets or sets a value indicating whether this item is visible.
            </summary>
            <remarks>
            Invisible items are not drawn at all.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.Printable">
            <summary>
            Gets or sets a value indicating whether to print the item.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.IgnoreLayout">
            <summary>
            Gets or sets a value indicating whether the position of this
            item should not be changed by automatic layout methods.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.LayoutTraits">
            <summary>
            Contains properties specific to each layout algorithm.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.Weight">
            <summary>
            Gets or sets a weight value used in layout and path-finding algorithms.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.HyperLink">
            <summary>
            Gets or sets the hyperlink associated with this diagram item.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.IsOwned">
            <summary>
            Gets a flag indicating whether the object is constructed.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.Standalone">
            <summary>
            True is the item is not yet a part of a diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.Size">
            <summary>
            Gets the size of this item.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.UIElement">
            <summary>
            Gets the UIElement associated with this DiagramItem.
            </summary>
            <remarks>
            When non DiagramItem objects are added to Diagram.Items, an
            additional DiagramItem is created and its UIElement property
            returns the non DiagramItem object. DiagramItem objects return
            themselves.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItem.Adorner">
            <summary>
            A Visual that contains the item's adjustment handles.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.#ctor">
            <summary>
            Initializes a new instance of the DiagramNode class.
            </summary>
            <remarks>
            This constructor sets the DiagramNode properties to their default values.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the DiagramNode class with default
            values supplied form the specified Diagram.
            </summary>
            <param name="parent">
            The Diagram from which to obtain default values for the item properties.
            </param>
            <remarks>
            This constructor initializes the DiagramNode properties with the
            values specified in the respective default-value properties of the
            Diagram object.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.#ctor(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Initializes a new instance of the DiagramNode class using
            the specified diagram item as a prototype.
            </summary>
            <param name="prototype">
            The item to use as a prototype. The properties of the new
            item are initialized from the property values of this item.
            </param>
            <remarks>
            This constructor copies the DiagramNode property values from
            the specified prototype node.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.OnRemove">
            <summary>
            DiagramItem.OnRemove override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the item content into an XML element.
            </summary>
            <param name="xmlElement">
            An XmlElement the item's data should be stored into.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information about
            the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            DiagramItem.LoadFromXml override.
            </summary>
            <param name="xmlElement">
            An XmlElement containing the item's data.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information about
            the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.RestoreState(MindFusion.Diagramming.Wpf.DiagramItemState)">
            <summary>
            DiagramItem.RestoreState override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.SaveProperties(MindFusion.Diagramming.Wpf.DiagramItemProperties)">
            <summary>
            DiagramItem.SaveProperties override.
            </summary>
            <param name="props">
            A DiagramItemProperties-derived object where the item's
            properties should be saved.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.RestoreProperties(MindFusion.Diagramming.Wpf.DiagramItemProperties)">
            <summary>
            DiagramItem.RestoreProperties override.
            </summary>
            <param name="props">
            A DiagramItemProperties-derived object containing a snapshot
            of the item's properties.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.StartCreate(System.Windows.Point)">
            <summary>
            DiagramItem.StartCreate override.
            </summary>
            <param name="org">
            Position of the mouse pointer.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.UpdateCreate(System.Windows.Point)">
            <summary>
            DiagramItem.UpdateCreate override.
            </summary>
            <param name="current">
            Position of the mouse pointer.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.CompleteCreate(System.Windows.Point)">
            <summary>
            DiagramItem.CompleteCreate override.
            </summary>
            <param name="end">
            The mouse pointer position.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AllowCreate(System.Windows.Point,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramItem.AllowCreate override.
            </summary>
            <param name="current">
            The current mouse pointer position.
            </param>
            <param name="ist">
            An InteractionState object containing more information about
            the current state of the operation.
            </param>
            <returns>
            true to allow the creation of this node; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.CanModify(System.Int32)">
            <summary>
            DiagramItem.CanModify override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.StartModify(System.Windows.Point,System.Int32,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramItem.StartModify override.
            </summary>
            <param name="org">
            Position of the mouse pointer.
            </param>
            <param name="handle">
            Index of the adjustment handle used to modify the node.
            </param>
            <param name="ist">
            An InteractionState object containing more information about the
            current state of the operation.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.ConstraintsInfringed">
            <summary>
            Check whether the KeepInsideParent constrained is being violated.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.UpdateModify(System.Windows.Point,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramItem.UpdateModify override.
            </summary>
            <param name="current">
            Position of the mouse pointer.
            </param>
            <param name="ist">
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.ModifyTranslate(System.Double,System.Double,System.Boolean)">
            <summary>
            DiagramItem.ModifyTranslate override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.CompleteModify(System.Windows.Point,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramItem.CompleteModify override.
            </summary>
            <param name="end">
            The mouse pointer position.
            </param>
            <param name="ist">
            An InteractionState object containing more information about
            the current state of the operation.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.CompleteModify(System.Boolean)">
            <summary>
            DiagramItem.CompleteModify override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AllowModify(System.Windows.Point,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramItem.AllowModify override.
            </summary>
            <param name="current">
            The current mouse pointer position.
            </param>
            <param name="ist">
            An InteractionState object containing more information about
            the current state of the operation.
            </param>
            <returns>
            true to allow the modification of this node; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.CancelModify(MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramItem.CancelModify override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AllowRect(System.Windows.Rect)">
            <summary>
            Checks whether the specified rectangle is allowable
            to be a bounding rectangle for this node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.OnUpdateBounds">
            <summary>
            Invoked when the bounding rectangle of the node has changed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.OnSizeChanged">
            <summary>
            Called when the size of the node changes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.OnAdd">
            <summary>
            Called when this node is added to Diagram
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.OnLoad">
            <summary>
            Called after the item is deserialized.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetExpander">
            <summary>
            Returns the expander manipulator
            </summary>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.DoExpand">
            <summary>
            Performs recursive expanding on this node
            and its relatives.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.DoCollapse">
            <summary>
            Performs recursive collapsing on this node and
            its relatives.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.Expand(System.Boolean)">
            <summary>
            DiagramItem.Expand override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.Collapse(System.Boolean)">
            <summary>
            DiagramItem.Collapse override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.IsExpanded">
            <summary>
            DiagramItem.IsExpanded override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.SetExpanded(System.Boolean)">
            <summary>
            DiagramItem.SetExpanded override.
            </summary>
            <param name="e">
            Specifies the new state of the node.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.SetExpandedFlag(System.Boolean)">
            <summary>
            Sets the 'expanded' flag, repainting the node.
            </summary>
            <param name="newState">
            Specifies the new state of the node.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.SetExpandable(System.Boolean)">
            <summary>
            Internally sets the expandable state of this object
            to the specified value, adding or removing an Expander
            manipulator object if necessary.
            </summary>
            <param name="exp">
            true if a collapse/expand button should be added to this node;
            otherwise, false.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.Expand">
            <summary>
            Shows all nodes and links in the subtree starting from this node.
            </summary>
            <remarks>
            This method is useful mostly when nodes form a tree-like
            hierarchical structure.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.Collapse">
            <summary>
            Hides all nodes and links in the subtree starting from this node.
            </summary>
            <remarks>
            This method is useful mostly when nodes form a tree-like
            hierarchical structure.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.OnDragOver(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Invoked when a diagram item is being dragged over this node.
            </summary>
            <param name="item">
            The DiagramItem that is dragged over the node.
            </param>
            <returns>
            false if the diagram should notify nodes below this one;
            otherwise, true.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.OnDragOut(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Invoked when a diagram item is being dragged out of this node.
            </summary>
            <param name="item">
            The DiagramItem that is dragged out of the node.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.OnDropOver(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Invoked when a diagram item is dropped over this node.
            </summary>
            <param name="item">
            The DiagramItem that is dropped over the node.</param>
            <returns>
            false if the diagram should notify nodes below this one;
            otherwise, true.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.DrawHandles(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.HandlesVisualStyle)">
            <summary>
            DiagramItem.DrawHandles override.
            </summary>
            <param name="graphics">
            The DrawingContext surface to draw the handles on.
            </param>
            <param name="hstyle">
            The style that should be used to render the handles.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetRepaintRect(System.Boolean)">
            <summary>
            DiagramItem.GetRepaintRect override.
            </summary>
            <param name="includeConnected">
            true is related items should be considered too; otherwise, false.
            </param>
            <returns>
            A rectangular region that should be repainted when this node is modified.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.Repaint(System.Boolean)">
            <summary>
            DiagramItem.Repaint override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetBounds">
            <summary>
            Gets the bounding rectangle of this item.
            </summary>
            <returns>
            The rectangle that bounds this item.
            </returns>
            <remarks>
            The Bounds property getter returns the result of this method.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetRotatedBounds">
            <summary>
            Gets the bounding rectangle of this item when it is rotated.
            </summary>
            <returns>
            A rectangle that bounds the rotated shape of the item.
            </returns>
            <remarks>
            This method is invoked during hit-testing to do a quick test
            whether a point is within the item's bounds, before calling
            the possibly more time-consuming ContainsPoint method.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetRotatedBounds(System.Windows.Rect,System.Windows.Point,System.Double)">
            <summary>
            Gets the bounding rectangle of this node, when it is
            rotated at the specified angle around the specified pivot.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.NormalizePaddingValue(System.Double)">
            <summary>
            If the specified value is NaN returns 1mm expressed in
            the current units of measure. Otherwise, simply returns
            the supplied value.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.Intersects(System.Windows.Rect)">
            <summary>
            DiagramItem.Intersects override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.SetRect(System.Windows.Rect,System.Boolean)">
            <summary>
            This method is used internally by the Ruler control to align nodes.
            </summary>
            <param name="rect">
            The new location of the node.
            </param>
            <param name="raiseModfEvent">
            A flag specifying whether to raise the xModified event.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.SetBounds(System.Windows.Rect)">
            <summary>
            Sets the bounding rectangle of this node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.SetBounds(System.Windows.Rect,System.Boolean)">
            <summary>
            Sets the bounding rectangle of this node. If the node is
            a master of a group, the change does not propagate to its
            subordinates.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.SetBounds(System.Windows.Rect,System.Boolean,System.Boolean)">
            <summary>
            Sets the location and size of this node.
            </summary>
            <param name="rect">A Rect specifying the node position.</param>
            <param name="updateGroups">
            Specifies whether the position of child nodes attached to this one should be updated too.
            </param>
            <param name="updateLinks">
            Specifies whether the position of links connected to this node should be updated too.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.SetPos(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the bounding rectangle of this node without
            updating connected arrows.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.MoveWith(System.Double,System.Double)">
            <summary>
            Translates the node at the specified distance.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.Move(System.Double,System.Double)">
            <summary>
            Moves the node to the specified location.
            </summary>
            <param name="x">
            A double value specifying the new x-coordinate of node's location.
            </param>
            <param name="y">
            A double value specifying the new y-coordinate of node's location.
            </param>
            <remarks>
            This method moves a node to the specified position, without
            changing the node's size.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.Resize(System.Double,System.Double)">
            <summary>
            Resizes the node.
            </summary>
            <param name="width">
            A double value specifying new width of the node.
            </param>
            <param name="height">
            A double value specifying new height of the node.
            </param>
            <remarks>
            This method resizes a node, without changing the node's top-left
            corner location. Resizing a node also updates the control points
            coordinates of all links connected to the node.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.ContainsPoint(System.Windows.Point)">
            <summary>
            DiagramItem.ContainsPoint override.
            </summary>
            <param name="point">
            The point to check.
            </param>
            <remarks>
            true it this node contains the specified point; otherwise, false.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.ContainsPoint(System.Windows.Point,System.Double)">
            <summary>
            Tests whether the specified point is contained within the
            outline of this node, relaxed with the specified threshold.
            </summary>
            <param name="diagramPoint">
            The point to check.
            </param>
            <param name="threshold">
            Specifies the size of the area around the node outlines where
            the point is still considered inside the node.
            </param>
            <returns>
            true it this node contains the specified point; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.HitTestHandle(System.Windows.Point,System.Int32@)">
            <summary>
            DiagramItem.HitTestHandle override.
            </summary>
            <param name="pt">
            A Point value specifying where to look for a selection handle.
            </param>
            <param name="handle">
            A reference to an integer variable, which receives the index
            of the found selection handle.
            </param>
            <returns>
            true if there is a selection handle at the specified location;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetHandleIdx(System.Windows.Point)">
            <summary>
            DiagramItem.GetHandleIdx override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetRegion">
            <summary>
            DiagramItem.GetRegion override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetRotationAngle">
            <summary>
            Gets the rotation angle of this node.
            </summary>
            <returns>
            A double value specifying the rotation angle.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetCenter">
            <summary>
            Gets the center of this node's bounding rectangle.
            </summary>
            <returns>
            A Point object representing the center point of this node.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.ParallelDistance(System.Double,System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates the distance between 2 paralel lines defined by 1 angle and two points
            </summary>
            TODO: move to Utilities
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.PerpendicularIntersect(System.Double,System.Windows.Point,System.Windows.Point)">
            <summary>
            Intersects two perpendicular lines, defined by angle and point
            </summary>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetTopLeft(MindFusion.Diagramming.Wpf.AdjustmentHandles,System.Windows.Point,System.Windows.Point,System.Windows.Vector,System.Windows.Point@,System.Windows.Point@)">
            <summary>
            Returns the top left handle from an arbitrary opposite corner handle positions
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.CalculateRect(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Given the 3 corners of a rectangle, calculate bounds that are suitable for passing to Arrange()
            </summary>
            <param name="newTopLeft"></param>
            <param name="newTopRight"></param>
            <param name="newBottomLeft"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetCorner(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the fourth corner D of rect, so that AB is parallel to CD and of the same length
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetCannotDropCursor">
            <summary>
            DiagramItem.GetCannotDropCursor override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetCanDropCursor">
            <summary>
            DiagramItem.GetCanDropCursor override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AttachTo(MindFusion.Diagramming.Wpf.DiagramLink,MindFusion.Diagramming.Wpf.AttachToLink,System.Int32)">
            <summary>
            Attaches this node to the specified link using the
            specified attaching type.
            </summary>
            <param name="link">
            A DiagramLink to whose control point or segment to attach this node.
            </param>
            <param name="attType">
            A value of the AttachToLink enumeration specifying whether to
            attach the node to a segment or to a control point of the link.
            </param>
            <param name="index">
            An index of link's control point or segment, depending on the attType value.
            </param>
            <remarks>
            This method attaches the node to a control point or segment
            of the specified link.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AttachTo(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.AttachToNode)">
            <summary>
            Attaches this node to the specified node using
            the specified attaching type.
            </summary>
            <param name="node">
            A reference to the node to whose corner to attach this node.
            </param>
            <param name="attType">
            A member of the AttachToNode enumeration specifying to which corner
            of a node to attach this node.
            </param>
            <remarks>
            This method attaches the current node to the corner of another node.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AttachTo(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.GroupAnchorStyles)">
            <summary>
            Attaches this node to one or more edges of the specified node.
            </summary>
            <param name="node">
            A reference to the node to which to attach this node.
            </param>
            <param name="anchorStyles">
            A member of the GroupAnchorStyles enumeration specifying the
            master node's edges to which this node should be anchored.
            </param>
            <remarks>
            This method attaches the current node to the corner of another node.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AttachTo(MindFusion.Diagramming.Wpf.DiagramNode,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Proportionally attaches this node to the specified node.
            </summary>
            <param name="node">
            A reference to the node to which to attach this node.
            </param>
            <param name="percentX1">
            Left-hand side coordinate of the node, expressed as percent
            of main node's width.
            </param>
            <param name="percentY1">
            Top side coordinate of the node, expressed as percent
            of main node's height.
            </param>
            <param name="percentX2">
            Right-hand side coordinate of the node, expressed as percent
            of main node's width.
            </param>
            <param name="percentY2">
            Bottom side coordinate of the node, expressed as percent
            of main node's height.
            </param>
            <remarks>
            This method attaches proportionally the current node to another node.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.Detach">
            <summary>
            Detaches this node from its master item.
            </summary>
            <remarks>
            The node should be previously attached using AttachTo.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetSubordinateGroup(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Returns the subordinate group of the specified
            item, if any, or creates a new one.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GroupContains(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Determines whether this node is a predecessor of
            the specified node in the group hierarchy.
            </summary>
            <param name="node">
            The node to check.
            </param>
            <returns>
            true if the specified node is subordinate to this one; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.PutInGroup(MindFusion.Diagramming.Wpf.Group)">
            <summary>
            Sets the master group of this object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.IsAttached">
            <summary>
            Checks whether this object has a master group.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetContainingGroup">
            <summary>
            Gets the group this object belongs to, if any.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetGroupMaster(MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Returns the diagram item highest in the group hierarchy
            starting from this object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetMasterGroup">
            <summary>
            For compatibility with older serialization formats.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.VisitHierarchy(MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor)">
            <summary>
            DiagramItem.VisitHierarchy override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.UpdateLinkPositions">
            <summary>
            Updates the end points of the links, connected to this node,
            usually in response to change in the node's size or shape.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.UpdateLinkIntersections">
            <summary>
            Updates the intersection points of links, conntected to this node
            and its outline, usually in response to change in the node's shape.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetExcludedLinks">
            <summary>
            Gets a set of arrows that should not be affected by
            certain operations.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AcceptLinks(System.Boolean,System.Windows.Point)">
            <summary>
            Determines whether the node can be connected with
            links of the specified type.
            </summary>
            <param name="outgoing">
            true to check for outgoing links; otherwise, false.
            </param>
            <param name="mousePosition">
            The current mouse pointer position in diagram coordinates.
            </param>
            <returns>
            true if the node accepts connections of the specified type;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.RaiseValidateAnchorPoint(MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean,System.Int32)">
            <summary>
            Raises the ValidateAnchorPoint event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetAllOutgoingLinks(MindFusion.Diagramming.Wpf.DiagramLinkCollection)">
            <summary>
            Adds all links going out of this node to the
            specified collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetAllIncomingLinks(MindFusion.Diagramming.Wpf.DiagramLinkCollection)">
            <summary>
            Adds all links going in this node to the
            specified collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetAllOutgoingLinks">
            <summary>
            Get a collection of all links going out of this node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetAllIncomingLinks">
            <summary>
            Gets a collection of all links entering this node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetAllLinks">
            <summary>
            Gets all links connected to this node.
            </summary>
            <returns>
            A DiagramLinkCollection containing the links connected to this node.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.VisitLinks(MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor)">
            <summary>
            Visits all arrows connected to this node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.VisitLinks(MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor,MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor)">
            <summary>
            Visits all arrows connected to this node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.VisitLinks(MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor,MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor,MindFusion.Diagramming.Wpf.DiagramLinkCollection)">
            <summary>
            Visits all arrows connected to this node filtering the
            ones contained in the specified  collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AV_UpdateOutgoing(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Invokes the DiagramLink.UpdatePosFromOrgAndDest method
            on the specified arrow.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AV_UpdateIncoming(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Invokes the DiagramLink.UpdatePosFromOrgAndDest method
            on the specified arrow unless it is reflexive.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AV_UpdPosOutgoing(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Invokes the DiagramLink.UpdatePosFromOrgAndDest method
            on the specified arrow.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AV_UpdPosIncoming(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Invokes the DiagramLink.UpdatePosFromOrgAndDest method
            on the specified arrow unless it is reflexive.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AV_UpdIntscOutgoing(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Incokes the DiagramLink.UpdateIntersections method
            on the specified arrow.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AV_UpdIntscIncoming(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Incokes the DiagramLink.UpdateIntersections method
            on the specified arrow unless it is reflexive.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AV_StartModOutgoing(MindFusion.Diagramming.Wpf.DiagramItem,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Invokes the DiagramLink.StartModifyOrg method on
            the specified arrow.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AV_StartModIncoming(MindFusion.Diagramming.Wpf.DiagramItem,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Invokes the DiagramLink.StartModifyEnd method on
            the specified arrow.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AV_EndModOutgoing(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Invokes the DiagramLink.UpdatePosFromOrgAndDest and
            DiagramLink.CompleteModify methods on the specified arrow.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AV_EndModIncoming(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Invokes the DiagramLink.UpdatePosFromOrgAndDest and
            DiagramLink.CompleteModify methods on the specified arrow
            unless it is reflexive.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AV_Cancel(MindFusion.Diagramming.Wpf.DiagramItem,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Invokes the DiagramLink.CancelModify method
            on the specified arrow.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AddIncomingLink(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Adds the specified link to this node's incoming
            arrows collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AddOutgoingLink(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Adds the specified link to this node's outgoing
            arrows collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.DeleteLinks">
            <summary>
            Deletes all arrows connected to this node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.RemoveIncomingLink(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Removes the specified link from this node's
            incoming arrows collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.RemoveOutgoingLink(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Removes the specified link from this node's
            outgoing arrows collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.SetIncomingLinks(MindFusion.Diagramming.Wpf.DiagramLinkCollection)">
            <summary>
            Sets the incoming links collection of this node.
            </summary>
            <param name="links">
            A DiagramLinkCollection containing the node's incoming links.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.SetOutgoingLinks(MindFusion.Diagramming.Wpf.DiagramLinkCollection)">
            <summary>
            Sets the outgoing links collection of this node.
            </summary>
            <param name="links">
            A DiagramLinkCollection containing the node's outgoing links.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AlreadyLinked(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Gets a value indicating whether this node has
            at least one outgoing arrow.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.CreateConnectionPoint(MindFusion.Diagramming.Wpf.DiagramLink,System.Windows.Point,System.Boolean)">
            <summary>
            Creates a connection point between this node and the specified link
            at the specified point.
            </summary>
            <param name="link">
            A DiagramLink that should be connected to this node.
            </param>
            <param name="pt">
            The point at which the link should be connected.
            </param>
            <param name="incoming">
            true if link is an incoming link, otherwise, false.
            </param>
            <returns>
            A ConnectionPoint instance representing the connection.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.SetReflexive(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Invoked to let a node set the shape of a reflexive link connected to it.
            </summary>
            <param name="link">Reference to the link.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetAnchor(System.Windows.Point,System.Boolean,MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean,System.Int32@)">
            <summary>
            Returns the coordinates of the anchor point, closest
            to the specified one.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetAnchor(MindFusion.Diagramming.Wpf.AnchorPosition)">
            <summary>
            Calculates a point which lies on the node's outline,
            according to the specified AnchorPosition.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetAnchor(MindFusion.Diagramming.Wpf.AnchorPosition,System.Boolean)">
            <summary>
            Calculates a point which lies on the node's outline,
            according to the specified AnchorPosition.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetAnchorPos(System.Int32)">
            <summary>
            Gets the coordinates of the anchor point with the
            specified index from the associated anchor pattern,
            taking into account the current rotation value.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetNearestAnchor(System.Windows.Point,System.Boolean,MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean,System.Int32@)">
            <summary>
            Returns the coordinates of the anchor point, closest
            to the specified one.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.ReassignAnchorPoints">
            <summary>
            Reassigns links to anchor points so that they are evenly disctributed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.PointPositionByLine(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Verifys where is lieing some point. Point A and B defines the equation of straight line. 
            somePointCoords is the coordinate point which want to verify.
            Depending on which point A or B is first, the method returns less then 0, great then 0 or equal to 0 if point lie on the straight line.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.ReassignUnanchoredLinks">
            <summary>
            Reassigns unanchored links
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetIntersection(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates the intersecion point between the segment
            defined by the specified point pair and the node's outline.
            </summary>
            <param name="segmentStart">
            The first point of the segment.
            </param>
            <param name="segmentEnd">
            The second point of the segment.
            </param>
            <returns>
            A Point object representing the intersection point.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetTopMiddleIntr">
            <summary>
            Caclulates a point at the top middle side of the node's
            outline where reflexive arrows are initially linked.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetTopIntr(System.Double)">
            <summary>
            Calculates a point at the top side of the node's outline
            distanced from the left side of the node according to
            the specified factor. The factor varies in the interval [0..1]
            with 0 indicating a point at the top left corner of the
            node, while 1 indicatiting a point at the top right.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.ConsiderBounds">
            <summary>
            Specifies whether the node bounds should be considered
            when calculatin intersecton with other objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.NodesIntersect(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Tests whether the outlines of the specified nodes intersect.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetNearestOutlinePoint(System.Windows.Point)">
            <summary>
            Calculates a point which lies on the outline of this nodes
            at the smallest possible distance from the specified point.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetToolTip(System.Windows.Point,System.Boolean)">
            <summary>
            DiagramItem.GetToolTip override.
            </summary>
            <param name="point">
            The mouse pointer position.
            </param>
            <param name="isDiagramCoordinate">
            true if the point is specified in logical diagram coordinates;
            false if the point is specified in WPF points.
            </param>
            <returns>
            An object specifying the tooltip contents.
            </returns>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramNode.BoundsProperty">
            <summary>
            Identifies the Bounds attached property.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.GetBounds(System.Windows.UIElement)">
            <summary>
            Gets the value of the Bounds attached property from a given UIElement. 
            </summary>
            <param name="item">
            The element from which to read the property value.
            </param>
            <returns>
            The value of the Bounds attached property.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.SetBounds(System.Windows.UIElement,System.Windows.Rect)">
            <summary>
            Sets the value of the Bounds attached property to a given UIElement.
            </summary>
            <param name="item">
            The element on which to set the Bounds attached property.
            </param>
            <param name="value">
            The property value to set.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.AddAnchorPointVisuals(MindFusion.Diagramming.Wpf.AnchorPattern)">
            <summary>
            Adds the AnchorPatern points to the node's Adorner.
            </summary>
            <param name="ap"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.RemoveAnchorPointVisuals(MindFusion.Diagramming.Wpf.AnchorPattern)">
            <summary>
            Removes the AnchorPatern points from the node's Adorner.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.UpdateAnchorVisibility(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            
            </summary>
            <param name="newAutoAnchorsNode">If invoked from Diagram.SetAutoAnchors pass the new value</param>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramNode.EnabledHandlesProperty">
            <summary>
            Identifies the EnabledHandles property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramNode.RotationAngleProperty">
            <summary>
            Idendifies the Diagram.Brush depenedenct property
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNode.SetRotation(System.Double)">
            <summary>
            Sets the rotation angle of this node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramNode.handlesStyle">
            <summary>
            Contains a value indicating how the node adjustment handles
            behave and what do they look like.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNode.ForceKeepGroups">
            <summary>
            Gets a value indicating whether this item's subordinate
            groups will be kept when layouting even if the KeepGroupLayout
            is false.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNode.Pivot">
            <summary>
            The pivot point in shape coordinates
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNode.HandlesStyle">
            <summary>
            Gets or sets a value indicating how the node adjustment
            handles behave and what do they look like.
            </summary>
            <remarks>
            Specifies how node selection status is indicated visually.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNode.IncomingLinks">
            <summary>
            Gets a collection of links that point to the node.
            </summary>
            <remarks>
            Use this collection to get access to every link pointing to the node,
            as well as get the number of such links.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNode.OutgoingLinks">
            <summary>
            Gets a collection of links that start from this node.
            </summary>
            <remarks>
            Use this collection to get access to every link starting from the node,
            as well as get the number of such links.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNode.AllowIncomingLinks">
            <summary>
            Gets or sets a value indicating whether users are allowed
            to draw incoming links to this node.
            </summary>
            <remarks>
            Links to a node can be created programmatically regardless
            of the value of this property.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNode.AllowOutgoingLinks">
            <summary>
            Gets or sets a value indicating whether users are allowed
            to draw outgoing links from this node.
            </summary>
            <remarks>
            Links from a node can be created programmatically regardless
            of the value of this property.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNode.Expandable">
            <summary>
            Gets or sets a value indicating whether users are allowed to
            expand or collapse the subtree that starts from this node.
            </summary>
            <remarks>
            This property is useful mostly when nodes form a tree-like
            hierarchical structure.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNode.Expanded">
            <summary>
            Gets or sets a value indicating whether the subtree starting
            from this node is expanded.
            </summary>
            <remarks>
            This property is useful mostly when nodes form a tree-like
            hierarchical structure.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNode.Obstacle">
            <summary>
            Gets or sets a value indicating whether this node is considered
            an obstacle by the link-routing algorithm.
            </summary>
            <remarks>
            It is useful to set this property to false for nodes used as
            decorative containers or labels.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNode.AnchorPattern">
            <summary>
            Gets or sets the anchor points to which links are attached
            when connected to the node.
            </summary>
            <remarks>
            This property specifies a set of points to which links can be attached.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNode.Bounds">
            <summary>
            Gets or sets the rectangle that defines the position of the diagram node.
            </summary>
            <remarks>
            Use this property to set or get the size and/or location of a node.
            Moving a node also updates the control points coordinates of all
            links connected to the node.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNode.Constraints">
            <summary>
            Allows applying constraints to the location and size of the node.
            </summary>
            <remarks>
            These constraints are considered when a user modifies the node
            interactively.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNode.Frozen">
            <summary>
            Gets a value indicating whether the node should
            be ignored by automatic layouts.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNode.EnabledHandles">
            <summary>
            Gets or sets the kinds of modifications that end-users are
            permitted to perform on the node.
            </summary>
            <remarks>
            Disabling some selection handles allows restricting the types
            of modifications that users can perform on a node.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNode.RotationAngle">
            <summary>
            Gets or sets the rotation angle of this node.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNode.MasterGroup">
            <summary>
            Gets a reference to the group to which this node is attached.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNode.HasItems">
            <summary>
            Determines whether the node supports linking to specific sub component (table rows, treeview items)
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.InplaceEditable">
            <summary>
            Represents an inplace-editable object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InplaceEditable.GetTextToEdit">
            <summary>
            Returns the text of the object which should be
            displayed initially when the object is in-place
            edited.
            </summary>
            <returns>
            A string value that represents the initial contents
            of the in-place edit box.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InplaceEditable.SetEditedText(System.String)">
            <summary>
            Sets the edited text to the object after the
            in-place editing operation has been completed
            successfully.
            </summary>
            <param name="newText">
            The new text of the in-place edited object.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InplaceEditable.GetEditRect(System.Windows.Point)">
            <summary>
            Returns the rectangle where the in-place edit
            text box should appear in coordinates relative to the item returned by GetDiagramItem.
            </summary>
            <returns>
            A Rect instance that represents the destination
            rectangle of the in-place edit box.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InplaceEditable.GetDiagramItem">
            <summary>
            Returns the item to which the GetEditRect is relative
            </summary>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.#cctor">
            <summary>
            Static initialization.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.#ctor">
            <summary>
            Initializes a new instance of the ShapeNode class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the ShapeNode class with default
            values supplied form the specified Diagram.
            </summary>
            <param name="parent">
            The Diagram from which to obtain default values for the node properties.
            </param>
            <remarks>
            This constructor initializes the ShapeNode properties with
            the values specified in the respective default-value properties
            of the Diagram object.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.#ctor(MindFusion.Diagramming.Wpf.ShapeNode)">
            <summary>
            Initializes a new instance of the ShapeNode class using
            the specified node as a prototype.
            </summary>
            <param name="prototype">
            The node to use as a prototype. The properties of the new node
            are initialized from the property values of this node.
            </param>
            <remarks>
            This constructor copies the ShapeNode property values from
            the specified prototype node.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.OnAdd">
            <summary>
            Called when the item is added to a Diagram,
            either by users, programmatically or via undo / redo.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.OnLoad">
            <summary>
            Called after the item is deserialized.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.Dispose(System.Boolean)">
            <summary>
            Disposes any disposable resources managed by this shape.
            </summary>
            <param name="disposing">Specifies whether the method is called explicitly
            or from the garbage collector.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the item content into an XML element.
            </summary>
            <param name="xmlElement">
            An XmlElement the item's data should be stored into.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information
            about the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Loads the item content from an XML element.
            </summary>
            <param name="xmlElement">
            An XmlElement containing the item's data.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information about
            the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.CreateState">
            <summary>
            DiagramItem.CreateState override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.SaveState(MindFusion.Diagramming.Wpf.DiagramItemState)">
            <summary>
            DiagramItem.SaveState override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.RestoreState(MindFusion.Diagramming.Wpf.DiagramItemState)">
            <summary>
            Node.RestoreState override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.CreateProperties">
            <summary>
            DiagramItem.CreateProperties override.
            </summary>
            <returns>
            A DiagramItemProperties-derived object containing a snapshot
            of the item's properties.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.SaveProperties(MindFusion.Diagramming.Wpf.DiagramItemProperties)">
            <summary>
            DiagramNode.SaveProperties override.
            </summary>
            <param name="props">
            A DiagramItemProperties-derived object where the item's properties
            should be saved.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.RestoreProperties(MindFusion.Diagramming.Wpf.DiagramItemProperties)">
            <summary>
            DiagramNode.RestoreProperties override.
            </summary>
            <param name="props">
            A DiagramItemProperties-derived object containing a snapshot
            of the item's properties.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.StartModify(System.Windows.Point,System.Int32,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramNode.StartModify override.
            </summary>
            <param name="org">
            Position of the mouse pointer.
            </param>
            <param name="handle">
            </param>
            <param name="ist">
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.UpdateModify(System.Windows.Point,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramNode.UpdateModify override.
            </summary>
            <param name="current">
            Position of the mouse pointer.
            </param>
            <param name="ist">
            An InteractionState object containing more information about
            the current state of the operation.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.AllowModify(System.Windows.Point,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramNode.AllowModify override.
            </summary>
            <param name="current">
            The current mouse pointer position.
            </param>
            <param name="ist">
            An InteractionState object containing more information
            about the current state of the operation.
            </param>
            <returns>
            true to allow the modification of this node; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.CancelModify(MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Node.CancelModify override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.OnUpdateBounds">
            <summary>
            DiagramNode.OnUpdateBounds override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.Draw(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.RenderOptions)">
            <summary>
            Draws the node using the specified DrawingContext object.
            </summary>
            <param name="graphics">
            A DrawingContext object where the node should be rendered.
            </param>
            <param name="options">
            Provides options for the drawing operation.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.DrawInterior(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.RenderOptions)">
            <summary>
            Draws the text and image of the node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.GetRepaintRect(System.Boolean)">
            <summary>
            DiagramNode.GetRepaintRect override.
            </summary>
            <param name="includeConnected">
            true is related items should be considered too; otherwise, false.
            </param>
            <returns>
            A rectangular region that should be repainted when this node is modified.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.DrawText(System.String,System.Windows.Rect,MindFusion.Text.DrawTextHint)">
            <summary>
            Laid-out text rendering callback.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.ContainsPoint(System.Windows.Point)">
            <summary>
            DiagramItem.ContainsPoint override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.ContainsPoint(System.Windows.Point,System.Double)">
            <summary>
            Tests whether the specified point is contained within the
            outline of this node, relaxed with the specified threshold.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.TransformDiagramToShape(System.Windows.Point)">
            <summary>
            Transform point from diagram to shape (percent) coordinates considering shapeOrientation
            </summary>
            <param name="diagramPoint"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.GetHandleIdx(System.Windows.Point)">
            <summary>
            DiagramItem.GetHandleIdx override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.GetRegion">
            <summary>
            DiagramItem.GetRegion override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.ResizeToFitImage">
            <summary>
            Makes the shape node as big as the image it displays.
            </summary>
            <remarks>
            Call this method to make a shape node exactly the same size as
            the image it contains.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.ResizeToFitText(MindFusion.Diagramming.Wpf.FitSize)">
            <summary>
            Makes the shape node big enough to display its text without clipping.
            </summary>
            <param name="fit">
            A member of the FitSize enumeration specifying whether the width
            or height of the node should remain unchanged.
            </param>
            <returns>
            true if the node is resized successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.CreateConnectionPoint(MindFusion.Diagramming.Wpf.DiagramLink,System.Windows.Point,System.Boolean)">
            <summary>
            DiagramNode.CreateConnectionPoint override.
            </summary>
            <param name="link">
            A DiagramLink that should be connected to this node.
            </param>
            <param name="pt">
            The point at which the link should be connected.
            </param>
            <param name="incoming">
            true if link is an incoming link; otherwise, false.
            </param>
            <returns>
            A ConnectionPoint instance representing the connection.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.MindFusion#Diagramming#Wpf#InplaceEditable#GetTextToEdit">
            <summary>
            Node.GetTextToEdit override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.MindFusion#Diagramming#Wpf#InplaceEditable#SetEditedText(System.String)">
            <summary>
            Node.SetEditedText override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.MindFusion#Diagramming#Wpf#InplaceEditable#GetEditRect(System.Windows.Point)">
            <summary>
            Node.GetEditRect override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.GetAnchor(System.Windows.Point,System.Boolean,MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean,System.Int32@)">
            <summary>
            Node.GetAnchor override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.OnMeasureUnitChanged">
            <summary>
            Called when the Diagram's MeasureUnit changes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.OnZoomChanged">
            <summary>
            Called when the Diagram's ZoomFactor changes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.OnTextAttributeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DiagramItem.OnTextAttributeChanged override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.InvalidateText">
            <summary>
            Invalidates the current styled text. The styled text is recreated
            the next time it is required. The layout of the styled text, as is
            obvious, is invalidated as well.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.InvalidateTextLayout">
            <summary>
            Invalidates the layout of the current styled text. The layout is recreated
            the next time it is required.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.UpdateText">
            <summary>
            Updates the internal MindFusion.Text.Text
            object when styled / laid-out characteristics of
            the node's text have changed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.LayoutText">
            <summary>
            Performs the actual text layouting so that
            the internal MindFusion.Text.Layout object
            is prepared for subsequent drawing operations.
            Returns whether text fits entirely whithin the area.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.DocToLocal(System.Windows.Point[])">
            <summary>
            Transforms the specified points from document
            coordinates to coordinates relative to the left-top
            point of the node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.GetIntersection(System.Windows.Point,System.Windows.Point)">
            <summary>
            Finds the intersection of the node contour with the line
            segment defined by the specified points.
            </summary>
            <param name="segmentStart">
            The first point of the segment.
            </param>
            <param name="segmentEnd">
            The second point of the segment.
            </param>
            <returns>
            A Point object representing the intersection point.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.GetOutlinePath">
            <summary>
            DiagramItem.GetOutlinePath override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.GetNodePtPercent(System.Windows.Point)">
            <summary>
            Calculates the percent values corresponding to the specified
            point relative to this node's bounding rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.GetImage">
            <summary>
            Gets the image associated with the node. If no image is
            associated, returns the image associated with the node's
            shape template.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.GetImageRect">
            <summary>
            Gets the image rectangle from the associated
            shape template or the node's bounding rectangle if
            there is no associated shape template.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.GetPolygon">
            <summary>
            Returns a polygon approximating the node's outline
            if the node's style is Shape; null, otherwise.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeNode.UpdateShapePoints">
            <summary>
            Updates the node's shape usually in response of a
            change in the size or rotation angle of the node.
            </summary>
            TODO: remove
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ShapeNode.ClipTextProperty">
            <summary>
            Identifies the ClipText dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ShapeNode.rotateImage">
            <summary>
            Specifies whether to rotate the node image when the box is rotated.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ShapeNode.rotateText">
            <summary>
            Specifies whether to rotate the node text when the box is rotated.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeNode.Shape">
            <summary>
            Gets or sets a reference to the node's geometric shape definition.
            </summary>
            <remarks>
            Use this property to assign a complex shape to a node.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeNode.ShapeOrientation">
            <summary>
            Gets or sets the angle specifying the orientation with which
            a shape template is applied to the node bounds.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeNode.RotateText">
            <summary>
            Gets or sets a value indicating whether the Text should be rotated
            when the shape node is rotated.
            </summary>
            <remarks>
            If the property is set to false and PolygonalTextLayout is enabled,
            the text stays horizontal but it adapts to the rotated outline of
            the shape node.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeNode.RotateImage">
            <summary>
            Gets or sets a value indicating whether the Image should be rotated
            when the shape node is rotated.
            </summary>
            <remarks>
            The image is clipped by the rotated shape outline, even if
            this property is set to false.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeNode.Image">
            <summary>
            Gets or sets the image that is displayed in this shape node.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeNode.ImageAlign">
            <summary>
            Gets or sets the alignment of the image displayed in this shape node.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeNode.Transparent">
            <summary>
            Gets or sets a value indicating whether this shape node is transparent.
            </summary>
            <remarks>
            If a node is transparent, only its image and text are drawn.
            Shape, filling and frames are not painted.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeNode.PlainText">
            <summary>
            Gets the plain text of this shape node.
            </summary>
            <remarks>
            This property removes any formatting tags from the node's Text
            and returns the plain human-readable text.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeNode.TextFormat">
            <summary>
            Gets or sets the alignment of the text that is displayed inside shape nodes.
            </summary>
            <remarks>
            Use this property to specify the wrapping mode and alignment
            of the text that is contained in nodes.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeNode.EnableStyledText">
            <summary>
            Gets or sets a value indicating whether styled text rendering is enabled.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeNode.PolygonalTextLayout">
            <summary>
            Gets or sets a flag indicating whether node's text is
            formatted in non-rectangular outline.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeNode.CustomDraw">
            <summary>
            Gets or sets the type of custom drawing performed on this shape node.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeNode.ClipImage">
            <summary>
            Gets or sets a value indicating whether to clip the Image assigned
            to this node to fit into the shape's geometry.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeNode.ClipText">
            <summary>
            Gets or sets a value indicating whether to clip the text assigned
            to this node to fit into the shape's geometry.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Behaviors.LinkControlsBehavior">
            <summary>
            This class is used when the diagram behavior is set to BehaviorType.LinkControls.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.LinkControlsBehavior.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the LinkControlsBehavior class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.LinkControlsBehavior.CreateNode">
            <summary>
            LinkNodesBehavior.CreateNode override.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Behaviors.LinkContainersBehavior">
            <summary>
            This class is used when the diagram behavior is set to Behavior.LinkContainers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.LinkContainersBehavior.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the LinkContainersBehavior class.
            </summary>
            <param name="diagram">
            The Diagram this behavior will be associated with.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.LinkContainersBehavior.CreateNode">
            <summary>
            LinkNodesBehavior.CreateNode override.
            </summary>
            <returns>
            An instance of the DiagramNode class.
            </returns>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Visitors.GroupBoundsVisitor">
            <summary>
            Creates a union of the bounding rectangles and the
            rotated bounding rectangles of all visited objects.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor">
            <summary>
            Defines a base for all DiagramItem visitor classes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor.Accept(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Accepts this visitor.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Visitors.GroupBoundsVisitor.#ctor(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Initializes a new instance of the GroupBoundsVisitor class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Visitors.GroupBoundsVisitor.Accept(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            CollectionVisitor.Accept override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Visitors.GroupBoundsVisitor.Bounds">
            <summary>
            Gets the accumulated bounding rectangles.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Visitors.GroupBoundsVisitor.RotatedBounds">
            <summary>
            Gets the accumulated rotated bounding rectangles.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.ExpandHeaderRowCmd">
            <summary>
            Implements undo and redo of collapsing or expanding the
            header row of a table section.
            </summary>
            <remarks>
            Instances of this class are implicitly created by WpfDiagram
            in response to expanding or collapsing Header rows, either
            interactively or programmatically. References to those instances
            are passed to handlers of the ActionRecorded, ActionUndone and
            ActionRedone events.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ExpandHeaderRowCmd.#ctor(MindFusion.Diagramming.Wpf.TableNode,System.Int32)">
            <summary>
            Intializes a new instance of the ExpandHeaderRowCmd class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ExpandHeaderRowCmd.Execute(System.Boolean)">
            <summary>
            Carries out the command action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ExpandHeaderRowCmd.Undo">
            <summary>
            Undoes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ExpandHeaderRowCmd.Redo">
            <summary>
            Redoes the command action.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.ExpandHeaderRowCmd.TableNode">
            <summary>
            Gets a reference to table affected by this operation.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.ExpandHeaderRowCmd.RowIndex">
            <summary>
            Gets the index of the header row whose section is expanded or collapsed.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.CommandCollection">
            <summary>
            A collection of commands.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CommandCollection.#ctor">
            <summary>
            Initializes a new instance of the CommandCollection class
            with the default initial capacity.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CommandCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the CommandCollection class
            with the specified initial capacity.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CommandCollection.GetInnerList">
            <summary>
            Returns the ArrayList object wrapped by this collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CommandCollection.Add(MindFusion.Diagramming.Wpf.Commands.Command)">
            <summary>
            Adds the specified command to the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CommandCollection.GetAt(System.Int32)">
            <summary>
            Returns the command at the specified index.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CommandCollection.Remove(MindFusion.Diagramming.Wpf.Commands.Command)">
            <summary>
            Removes the specified command from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CommandCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the specified number of commands from the
            collection starting at the specified index.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CommandCollection.Clear">
            <summary>
            Removes all commands from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CommandCollection.Contains(MindFusion.Diagramming.Wpf.Commands.Command)">
            <summary>
            Determines whether the specified command is contained
            in the collection.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.CommandCollection.Item(System.Int32)">
            <summary>
            Gets or sets the command at the specified index.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.TopologicalLayoutInfo">
            <summary>
            Contains settings for the TopologicalLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.TopologicalLayoutInfo.#ctor">
            <summary>
            Initializes a new instance of the TopologicalLayoutInfo class.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TopologicalLayoutInfo.Orientation">
            <summary>
            Gets or sets the orientation of the topological ordering.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TopologicalLayoutInfo.Direction">
            <summary>
            Gets or sets the direction of the topological ordering.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TopologicalLayoutInfo.NodeDistance">
            <summary>
            Gets or sets the distance between adjacent nodes.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TopologicalLayoutInfo.Margins">
            <summary>
            Gets or sets the distance between the top-left corner
            of the smallest rectangle containing the arranged diagram
            and the top-left point of the document bounds.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TopologicalLayoutInfo.BendAdjacentLinks">
            <summary>
            Gets or sets a value indicating whether to bend links connecting
            adjacent nodes or draw them as straight lines.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.TopologicalLayout">
            <summary>
            Arranges nodes in a topological order.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.TopologicalLayout.#ctor">
            <summary>
            Initializes a new instance of the TopologicalLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.TopologicalLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.TopologicalLayoutInfo)">
            <summary>
            Applies the layout to the specified graph using the specified settings.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Strings.RemoveNamespaceXslt">
             <summary>
               Looks up a localized string similar to &lt;xsl:stylesheet xmlns:xsl =&quot;http://www.w3.org/1999/XSL/Transform&quot; version =&quot;1.0&quot; &gt;
            &lt;xsl:template match =&quot;@*&quot; &gt;
            &lt;xsl:attribute name =&quot;{local-name()}&quot; &gt;
            &lt;xsl:value-of select =&quot;.&quot; /&gt;
            &lt;/xsl:attribute&gt;
            &lt;xsl:apply-templates/&gt;
            &lt;/xsl:template&gt;
            &lt;xsl:template match =&quot;*&quot; &gt;
            &lt;xsl:element name =&quot;{local-name()}&quot; &gt;
            &lt;xsl:apply-templates select =&quot;@* | node()&quot; /&gt;
            &lt;/xsl:element&gt;
            &lt;/xsl:template&gt;
            &lt;/xsl:stylesheet&gt;.
             </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.ExpandTreeViewItemCmd">
            <summary>
            Implements support for undo of TreeViewItem collapse/expand operations.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ExpandTreeViewItemCmd.#ctor(MindFusion.Diagramming.Wpf.TreeViewNode,MindFusion.Diagramming.Wpf.TreeViewItem)">
            <summary>
            Initializes a new instance of the ExpandTreeViewItemCmd class.
            </summary>
            <param name="node">The parent TreeViewNode.</param>
            <param name="item">The TreeViewItem that has been collapsed or expanded.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ExpandTreeViewItemCmd.Execute(System.Boolean)">
            <summary>
            Command.Execute override.
            </summary>
            <param name="undoEnabled">
            Specifies whether undo/redo is enabled. If undo is disabled,
            the command won't be saved in undo history and will never be
            called to undo or redo itself. In such case you might choose
            to skip some housekeeping operations such as saving state
            variables for later undo/redo.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ExpandTreeViewItemCmd.Undo">
            <summary>
            Command.Undo override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ExpandTreeViewItemCmd.Redo">
            <summary>
            Command.Redo override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.ExpandTreeViewItemCmd.Item">
            <summary>
            Gets the TreeViewItem that has been collapsed or expanded.
            </summary>
        </member>
        <member name="T:MindFusion.XmlElementNameAttribute">
            <summary>
            Specifies a string to be used as a XmlElement name of a type
            during XML serialization.
            </summary>
        </member>
        <member name="M:MindFusion.XmlElementNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the XmlElementNameAttribute class.
            </summary>
        </member>
        <member name="P:MindFusion.XmlElementNameAttribute.Name">
            <summary>
            Gets the associated XML name.
            </summary>
        </member>
        <member name="T:MindFusion.Utilities">
            <summary>
            Contains common helper methods.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new System.Windows.Rect out of the specified coordinates.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.DeviceToDoc(System.Windows.Media.DrawingContext,System.Windows.Rect)">
            <summary>
            Transforms the specified rectangle from device
            to world coordinates.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.DrawImage(System.Windows.Media.DrawingContext,System.Windows.Media.ImageSource,System.Windows.Rect,MindFusion.Diagramming.Wpf.ImageAlign,MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Draws the specified image to the specified graphics,
            using the specified destination rectangle and alignment.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.PointInSegment(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Checks whether the line segment defined by the specified
            points contain the specified point.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.PointInEllipse(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Checks whether the specified point is contained in
            the ellipse defined by the specified rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.PointInPolygon(System.Windows.Point[],System.Windows.Point)">
            <summary>
            Determines if the specified point is within the specified polygon.
            </summary>
            <remarks>
            It uses the classical polygon hit-testing algorithm:
            a horizontal ray starting at the point is extended infinitely
            rightwards and the number of polygon edges that intersect
            the ray are counted. If the number is odd, the point is
            inside the polygon.
            </remarks>
            <returns>
            true if the point is inside the polygon, false if not.
            </returns>
        </member>
        <member name="M:MindFusion.Utilities.PointInPolyRect(System.Windows.Point[],System.Windows.Point,System.Windows.Rect@)">
            <summary>
            Determines if the specified point is within the smallest
            rectangle that encloses the specified polygon.
            </summary>
            <returns>
            true or false depending on whether the point is in the rect or not.
            </returns>
        </member>
        <member name="M:MindFusion.Utilities.AddPoints(System.Windows.Point,System.Windows.Point)">
            <summary>
            Adds two points. In .NET 2.0 Point.Offset() may be used instead.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.Intersect(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Determines whether the specified line segments intersect.
            </summary>
            <returns>
            true if the segments intersect, false if not.
            </returns>
        </member>
        <member name="M:MindFusion.Utilities.Ccw(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Determines, given three points, if when travelling from the first to
            the second to the third, we travel in a counterclockwise direction.
            </summary>
            <remarks>
            1 if the movement is in a counterclockwise direction, -1 if not.
            </remarks>
        </member>
        <member name="M:MindFusion.Utilities.LineIntersect(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Like LineIntersectNaN, but semantically ambiguous as it returns Real.MinValue instead of NaN. 
            Better use LineIntersectNaN. Left for compatibility.
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <param name="n1"></param>
            <param name="n2"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Utilities.GetSymmetricPoint(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the opposite of point p with respect to specified line
            </summary>
            <param name="linePoint1"></param>
            <param name="linePoint2"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Utilities.LineIntersectNaN(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Finds the intersection point of the lines defined by the
            specified point pairs.
            </summary>
            <returns>
            The intersection point of the specified lines or
            Point(double.NaN, double.NaN) if the lines
            do not intersect.
            </returns>
        </member>
        <member name="M:MindFusion.Utilities.SegmentIntersect(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Checks whether the segments defined by the specified
            point pairs intersect and returns the intersection point.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.CalcBezierCoef(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates the bezier coefficients in the equation
            of the specified bezier curve.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.DistToBezier(System.Windows.Point,System.Collections.IList,System.Int32)">
            <summary>
            Calculates the shortest distance from the specified point
            to the specified bezier curve.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.GetRoundRect(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a graphics path of a rounded rectangle with
            the specified dimensions and round radius.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.AddRoundRect(System.Windows.Media.PathFigure,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Creates a graphics path of a rounded rectangle with
            the specified dimensions and round radius.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.AddRoundRect(System.Windows.Media.PathFigure,System.Windows.Rect,System.Double,System.Boolean)">
            <summary>
            Creates a graphics path of a rounded rectangle with
            the specified dimensions and round radius.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.DistToLineSegment(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates distance from the specified
            point to the specified line segment
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.DistancePoints(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point@,System.Windows.Point@)">
            <summary>
            Determines which are the nearest points of two lines
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="line1Point"></param>
            <param name="line2Point"></param>
            <returns>true if lines intersect</returns>
        </member>
        <member name="M:MindFusion.Utilities.DistancePoint(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates the point of the the specified line segment which determines the distance from the specified
            point to the line segment
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.Closer(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the point from the specified pair, which lies
            closer to the specified pivot.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.Farther(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the point from the specified pair, which lies
            farther from the specified pivot.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.Closer(System.Double,System.Double,System.Double)">
            <summary>
            Returns the point from the specified pair, which lies
            closer to the specified pivot.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.RectContains(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Determine whether the tested point lies in/on the bounds of the rectangle specified by corner points
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.DistToRectPoint(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Returns the nearest to pt point that lies on the outline of rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.DistToRect(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Calculates distance from the specified
            point to the specified rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.DistToPolyline(System.Windows.Point,System.Collections.IList,System.Int32)">
            <summary>
            Calculates the shortest distance from the specified
            point to the specified polyline.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.DistToPolyline(System.Windows.Point,System.Collections.IList,System.Int32,System.Int32@)">
            <summary>
            Calculates the shortest distance from the specified
            point to the specified polyline, also returning the
            index of the segment the point is closest to.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.GetNearestPt(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates the orthogonal projection of the specified point
            on the line defined be the specified point pair.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.Distance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates the distance between the specified points.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.Distance(System.Double,System.Double)">
            <summary>
            Calculates the length of the hypotenuse of a right rectangle
            whose catheti have the specified length.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.DistanceSq(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates the square of the distance between the specified points.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.GetRectIntr(System.Windows.Rect,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Calculates the intersection point between the specified
            rectangle and the line segment defined by the specified
            points.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.GetEllipseIntr(System.Windows.Rect,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Calculate the intersection point between the ellipse
            with the specified bounds and the line segment defined
            by the specified points.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.GetBezierPt(System.Collections.IList,System.Int32,System.Double)">
            <summary>
            Gets the point from the specified bezier curve,
            corresponding to the specified parameter t [0, 1].
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.ApproxBezier(System.Windows.Point[],System.Int32,System.Int32)">
            <summary>
            Approximates the specified bezier curve with a polyline.
            The specified quality parameter varies in the interval
            [1, ...) and is proportional to the number of points
            in the resulting polyline.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.PointInRect(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Checks whether the specified rectangle contains the specified point.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.CompareFiles(System.String,System.String)">
            <summary>
            Compares two files.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.CompareStreams(System.IO.Stream,System.IO.Stream)">
            <summary>
            Compares two streams. The streams should the buffered for performance.
            The streams are not closed.
            </summary>
            <returns>
            Returns the index of the first different byte or -1 if files are equal.
            </returns>
        </member>
        <member name="M:MindFusion.Utilities.SaveToFile(System.String,System.Byte[])">
            <summary>
            Saves the specified bytes to file. The file is overwritten if exists.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.SaveToFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            Saves the specified string to file.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.Radians(System.Double)">
            <summary>
            Converts the specified value from degrees to radians.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.CreateRotateTransform(System.Double,System.Windows.Point)">
            <summary>
            Creates a new rotation transformation at the specified angle
            around the specified point.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.HitTest(System.Windows.Media.Visual,System.Windows.Media.Geometry)">
            <summary>
            Hit tests a Visual against a Geometry value.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.HitTestResult(System.Windows.Media.HitTestResult)">
            <summary>
            Hit tests a Visual against a Geometry value.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.SameSide(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Determine whether p1 and p2 are on the same side of a line
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.Perpendicular(System.Windows.Vector)">
            <summary>
            Just like Left(), but with semantic hint that we do not care of sign, Right() will also work
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Utilities.LoadImage(System.String)">
            <summary>
            Loads an image from the specified file.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.LoadImage(System.IO.Stream)">
            <summary>
            Loads an image from the specified stream.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.SaveImage(System.Windows.Media.Imaging.BitmapSource,System.String)">
            <summary>
            Saves an image to the specified png file.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.SaveJpeg(System.Windows.Media.Imaging.BitmapSource,System.String)">
            <summary>
            Saves an image to the specified jpeg file.
            </summary>
            <param name="b"></param>
            <param name="filename"></param>
        </member>
        <member name="M:MindFusion.Utilities.Mid(System.Windows.Point,System.Windows.Point)">
            <summary>
            Return middle point
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Utilities.Center(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Calculates new position of execntric, so that its center coincides with container's center
            </summary>
            <param name="container"></param>
            <param name="excentric"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Utilities.SnapToDevicePixel(System.Windows.Point,System.Windows.Media.Visual)">
            <summary>
            Finds the device pixel nearest to the specified point.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.FindAncestor(System.Windows.DependencyObject,System.Type)">
            <summary>
            Finds visual tree ancestor of the specified type
            </summary>
            <param name="descendent"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Utilities.SnapToDevicePixel(System.Windows.Rect,System.Windows.Media.Visual)">
            <summary>
            Aligns the specified rect to device pixels.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.MoveLeft(System.Windows.Rect,System.Double)">
            <summary>
            Moves the left side without moving the right side of the rect.
            Returns Rect.Empty if the new left side position is to the right of the right side instead of
            causing exception or normalizing
            </summary>
            <param name="rc"></param>
            <param name="offset"></param>
        </member>
        <member name="M:MindFusion.Utilities.MoveTop(System.Windows.Rect,System.Double)">
            <summary>
            Moves the top side without moving the bottom side of the rect.
            Returns Rect.Empty if the new top side position is below the bottom side instead of
            causing exception or normalizing
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.Square(System.Double)">
            <summary>
            Returns d*d. Trivial but can save temporary variable definition or doubled computation when a more complex expression has to be squared
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:MindFusion.Utilities.MatchPointsMinLength(System.Windows.Point[],System.Int32[],System.Windows.Point[],System.Collections.Generic.List{System.Int32})">
            <summary>
            Returns an array of node anchor points which match current node links anchor point
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.CheckIntersect(System.Windows.Point,System.Windows.Rect,System.Double)">
            <summary>
            Checks if the specified rectangle and circle intersect.
            </summary>
        </member>
        <member name="M:MindFusion.Utilities.MinDistToRect(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Calculates the minimum distance between a given point and
            a given rectangle.
            </summary>
            <param name="pt"></param>
            <param name="rc"></param>
            <returns></returns>
        </member>
        <member name="T:MindFusion.Layout.TreeLayoutDirections">
            <summary>
            Specifies the direction of a tree layout.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.TreeLayoutDirections.TopToBottom">
            <summary>
            Indicates a top-to-bottom direction.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.TreeLayoutDirections.BottomToTop">
            <summary>
            Indicates a bottom-to-top direction.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.TreeLayoutDirections.LeftToRight">
            <summary>
            Indicates a left-to-right direction.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.TreeLayoutDirections.RightToLeft">
            <summary>
            Indicates a right-to-left direction.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.TreeLayoutBalance">
            <summary>
            Specifies how to order child nodes in order to produce layouts
            with custom balance.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.TreeLayoutBalance.Original">
            <summary>
            Indicates that the child order should not be changed.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.TreeLayoutBalance.Reversed">
            <summary>
            Indicates that the child order should be reversed.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.TreeLayoutBalance.LeftHeavy">
            <summary>
            Indicates that the child nodes with most total children
            will be processed first, thus producing a left-heavy layout.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.TreeLayoutBalance.RightHeavy">
            <summary>
            Indicates that the child nodes with least total children
            will be processed first, thus producing a right-heavy layout.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.TreeLayoutInfo">
            <summary>
            Contains settings for the TreeLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.TreeLayoutInfo.#ctor">
            <summary>
            Initializes a new instance of the TreeLayoutInfo class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.TreeLayoutInfo.#ctor(MindFusion.Layout.TreeLayoutDirections,System.Double,System.Double,System.Boolean,System.Windows.Size)">
            <summary>
            Initializes a new instance of the TreeLayoutInfo class.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TreeLayoutInfo.Direction">
            <summary>
            Get or set the layout direction.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TreeLayoutInfo.LevelDistance">
            <summary>
            Get or set the minimal distance between two adjacent tree levels.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TreeLayoutInfo.NodeDistance">
            <summary>
            Get or set the minimal distance between to adjacent nodes in the same level.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TreeLayoutInfo.KeepRootPosition">
            <summary>
            Get or set a flag, indicating whether the layout manager should
            preserve the position of the root node.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TreeLayoutInfo.Margins">
            <summary>
            Gets or sets the distance between the top-left corner
            of the smallest rectangle containing the arranged tree
            and the top-left point of the document bounds.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TreeLayoutInfo.StretchFactor">
            <summary>
            Gets or sets a value indicating the
            stretch factor in radial layouts.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TreeLayoutInfo.Balance">
            <summary>
            Gets or sets a value indicating the ordering of the child
            nodes in order to produce layouts with custom balance.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TreeLayoutInfo.EnableAssistants">
            <summary>
            Gets or sets a value indicating whether the "assistant" trait
            is regarded when performing the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TreeLayoutInfo.CompactAssistants">
            <summary>
            Gets or sets a value indicating whether the "assistant" trait
            is regarded when performing the layout.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.TreeLayoutTraits">
            <summary>
            Indicates item traits specific to tree layouts. Members of this enumeration
            can be used as keys in the DiagramItem.LayoutTraits hashtable.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.TreeLayoutTraits.Assistant">
            <summary>
            If the LayoutTraits value associated with a node through this
            key is true, the CenterTreeLayout treats this node as an "assistant"
            during the arrangement. If the value is false or is not present,
            the node is treated as "subordinate".
            The associated value can also be of type AssistantType if it is required
            to specify the position of the assistant node relative to its parent.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.AssistantType">
            <summary>
            Indicates the type of an assistant node in a tree.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.AssistantType.None">
            <summary>
            The node is not an assistant.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.AssistantType.Normal">
            <summary>
            The node is an assistant and its relative position is determined
            automatically by the layout.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.AssistantType.Left">
            <summary>
            The node is an assistant and it is always positioned to the left
            of its parent.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.AssistantType.Right">
            <summary>
            The node is an assistant and it is always positioned to the right
            of its parent.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.AssistantPosition">
            <summary>
            Specifies the final position of an assistant node. Assistants with type left
            or right are always positioned to the left or right respectively. The position
            of the "normal" assistants depends on their index in the children list.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.AssistantPosition.Unspecified">
            <summary>
            The node is not yet distributed.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.AssistantPosition.Left">
            <summary>
            The node is distributed to the left of its parent.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.AssistantPosition.Right">
            <summary>
            The node is distributed to the right of its parent.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.ITreeLayout.Arrange(MindFusion.Layout.INode,MindFusion.Layout.TreeLayoutInfo)">
            <summary>
            Applies the layout to the tree with the specified root using
            the specified settings.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.ITreeLayout.Arrange(MindFusion.Layout.INode,MindFusion.Layout.TreeLayoutInfo,MindFusion.Layout.LayoutProgress)">
            <summary>
            Applies the layout to the tree with the specified root using
            the specified settings and progress callback delegate.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.BorderTreeLayout">
            <summary>
            Implements a bordered tree layout algorithm.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.BorderTreeLayout.Arrange(MindFusion.Layout.INode,MindFusion.Layout.TreeLayoutInfo)">
            <summary>
            Applies the layout to the tree with the specified root using
            the specified settings.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.BorderTreeLayout.Arrange(MindFusion.Layout.INode,MindFusion.Layout.TreeLayoutInfo,MindFusion.Layout.LayoutProgress)">
            <summary>
            Applies the layout to the tree with the specified root using
            the specified settings and progress callback delegate.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.BorderTreeLayout._x">
            <summary>
            Temporary variable to store x-values in recursive algorithms.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.BorderTreeLayout._y">
            <summary>
            Temporary variable to store y-values in recursive algorithms.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.CenterTreeLayout">
            <summary>
            Implements a centered tree layout algorithm.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CenterTreeLayout.Arrange(MindFusion.Layout.INode,MindFusion.Layout.TreeLayoutInfo)">
            <summary>
            Applies the layout to the tree with the specified root using
            the specified settings.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CenterTreeLayout.Arrange(MindFusion.Layout.INode,MindFusion.Layout.TreeLayoutInfo,MindFusion.Layout.LayoutProgress)">
            <summary>
            Applies the layout to the tree with the specified root using
            the specified settings and progress callback layout.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CenterTreeLayout.BranchBounds(MindFusion.Layout.TreeNode)">
            <summary>
            Calculates the bounding rectangle of the tree branch defined by
            the specified node. The result is the smallest rectangle containing
            all children of the specified node and the node itself.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CenterTreeLayout.BranchDistance(MindFusion.Layout.TreeLayoutInfo,MindFusion.Layout.TreeNode,MindFusion.Layout.TreeNode)">
            <summary>
            Calculate the distance between the branches, whose
            root nodes are specified as arguments.
            </summary>
            <param name="layoutInfo">
            Specifies the layout parameters.
            </param>
            <param name="node1">
            The root node of the first branch.
            </param>
            <param name="node2">
            The root note of the second branch.
            </param>
            <returns>
            The distance between the branches.
            </returns>
        </member>
        <member name="M:MindFusion.Layout.CenterTreeLayout.EnumerateLevels(MindFusion.Layout.TreeNode,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{MindFusion.Layout.TreeNode}})">
            <summary>
            Enumerates the subnodes of the specified node and adds them to
            the specified list, sorted by their level.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CenterTreeLayout.OffsetBranch(MindFusion.Layout.TreeNode,System.Double,System.Double)">
            <summary>
            Offset a branch of the tree with the specified values.
            </summary>
            <param name="nodeFrom">
            The root node of the branch to offset.
            </param>
            <param name="xoff">
            The x-axis offset.
            </param>
            <param name="yoff">
            The y-axis offset.
            </param>
        </member>
        <member name="T:MindFusion.Layout.RadialTreeLayout">
            <summary>
            Implements a radial tree layout algorithm.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.RadialTreeLayout.Arrange(MindFusion.Layout.INode,MindFusion.Layout.TreeLayoutInfo)">
            <summary>
            Applies the algorithm to the tree with the specified root using
            the specified settings.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.RadialTreeLayout.Arrange(MindFusion.Layout.INode,MindFusion.Layout.TreeLayoutInfo,MindFusion.Layout.LayoutProgress)">
            <summary>
            Applies the algorithm to the tree with the specified root using
            the specified settings and progress callback delegate.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.HvTreeLayout">
            <summary>
            Implements an HV tree layout algorithm.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.HvTreeLayout.Arrange(MindFusion.Layout.INode,MindFusion.Layout.TreeLayoutInfo)">
            <summary>
            Applies the algorithm to the tree with the specified root using
            the specified settings.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.HvTreeLayout.Arrange(MindFusion.Layout.INode,MindFusion.Layout.TreeLayoutInfo,MindFusion.Layout.LayoutProgress)">
            <summary>
            Applies the algorithm to the tree with the specified root using
            the specified settings and progress callback delegate.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.HvTreeLayout.ArrangeNode(MindFusion.Layout.TreeNode,System.Windows.Point,System.Boolean,System.Boolean)">
            <summary>
            Places the specified node at the specified position, then
            recursively invokes itself for the nodes' children. Returns
            the size of the arranged subtree.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.HvTreeLayout.MaxAbs(System.Double,System.Double)">
            <summary>
            Returns the number having greater absolute value.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.HvTreeLayout.CheckBinary(MindFusion.Layout.TreeNode)">
            <summary>
            Checks whether the tree with the specified root is a strict
            binary tree, that is, whether each non-leaf node in the tree
            has exactly two children.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Shapes">
            <summary>
            Provides alternative method of access to the WpfDiagram predefined
            shapes, that allows code completion and Intellisense support, which is
            not available when using Shape.FromId(). The accessor properties are
            generating using the following code:
            
            			TextWriter writer = new StreamWriter(@"D:\shapes.txt");
            			foreach (Shape shape in Shape.Shapes)
            			{
            				writer.WriteLine("static public Shape " + shape.Id);
            				writer.WriteLine("{");
            				writer.WriteLine("\tget { return Shape.FromId(\"" + shape.Id + "\"); }");
            				writer.WriteLine("}");
            				writer.WriteLine();
            				writer.Flush();
            			}
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Actor">
            <summary>
            Gets the Actor predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Alternative">
            <summary>
            Gets the Alternative predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Arrow1">
            <summary>
            Gets the Arrow1 predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Arrow2">
            <summary>
            Gets the Arrow2 predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Arrow3">
            <summary>
            Gets the Arrow3 predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Arrow4">
            <summary>
            Gets the Arrow4 predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Arrow5">
            <summary>
            Gets the Arrow5 predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Arrow6">
            <summary>
            Gets the Arrow6 predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Arrow7">
            <summary>
            Gets the Arrow7 predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Arrow8">
            <summary>
            Gets the Arrow8 predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Arrow9">
            <summary>
            Gets the Arrow9 predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BeginLoop">
            <summary>
            Gets the BeginLoop predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Cloud">
            <summary>
            Gets the Cloud predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Collate">
            <summary>
            Gets the Collate predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.ConeDown">
            <summary>
            Gets the ConeDown predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.ConeUp">
            <summary>
            Gets the ConeUp predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.ConnectedIssues">
            <summary>
            Gets the ConnectedIssues predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.CreateRequest">
            <summary>
            Gets the CreateRequest predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Cross">
            <summary>
            Gets the Cross predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Cube">
            <summary>
            Gets the Cube predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Cylinder">
            <summary>
            Gets the Cylinder predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Database">
            <summary>
            Gets the Database predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.DataTransmition">
            <summary>
            Gets the DataTransmition predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.DDelay">
            <summary>
            Gets the DDelay predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Decision">
            <summary>
            Gets the Decision predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Decision2">
            <summary>
            Gets the Decision2 predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Delay">
            <summary>
            Gets the Delay predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.DInDelay">
            <summary>
            Gets the DInDelay predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.DirectAccessStorage">
            <summary>
            Gets the DirectAccessStorage predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.DiskStorage">
            <summary>
            Gets the DiskStorage predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Display">
            <summary>
            Gets the Display predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.DividedEvent">
            <summary>
            Gets the DividedEvent predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.DividedProcess">
            <summary>
            Gets the DividedProcess predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Document">
            <summary>
            Gets the Document predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.DOutDelay">
            <summary>
            Gets the DOutDelay predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Ellipse">
            <summary>
            Gets the Ellipse predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.EndLoop">
            <summary>
            Gets the EndLoop predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.ExternalOrganization">
            <summary>
            Gets the ExternalOrganization predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.ExternalProcess">
            <summary>
            Gets the ExternalProcess predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.File">
            <summary>
            Gets the File predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.FramedRectangle">
            <summary>
            Gets the FramedRectangle predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Gate">
            <summary>
            Gets the Gate predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Heart">
            <summary>
            Gets the Heart predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Heptagon">
            <summary>
            Gets the Heptagon predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Hourglass">
            <summary>
            Gets the Hourglass predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Input">
            <summary>
            Gets the Input predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.InternalStorage">
            <summary>
            Gets the InternalStorage predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Interrupt">
            <summary>
            Gets the Interrupt predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Interrupt2">
            <summary>
            Gets the Interrupt2 predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.IsoProcess">
            <summary>
            Gets the IsoProcess predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Junction">
            <summary>
            Gets the Junction predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Lightning">
            <summary>
            Gets the Lightning predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.LinedDocument">
            <summary>
            Gets the LinedDocument predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.ManualOperation">
            <summary>
            Gets the ManualOperation predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Merge">
            <summary>
            Gets the Merge predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.MessageFromUser">
            <summary>
            Gets the MessageFromUser predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.MessageToUser">
            <summary>
            Gets the MessageToUser predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Microform">
            <summary>
            Gets the Microform predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.MicroformProcessing">
            <summary>
            Gets the MicroformProcessing predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.MicroformRecording">
            <summary>
            Gets the MicroformRecording predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.MultiDocument">
            <summary>
            Gets the MultiDocument predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.MultiProc">
            <summary>
            Gets the MultiProc predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Octagon">
            <summary>
            Gets the Octagon predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.OfflineStorage">
            <summary>
            Gets the OfflineStorage predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.OffpageConnection">
            <summary>
            Gets the OffpageConnection predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.OffpageReference">
            <summary>
            Gets the OffpageReference predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Or">
            <summary>
            Gets the Or predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Pentagon">
            <summary>
            Gets the Pentagon predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.PrimitiveFromCall">
            <summary>
            Gets the PrimitiveFromCall predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.PrimitiveToCall">
            <summary>
            Gets the PrimitiveToCall predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Procedure">
            <summary>
            Gets the Procedure predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Process">
            <summary>
            Gets the Process predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Prysm">
            <summary>
            Gets the Prysm predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.PunchedCard">
            <summary>
            Gets the PunchedCard predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.PyramidDown">
            <summary>
            Gets the PyramidDown predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.PyramidUp">
            <summary>
            Gets the PyramidUp predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Rectangle">
            <summary>
            Gets the Rectangle predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.RoundRect">
            <summary>
            Gets the RoundRect predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.RSave">
            <summary>
            Gets the RSave predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Save">
            <summary>
            Gets the Save predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Sort">
            <summary>
            Gets the Sort predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Sphere">
            <summary>
            Gets the Sphere predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Star">
            <summary>
            Gets the Star predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Start">
            <summary>
            Gets the Start predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Tape">
            <summary>
            Gets the Tape predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.Terminator">
            <summary>
            Gets the Terminator predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.TransmittalTape">
            <summary>
            Gets the TransmittalTape predefined shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnStartMessage">
            <summary>
            Gets the BpmnStartMessage predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnIntermediateMessage">
            <summary>
            Gets the BpmnIntermediateMessage predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnEndMessage">
            <summary>
            Gets the BpmnEndMessage predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnStartTimer">
            <summary>
            Gets the BpmnStartTimer predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnIntermediateTimer">
            <summary>
            Gets the BpmnIntermediateTimer predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnIntermediateError">
            <summary>
            Gets the BpmnIntermediateError predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnEndError">
            <summary>
            Gets the BpmnEndError predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnIntermediateCancel">
            <summary>
            Gets the BpmnIntermediateCancel predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnEndCancel">
            <summary>
            Gets the BpmnEndCancel predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnIntermediateCompensation">
            <summary>
            Gets the BpmnIntermediateCompensation predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnEndCompensation">
            <summary>
            Gets the BpmnEndCompensation predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnStartRule">
            <summary>
            Gets the BpmnStartRule predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnIntermediateRule">
            <summary>
            Gets the BpmnIntermediateRule predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnStartLink">
            <summary>
            Gets the BpmnStartLink predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnIntermediateLink">
            <summary>
            Gets the BpmnIntermediateLink predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnEndLink">
            <summary>
            Gets the BpmnEndLink predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnEndTerminate">
            <summary>
            Gets the BpmnEndTerminate predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnStartMultiple">
            <summary>
            Gets the BpmnStartMultiple predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnIntermediateMultiple">
            <summary>
            Gets the BpmnIntermediateMultiple predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnEndMultiple">
            <summary>
            Gets the BpmnEndMultiple predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnInclusive">
            <summary>
            Gets the BpmnInclusive predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnParallelFork">
            <summary>
            Gets the BpmnParallelFork predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnComplex">
            <summary>
            Gets the BpmnComplex predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnEventBasedXor">
            <summary>
            Gets the BpmnEventBasedXor predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shapes.BpmnDataBasedXor">
            <summary>
            Gets the BpmnDataBasedXor predefined shape.
            </summary>
            <value>
            An instance of the Shape class representing the predefined shape.
            </value>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ShapeNodeState">
            <summary>
            Contains a snapshot of the internal state of a ShapeNode.
            Instances of this class are used to store the state of nodes
            for later undo or redo operations. If you derive from ShapeNode
            and need to implement undo support for the additional internal state
            defined by your class, do so by deriving from ShapeNodeState and
            overriding the ShapeNode.CreateState, ShapeNode.SaveState
            and ShapeNode.RestoreState methods.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DiagramItemState">
            <summary>
            Contains a snapshot of the internal state of a diagram item.
            Instances of this class are used to store the state of items
            for later undo or redo operations.
            </summary>
        </member>
        <member name="T:MindFusion.Porting">
            <summary>
            Exposes methods that implement various WpfDiagram features
            that are otherwise not directly supported by the WPF library.
            </summary>
        </member>
        <member name="M:MindFusion.Porting.Add(System.Windows.Media.PathGeometry,System.Windows.Point,System.Windows.Media.PathFigure)">
            <summary>
            Adds path segment in new figure
            </summary>
        </member>
        <member name="M:MindFusion.Porting.Add(System.Windows.Media.PathGeometry,System.Windows.Media.PathSegment)">
            <summary>
            Adds path segment to last figure
            </summary>
            <param name="pg"></param>
            <param name="seg"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Porting.Fit(System.String,System.Double,MindFusion.Diagramming.Wpf.ITextAttributes)">
            <summary>
            Calculates how many characters from the specified
            text would fit in the specified space when drawn
            with the specified font.
            </summary>
        </member>
        <member name="M:MindFusion.Porting.Points(System.Windows.Media.PathSegment)">
            <summary>
            Returns the points in a flat line segment. Passing not flattened segments will cause exception
            </summary>
            <param name="seg"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Layout.Path.Contains(MindFusion.Layout.INode)">
            <summary>
            Checks whether the specified node is a participant in the path.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Path.Contains(MindFusion.Layout.ILink)">
            <summary>
            Checks whether the specified link is a participant in the path.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Path.SameCycle(MindFusion.Layout.Path)">
            <summary>
            Determines whether the current path traverses the same
            nodes as the specified path in the same order, disregard
            which one is the starting node.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Path.SameCycle(System.Collections.ArrayList)">
            <summary>
            The same as the above but the starting nodes need to be the same.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Path.GetWeight(System.Boolean,System.Boolean)">
            <summary>
            Gets the length of the path expressed
            as a sum of the weights of all nodes and
            links, composing the path.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Path.Add(MindFusion.Layout.ILink,MindFusion.Layout.INode)">
            <summary>
            Append the node and the link to the path.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Path.Add(MindFusion.Layout.INode)">
            <summary>
            Append the node to the path.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.Path.Nodes">
            <summary>
            Gets the list of all nodes connected by the path.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.Path.Links">
            <summary>
            Gets a list of all links composing the path.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.Path.Items">
            <summary>
            Gets a list with all items (nodes and links) composing the path.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.Path.Length">
            <summary>
            Gets the length of the path.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.PathFinder.FindAllPaths(MindFusion.Layout.IGraph,MindFusion.Layout.INode,MindFusion.Layout.INode)">
            <summary>
            Finds and returns all paths starting from node 'from' and
            ending at node 'to'. Returns empty collection if no
            path exists.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.PathFinder.FindAllPaths(MindFusion.Layout.IGraph,MindFusion.Layout.INode,MindFusion.Layout.INode,System.Int32)">
            <summary>
            Finds and returns all paths starting from node 'from' and
            ending at node 'to'. Returns empty collection if no
            path exists.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.PathFinder.FindShortestPath(MindFusion.Layout.IGraph,MindFusion.Layout.INode,MindFusion.Layout.INode)">
            <summary>
            Finds and returns the shortest path between from and to.
            Returns null if no path exists.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.PathFinder.FindShortestPath(MindFusion.Layout.IGraph,MindFusion.Layout.INode,MindFusion.Layout.INode,System.Boolean,System.Boolean)">
            <summary>
            Finds and returns the shortest path between from and to,
            considering the weight of the nodes, the weight of the 
            links or both.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.PathFinder.FindLongestPath(MindFusion.Layout.IGraph,MindFusion.Layout.INode,MindFusion.Layout.INode)">
            <summary>
            Finds the longest path between two nodes.
            Returns null if no path exists.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.PathFinder.FindLongestPath(MindFusion.Layout.IGraph)">
            <summary>
            Finds the longest path in a graph.
            Returns null if path is not found.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.PathFinder.FindLongestPath(MindFusion.Layout.IGraph,System.Int64)">
            <summary>
            Finds the longest path in the graph. The time limit
            specifies the maximum duration of the search process
            in milliseconds.
            Returns null if no path exists.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.PathFinder.FindCycle(MindFusion.Layout.IGraph,MindFusion.Layout.INode)">
            <summary>
            Detects whether the specified node participates in a cycle.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.PathFinder.FindCycle(MindFusion.Layout.IGraph)">
            <summary>
            Detects whether there is a cycle in a graph.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.Layer">
            <summary>
            Represents a strongly-typed list of GraphNode objects.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.NodePriorityComparer">
            <summary>
            Compares nodes by priority.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.NodePriorityComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the NodePriorityComparer class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.NodePriorityComparer.Compare(MindFusion.Layout.GraphNode,MindFusion.Layout.GraphNode)">
            <summary>
            IComparer.Compare implementation.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.NodeComparer">
            <summary>
            Compares nodes by barycenters.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.NodeComparer.#ctor(MindFusion.Layout.Layer,System.Boolean)">
            <summary>
            Initializes a new instance of the NodeComparer class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.NodeComparer.Compare(MindFusion.Layout.GraphNode,MindFusion.Layout.GraphNode)">
            <summary>
            IComparer.Compare implementation.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.Direction">
            <summary>
            Specifies direction.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.Direction.Straight">
            <summary>
            Indicates either left-to-right or top-to-bottom direction.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.Direction.Reversed">
            <summary>
            Indicates either right-to-left or bottom-to-top direction.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.LayeredLayoutTraits">
            <summary>
            Indicates item traits specific to layered layouts. Members of this enumeration
            can be used as keys in the DiagramItem.LayoutTraits hashtable.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.LayeredLayoutTraits.Layer">
            <summary>
            The number associated with this key specifies the index of the layer
            the layout should attempt to place the node to. Specifying a negative
            number indicates a layer starting from the last. For example, -1 would
            indicate the last layer, -2 - the layer before the last, and so on.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.LayeredLayoutInfo">
            <summary>
            Contains settings for the LayeredLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayeredLayoutInfo.#ctor">
            <summary>
            Initializes a new instance of the LayeredLayoutInfo class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayeredLayoutInfo.#ctor(MindFusion.Layout.Orientation,System.Double,System.Double,System.Windows.Size)">
            <summary>
            Initializes a new instance of the LayeredLayoutInfo class.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.LayeredLayoutInfo.Orientation">
            <summary>
            Gets or sets a the overall orientation of the arranged diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.LayeredLayoutInfo.Direction">
            <summary>
            Gets or sets the direction of the arranged diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.LayeredLayoutInfo.LayerDistance">
            <summary>
            Gets or sets the desired distance between layer axis lines.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.LayeredLayoutInfo.NodeDistance">
            <summary>
            Gets or sets the desired distance between adjacent nodes in a layer.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.LayeredLayoutInfo.Margins">
            <summary>
            Gets or sets the distance between the top-left corner
            of the smallest rectangle containing the arranged diagram
            and the top-left point of the document bounds.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.LayeredLayoutInfo.SplitLayers">
            <summary>
            Gets or sets a value indicating whether to split layers
            that are much wider than the other layers.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.LayeredLayoutInfo.SwapPairsIterations">
            <summary>
            Gets or sets a value indicating whether to try to optimize crossings
            by performing sequential swapping of adjacent nodes in all levels.
            </summary>
            <remarks>
            Pair swapping requires substantial amount of time for large and
            semi-large graphs.
            </remarks>
        </member>
        <member name="P:MindFusion.Layout.LayeredLayoutInfo.LinksCompactFactor">
            <summary>
            Gets or sets a value indicating how much to compact the outermost arrows.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.LayeredLayoutInfo.TimeLimit">
            <summary>
            Gets or sets a time-out value for the path-finding part
            of the layered layout algorithm.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.LayeredLayoutInfo.EnableCustomLayers">
            <summary>
            Gets or sets a value indicating whether the layered layout will honor
            the LayeredLayoutTraits.Layer flags.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.LayeredLayoutInfo.Statistics">
            <summary>
            Gets layout-specific information about the nodes and links participating
            in the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.LayeredLayoutInfo.EnforceLinkFlow">
            <summary>
            Gets or sets a value indicating whether the layout will force all links to
            go in the same direction. If the supplied graph has cycles, it will be made
            acyclic prior the layout.
            </summary>
            <remarks>
            EnableCustomLayers and SplitLayers are ignored if this property is set to true.
            </remarks>
        </member>
        <member name="T:MindFusion.Layout.LayeredLayout">
            <summary>
            Performs layered layout on a graph.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayeredLayout.#ctor">
            <summary>
            Initializes a new instance of the LayeredLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayeredLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.LayeredLayoutInfo)">
            <summary>
            Applies the layout to the specified graph using the specified settings.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayeredLayout.BuildGraph(MindFusion.Layout.Graph,System.Collections.Generic.Dictionary{MindFusion.Graphs.Vertex,MindFusion.Layout.GraphNode},System.Collections.Generic.Dictionary{MindFusion.Graphs.Edge,MindFusion.Layout.GraphLink})">
            <summary>
            Creates a GraphLib.Graph object out of the specified Graph object.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayeredLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.LayeredLayoutInfo,MindFusion.Layout.LayoutProgress)">
            <summary>
            Applies the layout to the specified graph using the specified settings
            and progress callback delegate.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayeredLayout.AssignCoordinates">
            <summary>
            Assigns nodes positions using the precalculated
            grid positions of the nodes within all layers.
            See the paper "A Fast Layout Algorithm for k-Level Graphs",
            by Christoph Buchheim, Michael Junger and Sebastian Leipert
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayeredLayout.Apply">
            <summary>
            Assigns nodes positions using the precalculated
            grid positions of the nodes within all layers.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayeredLayout.Layout">
            <summary>
            Move nodes to their barycenters, according to their
            priority but doing so without any node swapping
            (i.e. the nodes' order remains the same).
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayeredLayout.Compact">
            <summary>
            Makes the dummy nodes at the beginning and
            at the end of each level closer to each other.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayeredLayout.MinimizeCrossings">
            <summary>
            Tries to minimize crossings across all levels.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayeredLayout.CalcUpData(System.Int32)">
            <summary>
            Calculates up barycenters and linkCount for the nodes
            in the layer whose index is specified in the parameter.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayeredLayout.CalcDownData(System.Int32)">
            <summary>
            Calculates down barycenters and linkCount for the nodes
            in the layer whose index is specified in the parameter.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayeredLayout.MinimizeCrossings(System.Boolean,System.Int32)">
            <summary>
            Tries to minimize crossings between layers 'layer' and
            'layer' + 1 if down is true and between layers 'layer' - 1
            and 'layer' if down is false.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayeredLayout.SwapPairs">
            <summary>
            This method performs a single pass over the graph
            in an attempt to reduce link crossings through
            neighbours swapping.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayeredLayout.CountCrossings(System.Int32,System.Int32)">
            <summary>
            Returns the total number of crossings
            for the links inbetween the specified layers.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayeredLayout.CalcBaryCenter(MindFusion.Layout.GraphNode)">
            <summary>
            Calculates the barycenter of a node.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.LayeredLayoutNodeData._UniqueGlobalIndex">
            <summary>
            Gets or sets a supposedly unique index in the context of a single layout.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.LayeredLayoutStatistics">
            <summary>
            Encapsulates information about a layered layout which has already complete.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayeredLayoutStatistics.#ctor">
            <summary>
            Initializes a new instance of the LayeredLayoutStatistics class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayeredLayoutStatistics.AddNode(MindFusion.Layout.GraphNode)">
            <summary>
            Adds (or updates if already present) the specified node to the statistics.
            The node is expected to supply a LayeredLayoutNodeData object through its
            Data property.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayeredLayoutStatistics.AddLink(MindFusion.Layout.GraphLink)">
            <summary>
            Adds (or updates if already present) the specified link to the statistics.
            The link is expected to supply the necessary data through its GetData method.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.LayeredLayoutStatistics.nodeLayerIndices">
            <summary>
            A mapping between nodes and their assigned layers.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.LayeredLayoutStatistics.nodeGridPositions">
            <summary>
            A mapping between nodes and their assigned grid positions.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.LayeredLayoutStatistics.linkLayerCount">
            <summary>
            A mapping between links and the number of layers they run through.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.LayeredLayoutStatistics.layerCount">
            <summary>
            The total number of layers in the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.LayeredLayoutStatistics.NodeLayerIndices">
            <summary>
            Gets a mapping between nodes and their assigned layers.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.LayeredLayoutStatistics.NodeGridPositions">
            <summary>
            Gets a mapping between nodes and their assigned grid positions.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.LayeredLayoutStatistics.LinkLayerCount">
            <summary>
            Gets a mapping between links and the number of layers they run through.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.LayeredLayoutStatistics.LayerCount">
            <summary>
            Gets or sets the total number of layers in the layout.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Visitors.InvalidAreaUpdater">
            <summary>
            Creates a union of the invalid areas of all visited objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Visitors.InvalidAreaUpdater.#ctor(System.Windows.Rect,System.Boolean)">
            <summary>
            Initializes a new instance of the InvalidAreaUpdater class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Visitors.InvalidAreaUpdater.Accept(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            CollectionVisitor.Accept override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Visitors.InvalidAreaUpdater.GetInvalidRect">
            <summary>
            Gets the accumulated area.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Behaviors.CustomTypesBehavior">
            <summary>
            This class is used when the diagram behavior is set to Behavior.Custom.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.CustomTypesBehavior.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the CustomTypesBehavior class.
            </summary>
            <param name="diagram">
            The Diagram this behavior will be associated with.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.CustomTypesBehavior.CreateNode">
            <summary>
            LinkNodesBehavior.CreateNode override.
            </summary>
            <returns>
            An instance of the DiagramNode class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.CustomTypesBehavior.CreateLink">
            <summary>
            BehaviorBase.CreateLink override.
            </summary>
            <returns>
            An instance of the DiagramLink class.
            </returns>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.CompositeCmd">
            <summary>
            Represents a set of Command instances as a single operation.
            Undoing or redoing the composite action, respectively undoes
            or redoes all its constituent subactions at the same time.
            </summary>
            <remarks>
            To add a subaction to the composite call the AddSubCmd method.
            The Execute method executes all subactions and adds the composite
            to undo manager's history.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CompositeCmd.#ctor(MindFusion.Diagramming.Wpf.Diagram,System.String)">
            <summary>
            Initializes a new instance of the CompositeCmd class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CompositeCmd.#ctor(MindFusion.Diagramming.Wpf.Diagram,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the CompositeCmd class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CompositeCmd.Execute">
            <summary>
            Executes the command, adding it to the command history.
            </summary>
            <remarks>
            Subcommands are executed or redone in the same order in which
            they were added to the composite, and are undone in the opposite order.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CompositeCmd.Execute(System.Boolean)">
            <summary>
            Carries out the command action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CompositeCmd.Undo">
            <summary>
            Undoes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CompositeCmd.Redo">
            <summary>
            Redoes the command action.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.CompositeCmd.SubCommands">
            <summary>
            Gets a collection of all command objects contained
            within the composite one.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.CascadeLayout">
            <summary>
            Performs cascading layout on simple, connected graphs.
            </summary>
            <remarks>
            The cascade layout places vertices on a virtual grid and arranges edges orthogonally,
            such that if the source graph is planar it is guaranteed that all edges will have no
            more than two bends and will not intersect.
            </remarks>
        </member>
        <member name="M:MindFusion.Layout.CascadeLayout.#ctor">
            <summary>
            Initializes a new instance of the CascadeLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CascadeLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.CascadeLayoutInfo)">
            <summary>
            Applies the layout to the specified graph using the specified settings.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CascadeLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.CascadeLayoutInfo,MindFusion.Layout.LayoutProgress)">
            <summary>
            Applies the layout to the specified graph using the specified settings
            and progress callback delegate.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CascadeLayout.VertexSize(MindFusion.Graphs.Vertex)">
            <summary>
            Calculates the size of the specified GraphLib vertex as a
            GraphLib.Size object.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.CascadeLayout.igraph">
            <summary>
            The graph to be arranged.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.CascadeLayout.info">
            <summary>
            The layout settings.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.CascadeLayout.graph">
            <summary>
            The GraphLib representation of the graph to be arranged.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.CascadeLayout.graphToDiagMapNodes">
            <summary>
            Maps GraphLib vertices to INode objects.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.CascadeLayout.graphToDiagMapLinks">
            <summary>
            Maps GraphLib edges to ILink objects.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.CascadeLayout.Statistics">
            <summary>
            Gets layout-specific information about the edges and vertices participating
            in the layout.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.VisualBrushPaginator">
            <summary>
            Implements pagination of a Diagram document.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.VisualBrushPaginator.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Contructs new instance
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.VisualBrushPaginator.#ctor(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.PrintOptions)">
            <summary>
            Contructs new instance
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.VisualBrushPaginator.GetPage(System.Int32)">
            <summary>
            Override DocumentPaginator.GetPage(int pageNumber)
            </summary>
            <param name="pageNumber"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.VisualBrushPaginator.GetPageRect(System.Int32)">
            <summary>
            Returns the coordinates of the diagram region that is contained within a page.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.VisualBrushPaginator.PrintHeader(System.Windows.Media.DrawingContext,System.Int32)">
            <summary>
            Renders the print page header during printing and previewing.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.VisualBrushPaginator.IsPageCountValid">
            <summary>
            Override DocumentPaginator.IsPageCountValid
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.VisualBrushPaginator.PageCount">
            <summary>
            Override DocumentPaginator.PageCount
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.VisualBrushPaginator.PageSize">
            <summary>
            Override DocumentPaginator.PageSize
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.VisualBrushPaginator.Source">
            <summary>
            Override DocumentPaginator.Source
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ShapeNodeProperties">
            <summary>
            Stores the values of ShapeNode properties during undo / redo operations.
            If you need to implement undo support for the additional properties defined by
            a class derived from ShapeNode, do so by deriving from ShapeNodeProperties
            and overriding the ShapeNode.SaveProperties, ShapeNode.RestoreProperties,
            and ShapeNode.CreateProperties methods.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DiagramNodeProperties">
            <summary>
            The base class for classes that store the properties
            for a DiagramNode-derived items during undo / redo operations.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeProperties.#ctor">
            <summary>
            Initializes a new instance of the DiagramNodeProperties class.
            </summary>
        </member>
        <member name="T:MindFusion.Geometry2D.PointI">
            <summary>
            Point with integer coordinates.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.PointI.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the PointI class.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.PointI.ToPoint">
            <summary>
            Converts the current point to a System.Windows.Point object.
            </summary>
        </member>
        <member name="F:MindFusion.Geometry2D.PointI.X">
            <summary>
            The X coordinate of this point.
            </summary>
        </member>
        <member name="F:MindFusion.Geometry2D.PointI.Y">
            <summary>
            The Y coordinate of this point.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.ModifyItemCmd">
            <summary>
            Implements changes of item's size and position.
            </summary>
            <remarks>
            Instances of this class are implicitly created by WpfDiagram
            in response to moving or resizing items, either interactively or
            programmatically. References to those instances are passed to
            handlers of the ActionRecorded, ActionUndone and ActionRedone events.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ModifyItemCmd.#ctor(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Initializes a new instance of the ModifyItemCmd class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ModifyItemCmd.Execute(System.Boolean)">
            <summary>
            Carries out the command action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ModifyItemCmd.Undo">
            <summary>
            Undoes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ModifyItemCmd.Redo">
            <summary>
            Redoes the command action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ModifyItemCmd.Adopt(MindFusion.Diagramming.Wpf.Commands.Command)">
            <summary>
            Merges adjacent commands in the history queue if they are related.
            </summary>
            <param name="command">
            The Command that might be adopted by this command.
            </param>
            <returns>
            true if the specified command has been adopted; otherwise, false.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.ModifyItemCmd.Item">
            <summary>
            Gets a reference to the modified item.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.LinkSegmentsState">
            <summary>
            Holds information that define the state of link segments.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.HtmlBuilder">
            <summary>
            Provides methods to create and use HTML client side image maps.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.HtmlBuilder.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the HtmlBuilder class.
            </summary>
            <param name="diagram">
            The Diagram object whose contents will generate the image map.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.HtmlBuilder.CreateImageMap(System.String)">
            <summary>
            Creates an HTML code for a MAP tag.
            </summary>
            <param name="mapName">
            A string that represents the NAME attribute in the &lt;MAP&gt; tag.
            </param>
            <returns>
            A string value containing the generated HTML code.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.HtmlBuilder.CreateCellAreas(MindFusion.Diagramming.Wpf.TableNode)">
            <summary>
            Generates an AREA html tags for the cells of the specified tableNode.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.HtmlBuilder.CreateExpBtnArea(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Generates an AREA html tag for the expander manipulator of the specified node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.HtmlBuilder.CreateUseMapAttr(System.String)">
            <summary>
            Generates a USEMAP attribute to be used within an &lt;IMG&gt; tag.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.HtmlBuilder.CreateImageHtml(System.String,System.String,System.String,System.String)">
            <summary>
            Generates an image map HTML code.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.HtmlBuilder.DocToClient(System.Windows.Point)">
            <summary>
            Converts the specified point from document to client coordinates.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.HtmlBuilder.CreatePolyArea(MindFusion.Diagramming.Wpf.DiagramItem,System.Windows.Media.PathFigure)">
            <summary>
            Generates a POLY html tag for the polygon defined
            by the points in the specified collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.HtmlBuilder.CreateRectArea(MindFusion.Diagramming.Wpf.DiagramItem,System.Windows.Rect)">
            <summary>
            Generates a RECT html tag for the specified rectangle.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.HtmlBuilder.LinkTarget">
            <summary>
            Gets or sets the value of the TARGET attribute of AREA tags.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.HtmlBuilder.AreasForTableCells">
            <summary>
            Gets or sets a value indicating whether AREA tags
            are generated for table cells.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.HtmlBuilder.ExpandBtnHyperLink">
            <summary>
            Gets or sets the hyperlink assigned to AREA tags generated for
            the +/- buttons of expandable nodes.
            </summary>
            <remarks>
            If the value of this property is not an empty string, the
            HtmlBuilder creates &lt;AREA>&gt; tags for the expand/collapse
            buttons displayed besides nodes.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.HtmlBuilder.Scale">
            <summary>
            Gets or sets the scale factor for the generated image.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.HtmlBuilder.CreatingArea">
            <summary>
            Raised just before a new AREA tag is added to the image map.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.AreaEventArgs">
            <summary>
            Contains arguments passed to handlers of the CreatingArea event
            of the HtmlBuilder class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AreaEventArgs.#ctor(System.String,MindFusion.Diagramming.Wpf.DiagramItem,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the AreaEventArgs class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AreaEventArgs.#ctor(System.String,MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Initializes a new instance of the AreaEventArgs class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AreaEventArgs.AreaTag">
            <summary>
            Gets or sets the HTML AREA tag created by HtmlBuilder.
            You can insert additional attributes or JavaScript event
            handlers into that string.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AreaEventArgs.Item">
            <summary>
            Gets the diagram element represented by AreaTag in the image map.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AreaEventArgs.Column">
            <summary>
            Gets the index of a column if the event is raised for a table cell.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AreaEventArgs.Row">
            <summary>
            Gets the index of a row if the event is raised for a table cell.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.AreaEventHandler">
            <summary>
            Represents methods that will handle the CreatingArea event of
            the HtmlBuilder class.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            An AreaEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Layout.GridLayoutInfo">
            <summary>
            Contains settings for the GridLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.GridLayoutInfo.#ctor">
            <summary>
            Initializes a new instance of the GridLayoutInfo class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.GridLayoutInfo.#ctor(System.Int32,System.Double,System.Windows.Size)">
            <summary>
            Initializes a new instance of the GridLayoutInfo class.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.GridLayoutInfo.Iterations">
            <summary>
            Gets or sets for how many iterations to run the grid layout algorithm.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.GridLayoutInfo.GridSize">
            <summary>
            Gets or sets the desired distance between adjacent grid points.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.GridLayoutInfo.Margins">
            <summary>
            Gets or sets the distance between the top-left corner
            of the smallest rectangle containing the arranged tree
            and the top-left point of the document bounds.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.GridLayoutInfo.StartNode">
            <summary>
            Gets or sets the node to be placed at the upper left corner of the grid.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.GridLayoutInfo.EndNode">
            <summary>
            Gets or sets the node to be placed at the lower right corner of the grid.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.GridLayoutInfo.RandomSeed">
            <summary>
            Gets or sets the randomization seed to use for generating
            random node positions.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.GridLayoutInfo.UseLongestPath">
            <summary>
            Gets or sets a value indicating whether to arrange nodes using
            the longest path in the graph as the main diagonal in the grid.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.GridLayoutInfo.TimeLimit">
            <summary>
            Gets or sets a time-out value for the path-finding part
            of the grid layout algorithm.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.GridLayout">
            <summary>
            Implements a grid graph layout algorithm.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.GridLayout.#ctor">
            <summary>
            Initializes a new instance of the GridLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.GridLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.GridLayoutInfo)">
            <summary>
            Applies the algorithm on the specified graph using the specified settings.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.GridLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.GridLayoutInfo,MindFusion.Layout.LayoutProgress)">
            <summary>
            Applies the algorithm on the specified graph using the specified settings
            and progress callback delegate.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.GridLayout.CalcLinkDir(MindFusion.Layout.GraphNode,System.Double@,System.Double@)">
            <remarks>
            This method takes two reference parameters instead of returning
            a single Size object because in WPF Size objects cannot have negative
            dimensions, which is completely possible to happen here.
            </remarks>
        </member>
        <member name="T:MindFusion.Layout.IGraphBuilder">
            <summary>
            Factory class used to create graphs.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.IGraphBuilder.Create">
            <summary>
            Creates new empty graph.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.MaxBoundsComparer.Compare(System.Object,System.Object)">
            <summary>
            Always sorts null entries in the front.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.XBoundsComparer.Compare(System.Object,System.Object)">
            <summary>
            Always sorts null entries in the front.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.LinkEventArgs">
            <summary>
            Contains the arguments passed to handlers of link related events,
            such as LinkCreated and LinkDeleted.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LinkEventArgs.#ctor(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Initializes a new instance of the LinkEventArgs class.
            </summary>
            <param name="link">
            The DiagramLink related to the event.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LinkEventArgs.#ctor(MindFusion.Diagramming.Wpf.DiagramLink,System.Windows.Point,System.Int32)">
            <summary>
            Initializes a new instance of the LinkEventArgs class.
            </summary>
            <param name="link">
            The DiagramLink related to the event.
            </param>
            <param name="mousePosition">
            The mouse button related to the event.
            </param>
            <param name="adjustmentHandle">
            The position of the mouse cursor, in document coordinates.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LinkEventArgs.#ctor(MindFusion.Diagramming.Wpf.DiagramLink,MindFusion.Diagramming.Wpf.MouseButton,System.Windows.Point)">
            <summary>
            Initializes a new instance of the LinkEventArgs class.
            </summary>
            <param name="link">
            The DiagramLink related to the event.
            </param>
            <param name="mouseButton">
            The position of the mouse cursor, in document coordinates.
            </param>
            <param name="mousePosition">
            The zero-based index of the control point related to the event.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.LinkEventArgs.Link">
            <summary>
            Gets the link for which the event raised.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.LinkEventArgs.MousePosition">
            <summary>
            Gets or sets the current mouse pointer position.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.LinkEventArgs.MouseButton">
            <summary>
            Gets which mouse button was pressed. 
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.LinkEventArgs.AdjustmentHandle">
            <summary>
            Gets or sets the adjustment handle being moved by the user.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.NodeEventArgs">
            <summary>
            Contains the arguments passed to handlers of node-related events,
            such as TreeCollapsed and TreeExpanded.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.NodeEventArgs.#ctor(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Initializes a new instance of the NodeEventArgs class.
            </summary>
            <param name="node">
            The DiagramNode related to the event.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.NodeEventArgs.#ctor(MindFusion.Diagramming.Wpf.DiagramNode,System.Windows.Point,MindFusion.Diagramming.Wpf.AdjustmentHandles)">
            <summary>
            Initializes a new instance of the NodeEventArgs class.
            </summary>
            <param name="node">
            The DiagramNode related to the event.
            </param>
            <param name="mousePosition">
            The position of the mouse cursor, in document coordinates.
            </param>
            <param name="adjustmentHandle">
            The zero-based index of the adjustment handle related to the event.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.NodeEventArgs.#ctor(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.MouseButton,System.Windows.Point)">
            <summary>
            Initializes a new instance of the NodeEventArgs class.
            </summary>
            <param name="node">
            The DiagramNode related to the event.
            </param>
            <param name="mouseButton">
            The mouse button related to the event.
            </param>
            <param name="mousePosition">
            The position of the mouse cursor, in document coordinates.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.NodeEventArgs.Node">
            <summary>
            Gets the node for which the event was raised.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.NodeEventArgs.MousePosition">
            <summary>
            Gets or sets the current mouse pointer position.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.NodeEventArgs.MouseButton">
            <summary>
            Gets which mouse button has been pressed.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.NodeEventArgs.AdjustmentHandle">
            <summary>
            Gets or sets the adjustment handle being moved by the user.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ContainerChildEventArgs">
            <summary>
            Contains arguments passed to ContainerChildEventHandler,
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerChildEventArgs.#ctor(MindFusion.Diagramming.Wpf.ContainerNode,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Initializes a new instance of the ContainerChildEventArgs class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerChildEventArgs.ToString">
            <summary>
            NodeEventArgs.ToString override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ContainerChildEventArgs.Container">
            <summary>
            The parent ContainerNode of the Node belongs.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.LinkValidationEventArgs">
            <summary>
            Contains the arguments passed to handlers of link validation events.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LinkValidationEventArgs.#ctor(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Initializes a new instance of the LinkValidationEventArgs class.
            </summary>
            <param name="link">
            The DiagramLink related to the event.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LinkValidationEventArgs.#ctor(MindFusion.Diagramming.Wpf.DiagramLink,System.Windows.Point,System.Int32,MindFusion.Diagramming.Wpf.DiagramNode,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the LinkValidationEventArgs class.
            </summary>
            <param name="link">
            The DiagramLink related to the event.
            </param>
            <param name="mousePosition">
            The position of the mouse cursor, in document coordinates.
            </param>
            <param name="adjustmentHandle">
            The zero-based index of the control point related to the event.
            </param>
            <param name="node">
            The DiagramNode related to the event.
            </param>
            <param name="anchorIndex">
            The zero-based index of the anchor point related to the event.
            </param>
            <param name="tableRow">
            The zero-based index of the table row related to the event.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LinkValidationEventArgs.#ctor(MindFusion.Diagramming.Wpf.DiagramLink,System.Windows.Rect)">
            <summary>
            Initializes a new instance of the LinkValidationEventArgs class.
            </summary>
            <param name="link">
            The DiagramLink related to the event.
            </param>
            <param name="selectionRectangle">
            A .NET Rect object that represents the current selection rectangle.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LinkValidationEventArgs.CancelDrag">
            <summary>
            Cancels the creation or modification of the link.
            </summary>
            <remarks>
            Calling this method immediately stops the operation.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.LinkValidationEventArgs.Node">
            <summary>
            Gets the node to which the link will be connected.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.LinkValidationEventArgs.Origin">
            <summary>
            Gets the node that would become the link's origin
            if the event is validated.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.LinkValidationEventArgs.Destination">
            <summary>
            Gets the node that will become the link's destination
            if the event is validated.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.LinkValidationEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the current operation.
            </summary>
            <remarks>
            Set this property to true to prevent the user from completing the operation.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.LinkValidationEventArgs.AnchorIndex">
            <summary>
            Gets the anchor point related to a link validation event.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.LinkValidationEventArgs.TableRow">
            <summary>
            Gets the table row related to a link validation event.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.LinkValidationEventArgs.ChangingOrigin">
            <summary>
            Gets a value indicating whether the user modifies the
            link's origin end point.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.LinkValidationEventArgs.ChangingDestination">
            <summary>
            Gets a value indicating whether the user modifies the
            link's destination end point.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.LinkValidationEventArgs.SelectionRectangle">
            <summary>
            Gets the current selection rectangle.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.NodeValidationEventArgs">
            <summary>
            Contains the arguments passed to handlers of node validation events.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.NodeValidationEventArgs.#ctor(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Initializes a new instance of the NodeValidationEventArgs class.
            </summary>
            <param name="node">
            The DiagramNode related to the event.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.NodeValidationEventArgs.#ctor(MindFusion.Diagramming.Wpf.DiagramNode,System.Windows.Point,MindFusion.Diagramming.Wpf.AdjustmentHandles)">
            <summary>
            Initializes a new instance of the NodeValidationEventArgs class.
            </summary>
            <param name="node">
            The DiagramNode related to the event.
            </param>
            <param name="mousePosition">
            The position of the mouse cursor, in document coordinates.
            </param>
            <param name="adjustmentHandle">
            The zero-based index of the adjustment handle related to the event.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.NodeValidationEventArgs.#ctor(MindFusion.Diagramming.Wpf.DiagramNode,System.Windows.Rect)">
            <summary>
            Initializes a new instance of the NodeValidationEventArgs class.
            </summary>
            <param name="node">
            The DiagramNode related to the event.
            </param>
            <param name="selectionRectangle">
            A .NET RectangeF object representing the selection reactangle.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.NodeValidationEventArgs.CancelDrag">
            <summary>
            Cancels the creation or modification of the node.
            </summary>
            <remarks>
            Calling this method immediately stops the operation.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.NodeValidationEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the current operation.
            </summary>
            <remarks>
            Set this property to true to prevent the user from completing the operation.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.NodeValidationEventArgs.SelectionRectangle">
            <summary>
            Gets the current selection rectangle.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.CellEventArgs">
            <summary>
            Contains the arguments passed to event handlers,
            such as CellClicked.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.CellEventArgs.#ctor(MindFusion.Diagramming.Wpf.TableNode.Cell,MindFusion.Diagramming.Wpf.MouseButton,System.Windows.Point,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the CellEventArgs class.
            </summary>
            <param name="cell">
            The TableNode.Cell related to the event.
            </param>
            <param name="mouseButton">
            The mouse button related to the event.
            </param>
            <param name="mousePosition">
            The position of the mouse at the time the event was raised.
            </param>
            <param name="column">
            The zero-based index of the column related to the event.
            </param>
            <param name="row">
            The zero-based index of the row related to the event.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.CellEventArgs.Table">
            <summary>
            Get the table that contains Cell.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.CellEventArgs.Cell">
            <summary>
            Get the cell for which the event is raised.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.CellEventArgs.MouseButton">
            <summary>
            Gets which mouse button has been pressed.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.CellEventArgs.MousePosition">
            <summary>
            Gets the current mouse pointer position.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.CellEventArgs.Column">
            <summary>
            Gets the index of the table's column that contains Cell.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.CellEventArgs.Row">
            <summary>
            Gets the index of the table's row that contains Cell.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.CellValidationEventArgs">
            <summary>
            Contains the arguments passed to event handlers, such as CellTextEditing.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.CellValidationEventArgs.#ctor(MindFusion.Diagramming.Wpf.TableNode.Cell,MindFusion.Diagramming.Wpf.MouseButton,System.Windows.Point,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the CellValidationEventArgs class.
            </summary>
            <param name="cell">
            The TableNode.Cell related to the event.
            </param>
            <param name="mouseButton">
            The mouse button related to the event.
            </param>
            <param name="mousePosition">
            The position of the mouse at the time the event was raised.
            </param>
            <param name="column">
            The zero-based index of the column related to the event.
            </param>
            <param name="row">
            The zero-based index of the row related to the event.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.CellValidationEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to prevent the user
            from completing the operation.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.GroupEventArgs">
            <summary>
            Contains the arguments passed to handlers of group-related events,
            such as GroupDestroyed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GroupEventArgs.#ctor(MindFusion.Diagramming.Wpf.Group)">
            <summary>
            Initializes a new instance of the GroupEventArgs class.
            </summary>
            <param name="group">
            The Group related to the event.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GroupEventArgs.SetGroup(MindFusion.Diagramming.Wpf.Group)">
            <summary>
            Sets the Group argument.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GroupEventArgs.SetIndex(System.Int32)">
            <summary>
            Sets the int Index argument.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.GroupEventArgs.Group">
            <summary>
            Gets the group for which the event was raised.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.GroupEventArgs.Index">
            <summary>
            Gets an integer index related to the event.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.RowEventArgs">
            <summary>
            Contains the arguments passed to handlers of table row-related events,
            such as TableSectionCollapsed and TableSectionExpanded.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RowEventArgs.#ctor(MindFusion.Diagramming.Wpf.TableNode,System.Int32)">
            <summary>
            Initializes a new instance of the RowEventArgs class.
            </summary>
            <param name="table">
            The TableNode related to the event.
            </param>
            <param name="rowIndex">
            The zero-based index of the table row related to the event.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RowEventArgs.RowIndex">
            <summary>
            Gets the index of the table row for which the event has been raised.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RowEventArgs.Table">
            <summary>
            Get the table for which the event has been raised.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DiagramEventArgs">
            <summary>
            Contains the arguments passed to event handlers,
            such as Clicked and DoubleClicked.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramEventArgs.#ctor(MindFusion.Diagramming.Wpf.MouseButton,System.Windows.Point)">
            <summary>
            Initializes a new instance of the DiagramEventArgs class.
            </summary>
            <param name="mouseButton">
            The mouse button related to the event.
            </param>
            <param name="mousePosition">
            The cursor location at the time the event is raised, expressed
            in document coordinates.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramEventArgs.MouseButton">
            <summary>
            Gets or sets which mouse button has been pressed.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramEventArgs.MousePosition">
            <summary>
            Gets or sets the current mouse pointer position.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DrawLinkEventArgs">
            <summary>
            Contains the arguments passed to the DrawLink event handlers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DrawLinkEventArgs.#ctor(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.DiagramLink,MindFusion.Diagramming.Wpf.PointCollection)">
            <summary>
            Initializes a new instance of the DrawLinkEventArgs class.
            </summary>
            <param name="graphics">
            The DrawingContext object that represents the target of
            the drawing operation.
            </param>
            <param name="link">
            The DiagramLink related to the event.
            </param>
            <param name="points">
            The collection containing the coordinates of the link control points,
            pretranslated depending on whether drawing the shadow or not.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DrawLinkEventArgs.Link">
            <summary>
            Gets the DiagramLink object that should be custom drawn.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DrawLinkEventArgs.Graphics">
            <summary>
            Gets a DrawingContext object whose methods should be used to draw the link.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DrawLinkEventArgs.Points">
            <summary>
            Gets a collection of the link's control points.
            </summary>
            <remarks>
            When drawing shadows, the points are offset as necessary.
            </remarks>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DrawNodeEventArgs">
            <summary>
            Contains the arguments passed to the DrawNode event handlers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DrawNodeEventArgs.#ctor(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Initializes a new instance of the DrawNodeEventArgs class.
            </summary>
            <param name="graphics">
            The DrawingContext object that represents the target of the drawing operation.
            </param>
            <param name="node">
            The DiagramNode related to the event.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DrawNodeEventArgs.Node">
            <summary>
            Gets the DiagramNode object that should be custom drawn.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DrawNodeEventArgs.Graphics">
            <summary>
            Gets a DrawingContext object whose methods should be used to draw the node.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DrawCellEventArgs">
            <summary>
            Contains the arguments passed to the DrawCell event handlers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DrawCellEventArgs.#ctor(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.TableNode,System.Int32,System.Int32,System.Windows.Rect)">
            <summary>
            Initializes a new instance of the DrawCellEventArgs class.
            </summary>
            <param name="graphics">
            The DrawingContext object that represents the target of the drawing operation.
            </param>
            <param name="table">
            The TableNode related to the event.
            </param>
            <param name="column">
            The zero-based index of the table column related to the event.
            </param>
            <param name="row">
            The zero-based index of the table row related to the event.
            </param>
            <param name="bounds">
            The bounding rectangle of the cell being drawn.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DrawCellEventArgs.Graphics">
            <summary>
            Gets a DrawingContext object whose methods should be used to draw the cell.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DrawCellEventArgs.Bounds">
            <summary>
            Gets the bounding rectangle of the cell being drawn.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DrawCellEventArgs.Column">
            <summary>
            Gets the index of the table's column that contains Cell.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DrawCellEventArgs.Row">
            <summary>
            Gets the index of the table's row that contains Cell.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DrawCellEventArgs.Table">
            <summary>
            Get the table that contains Cell.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DrawCellEventArgs.Cell">
            <summary>
            Gets the cell that should be custom drawn.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DrawAnchorPointEventArgs">
            <summary>
            Contains the arguments passed to the DrawAnchorPoint event handlers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DrawAnchorPointEventArgs.#ctor(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.AnchorPoint)">
            <summary>
            Initializes a new instance of the DrawAnchorPointEventArgs class.
            </summary>
            <param name="graphics">
            The DrawingContext object that represents the target of
            the drawing operation.
            </param>
            <param name="anchorPoint">
            The AnchorPoint object whose point is being drawn.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DrawAnchorPointEventArgs.Graphics">
            <summary>
            Gets a DrawingContext object whose methods should be used to
            draw the anchor point mark.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DrawAnchorPointEventArgs.AnchorPoint">
            <summary>
            Gets the anchor point being drawn.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.EditLinkTextEventArgs">
            <summary>
            Contains the arguments passed to the EditLinkTextEventArgs event handlers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.EditLinkTextEventArgs.#ctor(MindFusion.Diagramming.Wpf.DiagramLink,System.String,System.String)">
            <summary>
            Initializes a new instance of the EditLinkTextEventArgs class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.EditLinkTextEventArgs.OldText">
            <summary>
            Gets the text before in-place editing.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.EditLinkTextEventArgs.NewText">
            <summary>
            Gets the new text.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.EditLinkTextEventArgs.Link">
            <summary>
             Gets the link whose text was edited.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.EditNodeTextEventArgs">
            <summary>
            Contains the arguments passed to the NodeTextEdited event handlers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.EditNodeTextEventArgs.#ctor(MindFusion.Diagramming.Wpf.DiagramNode,System.String,System.String)">
            <summary>
            Initializes a new instance of the EditNodeTextEventArgs class.
            </summary>
            <param name="node">
            The DiagramNode related to the event.
            </param>
            <param name="oldText">
            The old text of the node.
            </param>
            <param name="newText">
            The new text of the node.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.EditNodeTextEventArgs.OldText">
            <summary>
            Gets the text that had been displayed in the node before
            the user edited it.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.EditNodeTextEventArgs.NewText">
            <summary>
            Gets the text that has just been entered by the user.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.EditNodeTextEventArgs.Node">
            <summary>
            Gets the node whose text has been edited.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.EditCellTextEventArgs">
            <summary>
            Contains the arguments passed to the CellTextEdited event handlers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.EditCellTextEventArgs.#ctor(MindFusion.Diagramming.Wpf.TableNode.Cell,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the EditCellTextEventArgs class.
            </summary>
            <param name="cell">
            The TableNode.Cell related to the event.
            </param>
            <param name="oldText">
            The old text of the cell.
            </param>
            <param name="newText">
            The new text of the cell.
            </param>
            <param name="column">
            The zero-based index of the table column related to the event.
            </param>
            <param name="row">
            The zero-based index of the table row related to the event.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.EditCellTextEventArgs.Column">
            <summary>
            Gets the index of the table's column that contains Cell.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.EditCellTextEventArgs.Row">
            <summary>
            Gets the index of the table's row that contains Cell.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.EditCellTextEventArgs.OldText">
            <summary>
            Gets the text that had been displayed in the cell before the
            user edited it.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.EditCellTextEventArgs.NewText">
            <summary>
            Gets the text that has just been entered by the user.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.EditCellTextEventArgs.Cell">
            <summary>
            Get the cell whose text has been edited.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.EditCellTextEventArgs.Table">
            <summary>
            Get the table that contains Cell.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.UndoEventArgs">
            <summary>
            Contains the arguments passed to the ActionRecorded, ActionUndone
            and ActionRedone event handlers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoEventArgs.#ctor(MindFusion.Diagramming.Wpf.Commands.Command)">
            <summary>
            Initializes a new instance of the UndoEventArgs class.
            </summary>
            <param name="command">
            The Command related to the event.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.UndoEventArgs.Command">
            <summary>
            Gets a reference to the Command instance related to
            the event being handled.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.UndoValidationEventArgs">
            <summary>
            Contains the arguments passed to the ActionRecording event handlers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoValidationEventArgs.#ctor(MindFusion.Diagramming.Wpf.Commands.Command)">
            <summary>
            Initializes a new instance of the UndoValidationEventArgs class.
            </summary>
            <param name="command">
            The Command related to the event.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.UndoValidationEventArgs.Cancel">
            <summary>
            Gets or sets a value value indicating whether the operation
            should be canceled.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ValidationEventArgs">
            <summary>
            Contains the arguments passed to the SelectionMoving event handler.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ValidationEventArgs.#ctor">
            <summary>
            Initializes a new instance of the ValidationEventArgs class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ValidationEventArgs.CancelDrag">
            <summary>
            Cancels the modification of the selected items.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ValidationEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to prevrent the user
            from completing the operation.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DrawItemEventArgs">
            <summary>
            Contains the arguments passed to the DrawAdjustmentHandles event handlers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DrawItemEventArgs.#ctor(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Initializes a new instance of the DrawItemEventArgs class.
            </summary>
            <param name="graphics">
            The DrawingContext object that represents the target of the drawing operation.
            </param>
            <param name="item">
            The DiagramItem related to the event.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DrawItemEventArgs.Graphics">
            <summary>
            Gets a DrawingContext object whose methods should be used to
            draw the adjustment handles.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DrawItemEventArgs.Item">
            <summary>
            Gets the item whose selection handles are being drawn.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ItemEventArgs">
            <summary>
            Contains the arguments passed to item instantiation event handlers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ItemEventArgs.#ctor(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Initializes a new instance of the ItemEventArgs class.
            </summary>
            <param name="item">
            The DiagramItem related to the event.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ItemEventArgs.SetItem(System.Windows.UIElement)">
            <summary>
            Sets the DiagramItem argument.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ItemEventArgs.SetIndex(System.Int32)">
            <summary>
            Sets the int Index argument.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ItemEventArgs.Item">
            <summary>
            Gets the item for which the event is raised.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ItemEventArgs.Index">
            <summary>
            Gets an integer index related to the event.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.InstantiateItemEventArgs">
            <summary>
            Contains the arguments passed to the InstantiateItem event handlers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InstantiateItemEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InstantiateItemEventArgs class.
            </summary>
            <param name="itemClass">
            The class string identifier specifying the type of the new item.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.InstantiateItemEventArgs.Item">
            <summary>
            Gets or sets a reference to the created diagram item.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.InstantiateItemEventArgs.ItemClass">
            <summary>
            Gets the item class identifier.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.HitTestEventArgs">
            <summary>
            Contains the arguments passed to the HitTestAdjustmentHandles event handlers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.HitTestEventArgs.#ctor(MindFusion.Diagramming.Wpf.DiagramItem,System.Windows.Point)">
            <summary>
            Initializes a new instance of the HitTestEventArgs class.
            </summary>
            <param name="item">
            The DiagramItem related to the event.
            </param>
            <param name="mousePosition">
            The cursor location at the time the event is raised,
            expressed in document coordinates.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.HitTestEventArgs.Item">
            <summary>
            Gets the item whose adjustment handles are being hit-tested.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.HitTestEventArgs.MousePosition">
            <summary>
            Gets the current cursor position, expressed in document coordinates.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.HitTestEventArgs.HitResult">
            <summary>
            Gets or sets the index of the selection handle that has been hit.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.AnchorPointEventArgs">
            <summary>
            Contains data related to anchor-point change events.
            </summary>
            <summary>
            Contains the arguments passed to the anchor point-related events,
            such as OriginAnchorChanged and DestinationAnchorChanged.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPointEventArgs.#ctor(MindFusion.Diagramming.Wpf.DiagramLink,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the AnchorPointEventArgs class.
            </summary>
            <param name="link">
            The link whose end has been attached to a different anchor point.
            </param>
            <param name="oldAnchorIndex">
            The index of the old anchor point.
            </param>
            <param name="newAnchorIndex">
            The index of the new anchor point.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPointEventArgs.Link">
            <summary>
            Gets the link whose anchor point index has been changed.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPointEventArgs.OldAnchorIndex">
            <summary>
            Gets the index of the old anchor point.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPointEventArgs.NewAnchorIndex">
            <summary>
            Gets the index of the new anchor point.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.RepaintEventArgs">
            <summary>
            Specifies the coordinates of the area that should be repainted
            by views when the Repaint event is raised.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RepaintEventArgs.#ctor(System.Windows.Rect)">
            <summary>
            Initializes a new instance of the RepaintEventArgs class.
            </summary>
            <param name="invalidRect">
            A Rect object representing the rectangle that should be repainted.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RepaintEventArgs.#ctor(System.Windows.Rect,System.Boolean)">
            <summary>
            Initializes a new instance of the RepaintEventArgs class.
            </summary>
            <param name="invalidRect">
            A Rect object representing the rectangle that should be repainted.
            </param>
            <param name="redrawCacheImage">
            A boolean value specifying whether the diagram cache image used
            during modification should be re-created.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RepaintEventArgs.InvalidRect">
            <summary>
            Gets the rectangular area in the diagram document that should
            be repainted.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RepaintEventArgs.RedrawCacheImage">
            <summary>
            Gets a value indicating whether the back-buffer cache image
            should be repainted as well.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ShapeEventArgs">
            <summary>
            Contains the arguments passed to the ShapeSelected and
            ShapeRenamed event handlers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeEventArgs.#ctor(MindFusion.Diagramming.Wpf.Shape,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the ShapeEventArgs class.
            </summary>
            <param name="shapeTemplate">
            The Shape related to the event.
            </param>
            <param name="index">
            The zero-based index of the shape within its containing collection.
            </param>
            <param name="oldId">
            The old identifier of the shape.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeEventArgs.#ctor(MindFusion.Diagramming.Wpf.Shape,System.Int32)">
            <summary>
            Initializes a new instance of the ShapeEventArgs class.
            </summary>
            <param name="shapeTemplate">
            The Shape related to the event.
            </param>
            <param name="index">
            The zero-based index of the shape within its containing collection.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeEventArgs.#ctor(MindFusion.Diagramming.Wpf.Shape)">
            <summary>
            Initializes a new instance of the ShapeEventArgs class.
            </summary>
            <param name="shapeTemplate">
            The Shape related to the event.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeEventArgs.ToString">
            <summary>
            Object.ToString override.
            </summary>
            <returns>
            A string that represents the object.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeEventArgs.Shape">
            <summary>
            Gets the shape related to the event.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeEventArgs.Index">
            <summary>
            Gets or sets the index of the Shape item within its containing collection.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeEventArgs.OldId">
            <summary>
            Gets or sets the name of the shape before renaming.
            </summary>
            <remarks>
            This property is relevant only for ShapeRenamed events.
            </remarks>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.LinkEventHandler">
            <summary>
            Represents methods that will handle general link related events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A LinkEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.NodeEventHandler">
            <summary>
            Represents methods that will handle general node related events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A NodeEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ContainerChildEventHandler">
            <summary>
            Represents methods that will handle ContainerChildAdded, ContainerChildRemoved events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A ContainerChildEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.LinkValidationEventHandler">
            <summary>
            Represents methods that will handle link validation events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A LinkValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.NodeValidationEventHandler">
            <summary>
            Represents methods that will handle node validation events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A NodeValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.CellEventHandler">
            <summary>
            Represents methods that will handle table-related mouse events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A CellEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.CellValidationEventHandler">
            <summary>
            Represents methods that will handle table-related mouse events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A CellValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ItemEventHandler">
            <summary>
            Represents methods that will handle general item-related events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A ItemEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.InstantiateItemEventHandler">
            <summary>
            Represents methods that will handle item instantiation events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A InstantiateItemEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.GroupEventHandler">
            <summary>
            Represents methods that will handle general group-related events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A GroupEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DiagramEventHandler">
            <summary>
            Represents methods that will handle document-related mouse events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A DiagramEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.HitTestEventHandler">
            <summary>
            Represents methods that will handle hit-testing events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A HitTestEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.EditLinkTextEventHandler">
            <summary>
            Represents methods that will handle link in-place edit events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A EditLinkTextEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.EditNodeTextEventHandler">
            <summary>
            Represents methods that will handle node in-place edit events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A EditNodeTextEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.EditCellTextEventHandler">
            <summary>
            Represents methods that will handle table cell-related in-place edit events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A EditCellTextEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DrawLinkEventHandler">
            <summary>
            Represents methods that will handle link-related custom-drawing events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A DrawLinkEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DrawNodeEventHandler">
            <summary>
            Represents methods that will handle node-related custom-drawing events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A DrawNodeEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DrawCellEventHandler">
            <summary>
            Represents methods that will handle table cell-related custom-drawing events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A DrawCellEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DrawAnchorPointEventHandler">
            <summary>
            Represents methods that will handle anchor-related custom-drawing events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A DrawAnchorPointEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DrawItemEventHandler">
            <summary>
            Represents methods that will handle handles-related custom-drawing events.
            </summary>
            <param name="e">
            The source of the event.
            </param>
            <param name="sender">
            A DrawItemEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.UndoEventHandler">
            <summary>
            Represents methods that will handle undo/redo-related events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A UndoEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.UndoValidationEventHandler">
            <summary>
            Represents methods that will handle undo/redo-related confirmation events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A UndoValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.RowEventHandler">
            <summary>
            Represents methods that will handle table row-related events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A RowEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.AnchorPointEventHandler">
            <summary>
            Represents methods that will handle anchor point-related events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            An AnchorPointEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ValidationEventHandler">
            <summary>
            Represents methods that will handle validation events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A ValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.RepaintEventHandler">
            <summary>
            Represents methods that will handle the Repaint event.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A RepaintEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ShapeEventHandler">
            <summary>
            Represents methods that will handle the ShapeSelected event.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A ShapeEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.InPlaceEditEventArgs">
            <summary>
            Contains the arguments passed to the EnterInplaceEditMode and
            LeaveInplaceEditMode event handlers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InPlaceEditEventArgs.#ctor(MindFusion.Diagramming.Wpf.InplaceEditable,System.Windows.Controls.TextBox)">
            <summary>
            Initializes a new instance of the InPlaceEditEventArgs class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.InPlaceEditEventArgs.TextBox">
            <summary>
            Gets the control used to edit the item's text.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.InPlaceEditEventArgs.Item">
            <summary>
            Gets a reference to the item being edited.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.InPlaceEditEventArgs.Node">
            <summary>
            Gets the diagram node being edited.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.CopyHostedControlEventArgs">
            <summary>
            Contains the arguments passes to the CopyHostedControl event handlers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.CopyHostedControlEventArgs.#ctor(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Initializes a new instance of the CopyHostedControlEventArgs class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.CopyHostedControlEventArgs.Source">
            <summary>
            Gets a reference to the control embedded in the original ControlNode.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.CopyHostedControlEventArgs.Destination">
            <summary>
            Gets a reference to the control embedded in the cloned ControlNode.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.InPlaceEditEventHandler">
            <summary>
            Represents methods that will handle general in-place edit events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A InPlaceEditEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.NodesAlignedEventArgs">
            <summary>
            Contains the arguments passed to handler of nodes aligneded event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.NodesAlignedEventArgs.#ctor(MindFusion.Diagramming.Wpf.DiagramNodeCollection)">
            <summary>
            Initializes a new instance of the NodesAlignedEventArgs class.
            </summary>
            <param name="nodes">
            The DiagramNodeCollection related to the event.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.NodesAlignedEventArgs.Nodes">
            <summary>
            Gets the nodes for which the event raised.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.NodesAlignedEventHandler">
            <summary>
            Represents methods that will handle nodes aligned events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A NodesAlignedEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TreeItemEventArgs">
            <summary>
            Contains the arguments passed to handlers of TreeViewItem-related events.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeItemEventArgs.#ctor(MindFusion.Diagramming.Wpf.TreeViewItem,MindFusion.Diagramming.Wpf.MouseButton,System.Windows.Point)">
            <summary>
            Initializes a new instance of the TreeItemEventArgs class.
            </summary>
            <param name="item">
            The TreeViewItem related to the event.
            </param>
            <param name="mouseButton">
            The mouse button related to the event.
            </param>
            <param name="mousePosition">
            The position of the mouse at the time the event was raised.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeItemEventArgs.Item">
            <summary>
            Get the item for which the event is raised.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeItemEventArgs.MouseButton">
            <summary>
            Gets which mouse button has been pressed.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeItemEventArgs.MousePosition">
            <summary>
            Gets the current mouse pointer position.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TreeItemValidationEventArgs">
            <summary>
            Contains the arguments passed to event handlers, such as TreeItemTextEditing.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeItemValidationEventArgs.#ctor(MindFusion.Diagramming.Wpf.TreeViewItem,MindFusion.Diagramming.Wpf.MouseButton,System.Windows.Point)">
            <summary>
            Initializes a new instance of the TreeItemValidationEventArgs class.
            </summary>
            <param name="item">
            The TreeViewItem related to the event.
            </param>
            <param name="mouseButton">
            The mouse button related to the event.
            </param>
            <param name="mousePosition">
            The position of the mouse at the time the event was raised.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeItemValidationEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to prevent the user
            from completing the operation.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TreeItemEventHandler">
            <summary>
            Represents methods that will handle TreeViewNode-related mouse events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A TreeItemEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TreeItemValidationEventHandler">
            <summary>
            Represents methods that will handle TreeViewNode-related mouse events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A TreeItemValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.CopyHostedControlEventHandler">
            <summary>
            Represents methods that handle the CopyHostedControl event.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Behaviors.DrawLinksBehavior">
            <summary>
            This class is used when the diagram behavior is set to Behavior.DrawLinks.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.DrawLinksBehavior.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the DrawLinksBehavior class.
            </summary>
            <param name="diagram">
            The Diagram this behavior will be associated with.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.DrawLinksBehavior.StartDraw(System.Windows.Point)">
            <summary>
            BehaviorBase.StartDraw override.
            </summary>
            <param name="point">
            A Point structure, which specifies the current position
            of the mouse cursor, in document coordinates.
            </param>
            <returns>
            An instance of the InteractionState class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.DrawLinksBehavior.SetMouseCursor(System.Windows.Point,System.Boolean@)">
            <summary>
            BehaviorBase.SetMouseCursor override.
            </summary>
            <param name="point">
            A Point structure that specifies the position of the mouse cursor.
            </param>
            <param name="startInteraction">
            true if the user is going to create, delete, modify or select a
            DiagramItem; false if mouse behavior is not considered; in this
            case the mouse pointer is set to a default cursor according to
            the background LaneGrid.
            </param>
            <returns>
            A member of the CursorHint enumeration.
            </returns>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DiagramLinkState">
            <summary>
            Contains a snapshot of the internal state of a DiagramLink.
            Instances of this class are used to store the state of links
            for later undo or redo operations. If you derive from DiagramLink
            and need to implement undo support for the additional internal state
            defined by your class, do so by deriving from DiagramLinkState and
            overriding the DiagramLink.CreateState, DiagramLink.SaveState
            and DiagramLink.RestoreState methods.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ContainerNode">
            <summary>
            Implements nodes that can contain other nodes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.#ctor">
            <summary>
            Initializes a new instance of the ContainerNode class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the ContainerNode class with
            the default values of the specified diagram.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.#ctor(MindFusion.Diagramming.Wpf.ContainerNode)">
            <summary>
            Initializes a new instance of the ContainerNode class using
            the specified node as a prototype.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.Add(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Adds a node to this container.
            </summary>
            <param name="node">
            The DiagramNode that should be added to the container.
            </param>
            <remarks>
            If the container bounds do not include the specified node bounds,
            the container will grow automatically to accommodate the new node.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.Remove(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Removes a node from this container.
            </summary>
            <param name="node">
            The DiagramNode that should be removed from the container.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.Draw(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.RenderOptions)">
            <summary>
            Draws the container on the specified DrawingContext surface.
            </summary>
            <param name="graphics">
            A .NET DrawingContext object where the node should be rendered.
            </param>
            <param name="options">
            Provides options for the drawing operation.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.GetCaptionRect">
            <summary>
            Calculates the caption rectangle, excluding the fold
            button if the container is foldable.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.HitTestHandle(System.Windows.Point,System.Int32@)">
            <summary>
            DiagramNode.HitTestHandle override.
            </summary>
            <param name="pt">
            A Point value specifying where to look for a selection handle.
            </param>
            <param name="handle">
            A reference to an integer variable, which receives the index of
            the found selection handle.
            </param>
            <returns>
            true if there is a selection handle at the specified location;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.OnDragOver(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Invoked when a diagram item is being dragged over this node.
            </summary>
            <param name="item">
            The DiagramItem being dragged.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.OnDragOut(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Invoked when a diagram item is being dragged out of this node.
            </summary>
            <param name="item">
            The DiagramItem being dragged.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.OnDropOver(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Invoked when a diagram item is dropped over this node.
            </summary>
            <param name="item">
            The DiagramItem being dragged.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.OnChildModified(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.AdjustmentHandles)">
            <summary>
            Called when a group child node has been modified.
            </summary>
            <param name="node">
            The DiagramNode that has been moved or resized.
            </param>
            <param name="handle">
            The adjustment handle used to modify the node.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.UpdateBounds">
            <summary>
            Updates the container bounds to fit its contents.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.UpdateBounds(System.Boolean)">
            <summary>
            Updates the container bounds to fit its contents.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the item content into an XML element.
            </summary>
            <param name="xmlElement">
            An XmlElement the item's data should be stored into.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information about
            the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Loads the item content from an XML element.
            </summary>
            <param name="xmlElement">
            An XmlElement containing the item's data.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information about
            the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.CreateProperties">
            <summary>
            DiagramItem.CreateProperties override.
            </summary>
            <returns>
            An instance of the DiagramItemProperties class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.SaveProperties(MindFusion.Diagramming.Wpf.DiagramItemProperties)">
            <summary>
            DiagramNode.SaveProperties override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.RestoreProperties(MindFusion.Diagramming.Wpf.DiagramItemProperties)">
            <summary>
            DiagramNode.RestoreProperties override.
            </summary>
            <param name="props">
            A DiagramItemProperties-derived object containing a snapshot
            of the item's properties.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.MindFusion#Diagramming#Wpf#InplaceEditable#GetTextToEdit">
            <summary>
            Node.GetTextToEdit override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.MindFusion#Diagramming#Wpf#InplaceEditable#SetEditedText(System.String)">
            <summary>
            Node.SetEditedText override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.MindFusion#Diagramming#Wpf#InplaceEditable#GetEditRect(System.Windows.Point)">
            <summary>
            Node.GetEditRect override.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.GetContainer(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Retrieves the container node (if any) the specified
            node belongs to.
            </summary>
            <param name="node">
            The DiagramNode whose container you need to find.
            </param>
            <returns>
            A ContainerNode that contains the specified node, or null
            (Nothing in Visual Basic) if the node is not contained.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.ContainsRecursively(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Determines whether this container contains the specified node,
            either directly or recursively through other containers.
            </summary>
            <param name="node">The DiagramNode to check.</param>
            <returns>true if this container contains the node; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContainerNode.GetFoldedContainer(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Retrieves the bottommost folded container node (if any)
            the specified node belongs to.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ContainerNode.HighlightPen">
            <summary>
            Gets or sets the Pen used to draw the container frame lines when
            an item is dragged over the container.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ContainerNode.Margin">
            <summary>
            Gets or sets how much space should be left between contained nodes
            and the container borders.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ContainerNode.MinimumSize">
            <summary>
            Gets or sets the minimum size of the container.
            </summary>
            <remarks>
            The container won't shrink smaller than that size, even if
            it does not contain any items.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ContainerNode.Caption">
            <summary>
            Gets or sets the container caption text.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ContainerNode.CaptionBrush">
            <summary>
            Gets or sets the brush with which container's caption text is rendered.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ContainerNode.CaptionHeight">
            <summary>
            Gets or sets the height of the container's caption area.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ContainerNode.CaptionFormat">
            <summary>
            Gets or sets the caption alignment and format.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ContainerNode.Folded">
            <summary>
            Gets or sets a value indicating whether this container is folded.
            </summary>
            <remarks>
            When folded, the container children are not visible, and only its
            caption bar is displayed.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ContainerNode.Foldable">
            <summary>
            Gets or sets a value indicating whether the user is allowed
            to fold this container.
            </summary>
            <remarks>
            A foldable container can be folded and unfolded by clicking
            the up/down arrow displayed in the caption area.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ContainerNode.AutoShrink">
            <summary>
            Gets or sets a value indicating whether the container should
            shrink in size when nodes are removed from it.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ContainerNode.Visible">
            <summary>
            Gets or sets a value indicating whether the container is visible.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ContainerNode.ForceKeepGroups">
            <summary>
            DiagramNode.ForceKeepGroups override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ContainerNode.UnfoldedSize">
            <summary>
            Returns the original size of a folded container.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ContainmentKeys">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ContainmentKeys.InContainer">
            <summary>
            Set for Group.Attachment objects for nodes in a container.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ItemCollectionBase">
            <summary>
            A base collection class for the diagram item collections.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ItemCollectionBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ItemCollectionBase class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ItemCollectionBase.Clear">
            <summary>
            Removes all diagram items from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ItemCollectionBase.Clear(System.Boolean)">
            <summary>
            Removes all diagram items from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ItemCollectionBase.RaiseAdding(System.Windows.UIElement)">
            <summary>
            Raises the Adding event.
            </summary>
            <param name="item">The diagram item that is being added.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ItemCollectionBase.RaiseInserting(MindFusion.Diagramming.Wpf.DiagramItem,System.Int32)">
            <summary>
            Raises the Inserting event.
            </summary>
            <param name="item">The diagram item that is being inserted.</param>
            <param name="index">Index of the new item.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ItemCollectionBase.RaiseRemoving(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Raises the Removing event.
            </summary>
            <param name="item">The diagram item that is being removed.</param>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ItemCollectionBase.notifyParent">
            <summary>
            If enabled, the collection raises events to let their containing
            objects handle the addition or removal of items.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ItemCollectionBase.itemEventArgs">
            <summary>
            A ItemEventArgs instance used for passing arguments to the event
            handlers for the events of this collection. Used to avoid creating
            many small objects that would burden the garbage collector.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.ItemCollectionBase.Adding">
            <summary>
            Raised by the Add method when notifyParent mode is enabled.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.ItemCollectionBase.Inserting">
            <summary>
            Raised by the Insert method when notifyParent mode is enabled.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.ItemCollectionBase.Removing">
            <summary>
            Raised by the Remove method when notifyParent mode is enabled.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.ItemCollectionBase.Clearing">
            <summary>
            Raised by the Clear method when notifyParent mode is enabled.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ItemCollectionBase.NotifyParent">
            <summary>
            If enabled, the collection raises events to let their containing
            objects handle the addition or removal of items.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DiagramItemCollection">
            <summary>
            Represents a strongly-typed collection of DiagramItem objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItemCollection.#ctor">
            <summary>
            Initializes a new instance of the DiagramItemCollection class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItemCollection.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DiagramItemCollection class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItemCollection.Clone">
            <summary>
            Creates a shallow copy of this collection.
            </summary>
            <returns>
            An instance of the DiagramItemCollection class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItemCollection.Add(System.Windows.UIElement)">
            <summary>
            Adds the specified diagram item to the collection.
            </summary>
            <param name="item">
            The DiagramItem object to add to the collection.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItemCollection.Add(System.Windows.UIElement,System.Boolean)">
            <summary>
            Adds the specified diagram item to the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItemCollection.Insert(System.Int32,MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Inserts the specified diagram item into the collection
            at the specified position.
            </summary>
            <param name="index">
            The zero-based index at which to insert the item.
            </param>
            <param name="item">
            The DiagramItem object to add to the collection.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItemCollection.Insert(System.Int32,MindFusion.Diagramming.Wpf.DiagramItem,System.Boolean)">
            <summary>
            Inserts the specified diagram item in the collection
            at the specified position.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItemCollection.GetAt(System.Int32)">
            <summary>
            Gets the diagram item at the specified position.
            </summary>
            <param name="index">
            The zero-based index of the item to retreive.
            </param>
            <returns>
            An instance of the DiagramItem class that represents
            the item at the specified position.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItemCollection.Remove(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Removes the diagram item from the collection.
            </summary>
            <param name="item">
            The DiagramItem object to remove from the collection.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItemCollection.Remove(MindFusion.Diagramming.Wpf.DiagramItem,System.Boolean)">
            <summary>
            Removes the diagram item from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItemCollection.Contains(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Checks whether the collection contains the specified diagram item.
            </summary>
            <param name="item">
            The DiagramItem object to search for in the collection.
            </param>
            <returns>
            true if the specified item was found in the collection; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramItemCollection.IndexOf(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Searches for the specified item and returns the zero-based index
            of the first occurrence within the entire collection.
            </summary>
            <param name="item">
            The item to locate in the collection.
            </param>
            <returns>
            The zero-based index of the first occurrence of item
            within the entire collection, if found; otherwise, -1.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramItemCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified position.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DiagramNodeCollection">
            <summary>
            Represents a strongly-typed collection of diagram nodes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeCollection.#ctor">
            <summary>
            Initializes a new instance of the DiagramNodeCollection class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeCollection.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DiagramNodeCollection class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeCollection.Clone">
            <summary>
            Creates a shallow copy of this collection.
            </summary>
            <returns>
            An instance of the DiagramNodeCollection class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeCollection.Add(System.Windows.UIElement)">
            <summary>
            Adds the specified node to the collection.
            </summary>
            <remarks>
            The DiagramNode object to add to the collection.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeCollection.Add(System.Windows.UIElement,System.Boolean)">
            <summary>
            Adds the specified DiagramNode to the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeCollection.Insert(System.Int32,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Inserts the specified node into the collection at the specified position.
            </summary>
            <param name="index">
            The zero-based index at which to insert the node.
            </param>
            <param name="node">
            The DiagramNode object to add to the collection.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeCollection.Insert(System.Int32,MindFusion.Diagramming.Wpf.DiagramNode,System.Boolean)">
            <summary>
            Inserts the specified diagram item in the collection
            at the specified position.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeCollection.GetAt(System.Int32)">
            <summary>
            Gets the node at the specified position.
            </summary>
            <param name="index">
            The zero-based index of the node to retreive.
            </param>
            <returns>
            An instance of the DiagramNode class that represents the node
            at the specified position.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeCollection.Remove(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Removes the specified node from the collection.
            </summary>
            <param name="node">
            The DiagramNode object to remove from the collection.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeCollection.Remove(MindFusion.Diagramming.Wpf.DiagramNode,System.Boolean)">
            <summary>
            Removes the specified DiagramNode from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeCollection.Contains(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Checks whether the specified node is contained within the collection.
            </summary>
            <param name="node">
            The DiagramNode object to search for in the collection.
            </param>
            <returns>
            true if the specified node was found in the collection; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeCollection.IndexOf(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Searches for the specified node and returns the zero-based index
            of the first occurrence within the entire collection.
            </summary>
            <param name="node">The node to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of node
            within the entire collection, if found; otherwise, -1. </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNodeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the node at the specified position.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DiagramLinkCollection">
            <summary>
            Represents a strongly-typed collection of DiagramLink objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLinkCollection.#ctor">
            <summary>
            Initializes a new instance of the DiagramLinkCollection class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLinkCollection.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DiagramLinkCollection class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLinkCollection.Clone">
            <summary>
            Creates a shallow copy of this collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLinkCollection.Add(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Adds the specified link to the collection.
            </summary>
            <param name="link">
            The DiagramLink object to add to the collection.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLinkCollection.Add(MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean)">
            <summary>
            Adds the specified link to the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLinkCollection.Insert(System.Int32,MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Inserts the specified link in the collection
            at the specified position.
            </summary>
            <param name="index">
            The zero-based index at which to insert the link.
            </param>
            <param name="link">
            The DiagramLink object to add to the collection.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLinkCollection.Insert(System.Int32,MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean)">
            <summary>
            Inserts the specified diagram item in the collection
            at the specified position.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLinkCollection.GetAt(System.Int32)">
            <summary>
            Gets the link at the specified position.
            </summary>
            <param name="index">
            The zero-based index of the link to retreive.
            </param>
            <returns>
            An instance of the DiagramLink class that represents the link
            at the specified position.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLinkCollection.Remove(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Removes the specified link from the collection.
            </summary>
            <param name="link">
            The DiagramLink object to remove from the collection.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLinkCollection.Remove(MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean)">
            <summary>
            Removes the specified link from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLinkCollection.Contains(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Checks whether the specified link is contained within the collection.
            </summary>
            <param name="link">
            The DiagramLink object to search for in the collection.
            </param>
            <returns>
            true if the specified link was found in the collection; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLinkCollection.IndexOf(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Searches for the specified link and returns the zero-based index
            of the first occurrence within the entire collection.
            </summary>
            <param name="link">
            The link to locate in the collection.
            </param>
            <returns>
            The zero-based index of the first occurrence of link
            within the entire collection, if found; otherwise, -1.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLinkCollection.Item(System.Int32)">
            <summary>
            Gets or sets the link at the specified position.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.GroupCollection">
            <summary>
            Represents a strongly-typed collection of Group objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GroupCollection.#ctor">
            <summary>
            Initializes a new instance of the GroupCollection class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GroupCollection.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GroupCollection class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GroupCollection.Clone">
            <summary>
            Creates a shallow copy of this collection.
            </summary>
            <returns>
            An instance of the GroupCollection class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GroupCollection.Add(MindFusion.Diagramming.Wpf.Group)">
            <summary>
            Adds the specified group to the collection.
            </summary>
            <param name="group">
            The Group object to add to the collection.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GroupCollection.Add(MindFusion.Diagramming.Wpf.Group,System.Boolean)">
            <summary>
            Adds the specified group to the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GroupCollection.Insert(System.Int32,MindFusion.Diagramming.Wpf.Group)">
            <summary>
            Inserts the specified group in the collection
            at the specified position.
            </summary>
            <param name="index">
            The zero-based index at which to insert the group.
            </param>
            <param name="group">
            The Group object to add to the collection.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GroupCollection.Insert(System.Int32,MindFusion.Diagramming.Wpf.Group,System.Boolean)">
            <summary>
            Inserts the specified group in the collection
            at the specified position.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GroupCollection.GetAt(System.Int32)">
            <summary>
            The zero-based index of the group to retreive.
            </summary>
            <returns>
            An instance of the Group class that represents the node
            at the specified position.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GroupCollection.Remove(MindFusion.Diagramming.Wpf.Group)">
            <summary>
            Removes the specified group from the collection.
            </summary>
            <param name="group">
            The Group object to remove from the collection.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GroupCollection.Remove(MindFusion.Diagramming.Wpf.Group,System.Boolean)">
            <summary>
            Removes the specified group from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GroupCollection.Contains(MindFusion.Diagramming.Wpf.Group)">
            <summary>
            Checks whether the the specified group is contained within the collection.
            </summary>
            <param name="group">
            The Group object to search for in the collection.
            </param>
            <returns>
            true if the specified node was found in the collection; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GroupCollection.Clear">
            <summary>
            Removes all groups from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GroupCollection.Clear(System.Boolean)">
            <summary>
            Removes all diagram items from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GroupCollection.RaiseAdding(MindFusion.Diagramming.Wpf.Group)">
            <summary>
            Raises the Adding event.
            </summary>
            <param name="group">The group that is being added.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GroupCollection.RaiseInserting(MindFusion.Diagramming.Wpf.Group,System.Int32)">
            <summary>
            Raises the Inserting event.
            </summary>
            <param name="group">The group that is being added.</param>
            <param name="index">Index of the new group.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GroupCollection.RaiseRemoving(MindFusion.Diagramming.Wpf.Group)">
            <summary>
            Raises the Removing event.
            </summary>
            <param name="group">The group that is being removed.</param>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.GroupCollection.notifyParent">
            <summary>
            If enabled, the collection raises events to let their containing
            objects handle the addition or removal of items.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.GroupCollection.groupEventArgs">
            <summary>
            A ItemEventArgs instance used for passing arguments to the event
            handlers for the events of this collection. Used to avoid creating
            many small objects that would burden the garbage collector.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.GroupCollection.Adding">
            <summary>
            Raised by the Add method when notifyParent mode is enabled.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.GroupCollection.Inserting">
            <summary>
            Raised by the Insert method when notifyParent mode is enabled.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.GroupCollection.Removing">
            <summary>
            Raised by the Remove method when notifyParent mode is enabled.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.GroupCollection.Clearing">
            <summary>
            Raised by the Clear method when notifyParent mode is enabled.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.GroupCollection.Item(System.Int32)">
            <summary>
            Gets or sets the group at the specified position.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.GroupCollection.NotifyParent">
            <summary>
            If enabled, the collection raises events to let their containing
            objects handle the addition or removal of items.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.PtCollection">
            <summary>
            Represents a strongly-typed collection of points.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PtCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the PtCollection class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PtCollection.Clone">
            <summary>
            Creates a shallow copy of this collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PtCollection.Add(System.Windows.Point)">
            <summary>
            Adds the specified point to the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PtCollection.Insert(System.Int32,System.Windows.Point)">
            <summary>
            Inserts the specified point in the collection
            at the specified position.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PtCollection.GetAt(System.Int32)">
            <summary>
            Gets the point at the specified position.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PtCollection.SetAt(System.Int32,System.Windows.Point)">
            <summary>
            Sets the specified point at the specified position
            within the collection
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PtCollection.Remove(System.Windows.Point)">
            <summary>
            Removes the specified point from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PtCollection.Clear">
            <summary>
            Removes all points from the collection.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.PtCollection.Item(System.Int32)">
            <summary>
            Gets or sets the point at the specified index.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.PointCollection">
            <summary>
            Represents a strongly-typed collection of points.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PointCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the PointCollection class with
            the specified initial size.
            </summary>
            <param name="size">
            The initial size of the collection.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PointCollection.#ctor(System.Windows.Point[])">
            <summary>
            Initializes a new instance of the PointCollection class
            with the specified point values.
            </summary>
            <param name="points">
            An array of Point values that supplies the elements initially
            contained in the collection.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PointCollection.Clone">
            <summary>
            Creates a shallow copy of this collection.
            </summary>
            <returns>
            An instance of the PointCollection class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PointCollection.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the collection using the specified comparer.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PointCollection.Add(System.Windows.Point)">
            <summary>
            Adds the specified point to the collection.
            </summary>
            <param name="point">
            The .NET Point object to add to the collection.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PointCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the points in the specified collection to this collection.
            </summary>
            <param name="c">
            The .NET ICollection object that contains the points to add
            to this collection.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PointCollection.Insert(System.Int32,System.Windows.Point)">
            <summary>
            Inserts the specified point in the collection
            at the specified position.
            </summary>
            <param name="index">
            The zero-based index at which to insert the point.
            </param>
            <param name="point">
            The Point object to add to the collection.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PointCollection.GetAt(System.Int32)">
            <summary>
            Gets the point at the specified position.
            </summary>
            <param name="index">
            The zero-based index of the point to retrieve.
            </param>
            <returns>
            The Point object at the specified index.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PointCollection.SetAt(System.Int32,System.Windows.Point)">
            <summary>
            Sets the specified point at the specified position
            within the collection.
            </summary>
            <param name="index">
            The zero-based index of the point to set.
            </param>
            <param name="point">
            The Point object to set at the specified position.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PointCollection.Remove(System.Windows.Point)">
            <summary>
            Removes the specified point from the collection.
            </summary>
            <param name="point">
            The Point object to remove.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PointCollection.Clear">
            <summary>
            Removes all points from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PointCollection.GetArray">
            <summary>
            Gets a Point array containing the points in this collection.
            </summary>
            <returns>
            An array of Point objects containing all points in the colleciton.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.PointCollection.Item(System.Int32)">
            <summary>
            Gets or sets the point at the specified position.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.AnchorPointCollection">
            <summary>
            Represents a strongly-typed collection of anchor points.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPointCollection.#ctor">
            <summary>
            Initializes a new instance of the AnchorPointCollection class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPointCollection.#ctor(MindFusion.Diagramming.Wpf.AnchorPoint[])">
            <summary>
            Initializes a new instance of the AnchorPointCollection class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPointCollection.Add(MindFusion.Diagramming.Wpf.AnchorPoint)">
            <summary>
            Adds the specified anchor point to the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPointCollection.Insert(System.Int32,MindFusion.Diagramming.Wpf.AnchorPoint)">
            <summary>
            Inserts the specified anchor point in the collection
            at the specified position.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPointCollection.GetAt(System.Int32)">
            <summary>
            Gets the anchor point at the specified position.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPointCollection.Remove(MindFusion.Diagramming.Wpf.AnchorPoint)">
            <summary>
            Removes the specified anchor point from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPointCollection.Clear">
            <summary>
            Removes all anchor points from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPointCollection.Contains(MindFusion.Diagramming.Wpf.AnchorPoint)">
            <summary>
            Checks whether the specified anchor point is contained
            in the collection.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPointCollection.Item(System.Int32)">
            <summary>
            Gets or sets the anchor point at the specified position.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ShapeCollection">
            <summary>
            Represents a read-only collection of shapes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeCollection.#ctor">
            <summary>
            Initializes a new instance of the ShapeCollection class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeCollection.#ctor(System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the ShapeCollection class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeCollection.#ctor(MindFusion.Diagramming.Wpf.Shape[])">
            <summary>
            Initializes a new instance of the ShapeCollection class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeCollection.GetAt(System.Int32)">
            <summary>
            Gets the shape at the specified position.
            </summary>
            <param name="index">
            The zero-based index of the shape to retrieve.
            </param>
            <returns>
            An instance of the Shape class that represents the shape
            at the specified position.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeCollection.Contains(MindFusion.Diagramming.Wpf.Shape)">
            <summary>
            Checks whether the specified shape is contained
            in the collection.
            </summary>
            <param name="shape">
            The Shape object to search for in the collection.
            </param>
            <returns>
            true if the specified item was found in the collection;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies a range of shapes from this collection to the
            specified one-dimensional array starting at the specified
            index of the target array.
            </summary>
            <param name="array">
            The one-dimensional Array that is the destination of the
            elements copied from the current collection.
            </param>
            <param name="index">
            A 32-bit integer that represents the index in array at which
            copying begins.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeCollection.GetEnumerator">
            <summary>
            Returns an enumerator for this collection.
            </summary>
            <returns>
            An .NET IEnumerator for the collection.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the diagram item at the specified position.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether the access to this
            collection is synchronized.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchoronize access
            to this collection.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ReadOnlyCollection">
            <summary>
            Represents a read-only wrapper of a collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ReadOnlyCollection.#ctor(System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the ReadonlyCollection class.
            </summary>
            <param name="innerCollection">
            A .NET ICollection that represents the collection to wrap.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ReadOnlyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            An .NET IEnumerator for the collection.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ReadOnlyCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies a range of elements from this collection to a compatible
            one-dimensional System.Array, starting at the specified index of
            the target array.
            </summary>
            <param name="array">
            The one-dimensional Array that is the destination of the elements
            copied from the current collection.
            </param>
            <param name="index">
            A 32-bit integer that represents the index in array at which
            copying begins.
            </param>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ReadOnlyCollection.innerCollection">
            <summary>
            The underlying (mutable) collection.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ReadOnlyCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ReadOnlyCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ReadOnlyCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether the access to the collection
            is synchronized.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ReadOnlyDiagramItemCollection">
            <summary>
            Represents a read-only collection of items.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ReadOnlyDiagramItemCollection.#ctor(MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Initializes a new instance of the ReadOnlyDiagramItemCollection class.
            </summary>
            <remarks>
            A DiagramItemCollection object that represents the collection to wrap.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ReadOnlyDiagramItemCollection.IndexOf(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Searches for the specified DiagramItem and returns the 0-based
            index of the first occurrence within the entire collection.
            </summary>
            <param name="item">
            The DiagramItem whose index to retreive from the collection.
            </param>
            <returns>
            The zero-based index of the specified item within the colleciton;
            or -1 if the item is not found.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ReadOnlyDiagramItemCollection.Contains(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Checks whether the specified DiagramItem is contained
            withing the collection.
            </summary>
            <param name="item">
            The DiagramItem to search for in the collection.
            </param>
            <returns>
            true if the specified item is contained in the collection;
            otherwise, false.
            </returns>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ReadOnlyDiagramItemCollection.innerCollection">
            <summary>
            The underlying (mutable) collection.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ReadOnlyDiagramItemCollection.Item(System.Int32)">
            <summary>
            Gets the DiagramItem at the specified position.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ReadOnlyDiagramNodeCollection">
            <summary>
            Represents a read-only collection of nodes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ReadOnlyDiagramNodeCollection.#ctor(MindFusion.Diagramming.Wpf.DiagramNodeCollection)">
            <summary>
            Initializes a new instance of the ReadOnlyDiagramNodeCollection class.
            </summary>
            <param name="innerCollection">
            A DiagramNodeCollection object that represents the collection to wrap.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ReadOnlyDiagramNodeCollection.IndexOf(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Searches for the specified DiagramNode and returns the 0-based
            index of the first occurrence within the entire collection.
            </summary>
            <param name="node">
            The DiagramNode whose index to retreive from the collection.
            </param>
            <returns>
            The zero-based index of the specified node within the colleciton;
            or -1 if the node is not found.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ReadOnlyDiagramNodeCollection.Contains(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Checks whether the specified DiagramNode is contained within
            the collection.
            </summary>
            <param name="node">
            The DiagramNode to search for in the collection.
            </param>
            <returns>
            true if the specified node is contained in the collection;
            otherwise, false.
            </returns>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ReadOnlyDiagramNodeCollection.innerCollection">
            <summary>
            The underlying (mutable) collection.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ReadOnlyDiagramNodeCollection.Item(System.Int32)">
            <summary>
            Gets the DiagramNode at the specified position.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ReadOnlyDiagramLinkCollection">
            <summary>
            Represents a read-only collection of links.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ReadOnlyDiagramLinkCollection.#ctor(MindFusion.Diagramming.Wpf.DiagramLinkCollection)">
            <summary>
            Initializes a new instance of the ReadOnlyDiagramLinkCollection class.
            </summary>
            <param name="innerCollection">
            A DiagramLinkCollection object that represents the collection to wrap.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ReadOnlyDiagramLinkCollection.IndexOf(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Searches for the specified DiagramLink and returns the 0-based
            index of the first occurrence within the entire collection.
            </summary>
            <param name="link">
            The DiagramLink whose index to retreive from the collection.
            </param>
            <returns>
            The zero-based index of the specified link within the colleciton;
            or -1 if the link is not found.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ReadOnlyDiagramLinkCollection.Contains(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Checks whether the specified DiagramLink is contained
            within the collection.
            </summary>
            <param name="link">
            The DiagramLink to search for in the collection.
            </param>
            <returns>
            true if the specified link is contained in the collection;
            otherwise, false.
            </returns>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ReadOnlyDiagramLinkCollection.innerCollection">
            <summary>
            The underlying (mutable) collection.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ReadOnlyDiagramLinkCollection.Item(System.Int32)">
            <summary>
            Gets the DiagramLink at the specified position.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ContentCollection">
            <summary>
            Allows creating diagram items thorugh XAML.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContentCollection.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the ContentCollection class.
            </summary>
            <param name="diagram"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContentCollection.OnValidate(System.Object)">
            <summary>
            IList.OnValidate implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContentCollection.Add(System.Object)">
            <summary>
            Adds the specified item to the collection.
            </summary>
            <param name="value">An instance of DiagramItem or UIElement derived class.</param>
            <returns>The zero-based index of the item that was just added.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContentCollection.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContentCollection.Contains(System.Object)">
            <summary>
            Gets a value that indicates whether the item is a member of the collection.
            </summary>
            <param name="value">The item to locate in the list.</param>
            <returns>true if the specified item is in the collection; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContentCollection.IndexOf(System.Object)">
            <summary>
            Gets the zero-based index of the item in the underlying collection.
            </summary>
            <param name="value">The item to locate in the list.</param>
            <returns>The zero-based index of the specified item in the collection.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContentCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item into the list at the zero-based index specified.
            </summary>
            <param name="index">The zero-based position of the insertion.</param>
            <param name="value">An instance of DiagramItem or UIElement derived class.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContentCollection.Remove(System.Object)">
            <summary>
            Removes the specified item from the list. 
            </summary>
            <param name="value">The item to remove from the list.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContentCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the list item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ContentCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            IList.CopyTo implementation.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ContentCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the list has a fixed size.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ContentCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the list is read-only.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ContentCollection.Item(System.Int32)">
            <summary>
            IList indexer implementation.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ContentCollection.System#Collections#ICollection#Count">
            <summary>
            Gets the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ContentCollection.IsSynchronized">
            <summary>
            IList.IsSynchronized implementation.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ContentCollection.SyncRoot">
            <summary>
            IList.SyncRoot implementation.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.AnnealLayoutInfo">
            <summary>
            Contains settings for the LayeredLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.AnnealLayoutInfo.#ctor">
            <summary>
            Initializes a new instance of the AnnealLayoutInfo class.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.AnnealLayoutInfo.DistributionFactor">
            <summary>
            Gets or sets a value indicating the importance of node
            distribution relative to the other criteria considered
            by the algorithm.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.AnnealLayoutInfo.BoundaryFactor">
            <summary>
            Gets or sets a value indicating the importance of layout
            area boundary relative to the other criteria considered
            by the algorithm.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.AnnealLayoutInfo.EdgeLengthFactor">
            <summary>
            Gets or sets a value indicating the importance of short
            length of links relative to the other criteria considered
            by the algorithm.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.AnnealLayoutInfo.CrossingEdgesCost">
            <summary>
            Gets or sets a value indicating the importance of low number
            of link crossings relative to the other criteria considered
            by the algorithm.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.AnnealLayoutInfo.NodeEdgeDistFactor">
            <summary>
            Gets or sets a value indicating the importance of the distance
            between nodes and links relative to the other criteria considered
            by the algorithm.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.AnnealLayoutInfo.NodeEdgeCrossingCost">
            <summary>
            Gets or sets a value indicating the importance of low number
            of crossings between links and nodes relative to the other
            criteria considered by the algorithm.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.AnnealLayoutInfo.Temperature">
            <summary>
            Gets or sets the initial temperature of the simulated annealing process.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.AnnealLayoutInfo.TemperatureScale">
            <summary>
            Gets or sets how much the simulated temperature is decreased
            at each stage of the algorithm.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.AnnealLayoutInfo.IterationsPerStage">
            <summary>
            Gets or sets how many node shift iterations to perform at each
            stage of the algorithm.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.AnnealLayoutInfo.Stages">
            <summary>
            Gets or sets how many temperature decrease stages the algorithm should simulate.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.AnnealLayoutInfo.LayoutArea">
            <summary>
            Gets or sets the size of the layout area.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.AnnealLayoutInfo.WidthHeightRatio">
            <summary>
            Gets or sets what width / height ratio the layout area should have.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.AnnealLayoutInfo.Randomize">
            <summary>
            Gets or sets a value indicating whether the nodes should be placed
            at random positions when the layout routine starts.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.AnnealLayout">
            <summary>
            Implements a simulated annealing graph layout algorithm.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.AnnealLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.AnnealLayoutInfo)">
            <summary>
            Applies the layout on the specified graph using the specified settings.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.AnnealLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.AnnealLayoutInfo,MindFusion.Layout.LayoutProgress)">
            <summary>
            Applies the layout on the specified graph using the specified settings
            and progress callback delegate.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.AnnealLayout.SquareDistToLineSegment(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates distance from the specified point to the specified line segment
            </summary>
        </member>
        <member name="T:MindFusion.Layout.AnnealLayoutStatistics">
            <summary>
            Contains the accumulated costs for a graph configuration produced by AnnealLayout.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.AnnealLayoutStatistics.ToString">
            <summary>
            Object.ToString override.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.AnnealLayoutStatistics.DistributionCost">
            <summary>
            The total distribution cost of a graph configuration.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.AnnealLayoutStatistics.BoundaryCost">
            <summary>
            The total distance-to-boundary cost of a graph configuration.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.AnnealLayoutStatistics.EdgeLengthsCost">
            <summary>
            The total edge lengths cost of a graph configuration.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.AnnealLayoutStatistics.EdgeCrossingsCost">
            <summary>
            The total edge crossings cost of a graph configuration.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.AnnealLayoutStatistics.NodeEdgeDistance">
            <summary>
            The total node-to-edge-distance cost of a graph configuration.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.AnnealLayoutStatistics.EdgeCrossingsFound">
            <summary>
            The number of edge crossings in the graph configuration.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ILinkRouter">
            <summary>
            Defines methods that should be implemented by a link-router component.
            The control calls them when a new link path should be set in response to
            changes in the diagram, such as adding or modifying nodes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ILinkRouter.RouteLink(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Called when a single link must be routed.
            </summary>
            <param name="link">A DiagramLink object representing the link.</param>
            <returns>true if a path has been found, otherwise false.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ILinkRouter.RouteLinks(MindFusion.Diagramming.Wpf.DiagramLinkCollection)">
            <summary>
            Called when more than one links must be routed.
            </summary>
            <param name="links">A DiagramLinkCollection containing the links that should be routed.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ILinkRouter.Suspend">
            <summary>
            Called when the control starts a batch update operation that might affect many links.
            Implementations might collect the links specified through RouteLink and RouteLinks calls
            and defer finding their paths for when Resume is called.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ILinkRouter.Resume(System.Boolean)">
            <summary>
            Called when the control ends a batch update operation that might affect many links.
            </summary>
            <param name="routeDeferredLinks">true if the links should be routed, otherwise false.</param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ILinkRouter.Diagram">
            <summary>
            Gets or sets the diagram this router is associated with.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.SimpleOrientation">
            <summary>
            Specifies the preferred orientation for the main connector type in FlowLayout.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SimpleOrientation.LeftToRight">
            <summary>
            Specifies left-to-right orientation.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SimpleOrientation.RightToLeft">
            <summary>
            Specifies right-to-left orientation.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SimpleOrientation.BottomToTop">
            <summary>
            Specifies bottom-to-top orientation.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SimpleOrientation.TopToBottom">
            <summary>
            Specifies top-to-bottom orientation.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SimpleOrientation.None">
            <summary>
            Unspecified orientation.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.LayoutRules">
            <summary>
            Summary description for LayoutRules.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayoutRules.#ctor">
            <summary>
            Initializes a new instance of the LayoutRules class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayoutRules.GetLayoutRule(System.Object,System.Object@)">
            <summary>
            If there is rule with key - Key initializes - Value otherwise fails;
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayoutRules.RemovetLayoutRule(System.Object)">
            <summary>
            If there is rule with key - Key removes the key - value, otherwise fails;
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayoutRules.AddLayoutRule(System.Object,System.Object)">
            <summary>
            Adds or sets a new rule, depending on if the rule with key - Key already exists or no;
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayoutRules.AddLayoutRule(System.Object,System.Object,System.Object)">
            <summary>
            Builds a key as a pair of the objects Object1 and Object2 and adds or sets a new rule, 
            with this key anf value - Value;
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayoutRules.BuildKey(System.Object,System.Object)">
            <summary>
            Builds a key - object for the new rule, as a pair of two objects: obj1 and obj2
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayoutRules.ValidateRules(System.Collections.ArrayList)">
            <summary>
            Checks if there is a rule for each key in KeyList
            </summary>
        </member>
        <member name="T:MindFusion.Layout.SimpleRules">
            <summary>
            Class of simple rules requisited for Flowlayout algorithm.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.SimpleRules.#ctor(System.Collections.ArrayList,System.Collections.ArrayList,System.String,MindFusion.Layout.SimpleOrientation)">
            <summary>
            Initializes a new instance of the SimpleRules class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.SimpleRules.#ctor(System.Collections.ArrayList,System.Collections.ArrayList,System.String)">
            <summary>
            Initializes a new instance of the SimpleRules class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.SimpleRules.#ctor">
            <summary>
            Initializes a new instance of the SimpleRules class.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SimpleRules.StartSubgproupNode">
            <summary>
            Defines which type of nodes will be used as a "sub group" start node.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SimpleRules.EndSubgproupNode">
            <summary>
            Defines which type of nodes will be used as a "sub group end" node.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SimpleRules.MainSubgproupConnector">
            <summary>
            Defines which type of connectors can be used as guideline
            (defining the graph control flow).
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SimpleRules.MainConnectorOrientation">
            <summary>
            A key defining the space orientation of a "Control Flow" and
            respectively for the layout;
            </summary>
        </member>
        <member name="T:MindFusion.Layout.SimpleKeys">
            <summary>
            Defines keys that can be used to define FlowLayout rules.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SimpleKeys.GroupStartNodes">
            <summary>
            Specifies which nodes should be considered the start of a new sub-group.
            Associate an array of the node types logic identifiers with this key.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SimpleKeys.GroupEndNodes">
            <summary>
            Specifies which nodes should be considered the end of the current sub-group.
            Associate an array of the node types logic identifiers with this key.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SimpleKeys.MainSubgroupConnector">
            <summary>
            Defines which type of connectors can be used as guideline (defining the graph control flow).
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SimpleKeys.MainConnectorOrientation">
            <summary>
            Specifies the orientation of the “Control Flow” sequence of links,
            and thus the main orientation for the layout.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SimpleKeys.FirstGroupLevelPositive">
            <summary>
            A rule defining which nodes should be placed below the “Control Flow” line.
            Associate an array of the node types logic identifiers with this key.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SimpleKeys.FirstGroupLevelNegative">
            <summary>
            A rule defining which nodes should be placed above the “Control Flow” line.
            Associate an array of the node types logic identifiers with this key.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SimpleKeys.PossibleConnection">
            <summary>
            Specifies what kind of node connections are allowed.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SimpleKeys.ConnectorTypes">
            <summary>
            Specifies a list of connector identifiers.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.SimpleKeys.#ctor">
            <summary>
            Initializes a new instance of the SimpleKeys class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.SimpleKeys.ValidateRules(MindFusion.Layout.LayoutRules)">
            <summary>
            Checks if there is a rule for each key in the key list.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SimpleKeys.AllKeys">
            <summary>
            A list of all keys defined in this class.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.SimpleLinkLogic">
            <summary>
            Contains link identifiers for the predefined SimpleRules set of rules.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SimpleLinkLogic.Master">
            <summary>
            Identifier for the main connector type.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SimpleLinkLogic.Slave">
            <summary>
            Identifier for the secondary connector type.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SimpleLinkLogic.NotSpecified">
            <summary>
            Unspecified connector type.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.SimpleLinkLogic.#ctor">
            <summary>
            Initializes a new instance of the SimpleLinkLogic class.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SimpleLinkLogic.PossibleConnectors">
            <summary>
            Returns a list of the predefined connector identifiers.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.SimpleNodeLogic">
            <summary>
            Contains node identifiers for the predefined SimpleRules set of rules.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SimpleNodeLogic.Start">
            <summary>
            Identifier for group start nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SimpleNodeLogic.End">
            <summary>
            Identifier for group end nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SimpleNodeLogic.Action">
            <summary>
            Identifier for action nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SimpleNodeLogic.NotSpecified">
            <summary>
            Unspecified node type.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SimpleNodeLogic.PossibleNodeLogic">
            <summary>
            Returns a list of the predefined node identifiers.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.NodeRules">
            <summary>
            Represents a set of rules that are applied according to the
            logic identifiers of node pairs.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.NodeRules.FirstGroupLevelPositive">
            <summary>
            A rule defining which nodes should be placed below the “Control Flow” line.
            Assign an array of the node types logic identifiers to this property.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.NodeRules.FirstGroupLevelNegative">
            <summary>
            A rule defining which nodes should be placed above the “Control Flow” line.
            Assign an array of the node types logic identifiers to this property.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.NodeRules.GroupEndNodes">
            <summary>
            Specifies which nodes should be considered the end of the current sub-group.
            Assign an array of the node types logic identifiers to this property.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.NodeRules.GroupStartNodes">
            <summary>
            Specifies which nodes should be considered the start of a new sub-group.
            Assign an array of the node types logic identifiers to this property.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.NodeRules.MainConnectorOrientation">
            <summary>
            Specifies the orientation of the “Control Flow” sequence of links,
            and thus the main orientation for the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.NodeRules.MainConnectorId">
            <summary>
            Specifies which type of connectors define the control flow
            in the process represented by the arranged diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.NodeRules.VerticalSubgroupsAlignment">
            <summary>
            Specifies whether connected subgroups from the same lane should be aligned
            and arranged vertically.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.ConnectorRules">
            <summary>
            Represents a set of rules that are applied according to the logic identifiers of links.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.ConnectorRules.HorizontalBendOrientation">
            <summary>
            Specifies whether links should start with a horizontal segment.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.ConnectorRules.DownOriented">
            <summary>
            Specifies a set of link identifiers for which nodes connected via
            such links will be placed downwards from already arranged nodes.
            You can assign a single logic identifier or an array of identifiers to this property.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.ConnectorRules.LeftOriented">
            <summary>
            Specifies a set of link identifiers for which nodes connected via
            such links will be placed leftwards from already arranged nodes.
            You can assign a single logic identifier or an array of identifiers to this property.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.ConnectorRules.RightOriented">
            <summary>
            Specifies a set of link identifiers for which nodes connected via
            such links will be placed rightwards from already arranged nodes.
            You can assign a single logic identifier or an array of identifiers to this property.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.ConnectorRules.UpOriented">
            <summary>
            Specifies a set of link identifiers for which nodes connected via
            such links will be placed upwards from already arranged nodes.
            You can assign a single logic identifier or an array of identifiers to this property.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.FlowLayoutRules">
            <summary>
            A class representing a set of rules that define the behavior of the FlowLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.#ctor">
            <summary>
            Initializes a new instance of the FlowLayoutRules class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.UseRuleManagedLinkBend(System.Boolean)">
            <summary>
            Specifies whether FlowLayout should use custom link-bending rules
            specified through the various Add*BendRule methods.
            </summary>
            <param name="ruleManaged">true to use custom link-bending rules; otherwise, false.</param>
            <returns>true if this rule has been set successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddBendRule(System.String,System.String,MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the starting or ending segment of
            a link according to the type of the node connected to that link.
            </summary>
            <param name="nodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation of the links
            starting or ending segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddBendRule(System.String,System.String,MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the starting or ending segments of
            a link according to the type of the node connected to that link.
            </summary>
            <param name="nodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links starting or ending segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddBendRule(System.String[],System.String,MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the starting or ending segment of
            a link according to the type of the node connected to that link.
            </summary>
            <param name="nodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation of the links
            starting or ending segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddBendRule(System.String[],System.String,MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the starting or ending segments of
            a link according to the type of the node connected to that link.
            </summary>
            <param name="nodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links starting or ending segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddBendRule(System.String,System.String[],MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the starting or ending segment of
            a link according to the type of the node connected to that link.
            </summary>
            <param name="nodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation of the links
            starting or ending segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddBendRule(System.String,System.String[],MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the starting or ending segments of
            a link according to the type of the node connected to that link.
            </summary>
            <param name="nodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links starting or ending segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String,System.String,MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the ending segment of an incoming
            link according to the type of the link's destination node.
            </summary>
            <param name="destNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's ending segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String,System.String,MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the ending segments of an incoming
            link according to the type of the link's destination node.
            </summary>
            <param name="destNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links ending segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String[],System.String,MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the ending segment of an incoming
            link according to the type of the link's destination node.
            </summary>
            <param name="destNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's ending segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String[],System.String,MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the ending segments of an incoming
            link according to the type of the link's destination node.
            </summary>
            <param name="destNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links ending segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String,System.String[],MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the ending segment of an incoming
            link according to the type of the link's destination node.
            </summary>
            <param name="destNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's ending segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String,System.String[],MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the ending segments of an incoming
            link according to the type of the link's destination node.
            </summary>
            <param name="destNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links ending segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String[],System.String[],MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the ending segment of an incoming
            link according to the type of the link's destination node.
            </summary>
            <param name="destNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's ending segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String[],System.String[],MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the ending segments of an incoming
            link according to the type of the link's destination node.
            </summary>
            <param name="destNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links ending segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String,System.String,System.String,MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the ending segment of an incoming
            link according to the type of the link's destination and origin node.
            </summary>
            <param name="destNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="originNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's ending segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String,System.String,System.String,MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the ending segments of an incoming
            link according to the type of the link's destination and origin node.
            </summary>
            <param name="destNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="originNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links ending segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String[],System.String,System.String,MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the ending segment of an incoming
            link according to the type of the link's destination and origin node.
            </summary>
            <param name="destNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="originNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's ending segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String[],System.String,System.String,MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the ending segments of an incoming
            link according to the type of the link's destination and origin node.
            </summary>
            <param name="destNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="originNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links ending segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String,System.String[],System.String,MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the ending segment of an incoming
            link according to the type of the link's destination and origin node.
            </summary>
            <param name="destNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="originNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's ending segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String,System.String[],System.String,MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the ending segments of an incoming
            link according to the type of the link's destination and origin node.
            </summary>
            <param name="destNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="originNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links ending segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String[],System.String[],System.String,MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the ending segment of an incoming
            link according to the type of the link's destination and origin node.
            </summary>
            <param name="destNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="originNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's ending segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String[],System.String[],System.String,MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the ending segments of an incoming
            link according to the type of the link's destination and origin node.
            </summary>
            <param name="destNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="originNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links ending segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String,System.String,System.String[],MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the ending segment of an incoming
            link according to the type of the link's destination and origin node.
            </summary>
            <param name="destNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="originNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's ending segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String,System.String,System.String[],MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the ending segments of an incoming
            link according to the type of the link's destination and origin node.
            </summary>
            <param name="destNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="originNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links ending segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String[],System.String,System.String[],MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the ending segment of an incoming
            link according to the type of the link's destination and origin node.
            </summary>
            <param name="destNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="originNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's ending segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String[],System.String,System.String[],MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the ending segments of an incoming
            link according to the type of the link's destination and origin node.
            </summary>
            <param name="destNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="originNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links ending segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String,System.String[],System.String[],MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the ending segment of an incoming
            link according to the type of the link's destination and origin node.
            </summary>
            <param name="destNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="originNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's ending segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String,System.String[],System.String[],MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the ending segments of an incoming
            link according to the type of the link's destination and origin node.
            </summary>
            <param name="destNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="originNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links ending segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String[],System.String[],System.String[],MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the ending segment of an incoming
            link according to the type of the link's destination and origin node.
            </summary>
            <param name="destNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="originNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's ending segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddIncomingBendRule(System.String[],System.String[],System.String[],MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the ending segments of an incoming
            link according to the type of the link's destination and origin node.
            </summary>
            <param name="destNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="originNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links ending segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String,System.String,MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the starting segment of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's starting segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String,System.String,MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the starting segments of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links starting segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String[],System.String,MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the starting segment of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's starting segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String[],System.String,MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the starting segments of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links starting segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String,System.String[],MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the starting segment of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's starting segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String,System.String[],MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the starting segments of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links starting segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String[],System.String[],MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the starting segment of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's starting segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String[],System.String[],MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the starting segments of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifier of links this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links starting segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String,System.String,System.String,MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the starting segment of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="destNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's starting segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String,System.String,System.String,MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the starting segments of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="destNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links starting segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String[],System.String,System.String,MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the starting segment of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="destNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's starting segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String[],System.String,System.String,MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the starting segments of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="destNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links starting segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String,System.String[],System.String,MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the starting segment of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="destNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's starting segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String,System.String[],System.String,MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the starting segments of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="destNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links starting segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String[],System.String[],System.String,MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the starting segment of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="destNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's starting segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String[],System.String[],System.String,MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the starting segments of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="destNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links starting segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String,System.String,System.String[],MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the starting segment of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="destNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's starting segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String,System.String,System.String[],MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the starting segments of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="destNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links starting segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String[],System.String,System.String[],MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the starting segment of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="destNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's starting segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String[],System.String,System.String[],MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the starting segments of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkType">The logic identifier of links this rule should be applied to.</param>
            <param name="destNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links starting segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String,System.String[],System.String[],MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the starting segment of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="destNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's starting segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String,System.String[],System.String[],MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the starting segments of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeType">The logic identifier of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="destNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links starting segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String[],System.String[],System.String[],MindFusion.Layout.OrderDirection)">
            <summary>
            Adds a rule for the orientation of the starting segment of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="destNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="direction">An OrderDirection value defining the orientation
            of the link's starting segment.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutRules.AddOutgoingBendRule(System.String[],System.String[],System.String[],MindFusion.Layout.OrderDirection[])">
            <summary>
            Adds a rule for the orientation of the starting segments of an outgoing
            link according to the type of the link's origin node.
            </summary>
            <param name="originNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="linkTypes">The logic identifiers of links this rule should be applied to.</param>
            <param name="destNodeTypes">The logic identifiers of nodes this rule should be applied to.</param>
            <param name="directions">An array of OrderDirection values defining
            the orientation of the links starting segments.</param>
            <returns>true if this rule has been added successfully; otherwise, false.</returns>
        </member>
        <member name="P:MindFusion.Layout.FlowLayoutRules.PreferredRules">
            <summary>
            Specifies which set of rules to use.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.FlowLayoutRules.NodeRules">
            <summary>
            A set of rules that are applied according to the logic identifiers of node pairs.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.FlowLayoutRules.ConnectorRules">
            <summary>
            A set of rules that are applied according to the logic identifiers of links.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Action">
            <summary>
            Specifies the possible actions a user can carry out on diagram items.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Action.None">
            <summary>
            Do not perform any action.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Action.Create">
            <summary>
            Draw a new item.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Action.Modify">
            <summary>
            Modify an existing item.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Action.Split">
            <summary>
            Split a link's segment.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Anchoring">
            <summary>
            Defines values that specify how automatic layout algorithms align
            links to anchor points.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Anchoring.Ignore">
            <summary>
            Anchor points are ignored.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Anchoring.Keep">
            <summary>
            Links are aligned to their original anchor points.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Anchoring.Reassign">
            <summary>
            Links are aligned to new anchor points, depending on
            the positions of graph nodes after a layout is applied.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.AnchorPosition">
            <summary>
            Specifies link anchoring relative to the origin or destination
            node's bounding rectangle.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AnchorPosition.NoAnchor">
            <summary>
            Indicates no anchoring.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AnchorPosition.HorzCenter">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AnchorPosition.VertCenter">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AnchorPosition.LeftCenter">
            <summary>
            Indicates anchoring at the center of the left side of
            the node's bounding rectangle.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AnchorPosition.RightCenter">
            <summary>
            Indicates anchoring at the center of the right side of
            the node's bounding rectangle.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AnchorPosition.TopCenter">
            <summary>
            Indicates anchoring at the center of the top side of
            the node's bounding rectangle.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AnchorPosition.BottomCenter">
            <summary>
            Indicates anchoring at the center of the bottom side of
            the node's bounding rectangle.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.LinkCrossings">
            <summary>
            Defines values that indicate how to render link intersection points.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.LinkCrossings.Straight">
            <summary>
            No special indication for link intersection points.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.LinkCrossings.Arcs">
            <summary>
            An arc is drawn at the intersection point of two links.
            It connects the segments of the link at higher Z position
            and goes over the link at lower Z.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.LinkCrossings.Cut">
            <summary>
            The intersection segments of links at lower Z position
            are cut by links at higher Z position.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.LinkShape">
            <summary>
            Specifies available link shapes.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.LinkShape.Bezier">
            <summary>
            The segments of a link are Bezier curves.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.LinkShape.Polyline">
            <summary>
            The segments of the link are straight lines.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.LinkShape.Cascading">
            <summary>
            The segments of a link are horizontal and vertical lines,
            each one orthogonal to each adjacent segment.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.LinkTextStyle">
            <summary>
            Specifies the position and alignment of links' labels.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.LinkTextStyle.Center">
            <summary>
            The text is displayed horizontally above the middle
            link segment or control point, depending on whether
            there are an odd or even number of segments.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.LinkTextStyle.Rotate">
            <summary>
            The text is displayed rotated at the same angle as the
            segment where the text is placed. A long enough segment
            from the middle link segments is chosen for that purpose.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.LinkTextStyle.OverLongestSegment">
            <summary>
            The text follows the longest link segment and is displayed
            centered at the segment's middle point.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.LinkTextStyle.Follow">
            <summary>
            The label text starts from the first point of the link
            and follows the path defined by the link segments. This
            style is useful for displaying long text.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.AttachTo">
            <summary>
            Specifies the type of attachment in a group.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AttachTo.FixedCorner">
            <summary>
            Indicates attachment to a fixed corner of a node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AttachTo.Proportional">
            <summary>
            Indicates proportional attachment to a node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AttachTo.LinkPoint">
            <summary>
            Indicates attachment to an link's control point.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AttachTo.LinkSegment">
            <summary>
            Indicates attachment to an link's segment.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AttachTo.LongestHSegment">
            <summary>
            Indicates attachment to the longest horizontal segment of a link.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AttachTo.SideMiddle">
            <summary>
            Indicates attachment to the middle of a side of a node's
            bounding rectangle.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AttachTo.AnchorToEdges">
            <summary>
            Indicates attachment that is anchored to one or more sides
            of a node.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.AttachToLink">
            <summary>
            Specifies the possible ways to attach a node to a link.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AttachToLink.Point">
            <summary>
            The node is attached to a fixed control point of the link.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AttachToLink.Segment">
            <summary>
            The node is attached to a fixed segment of the link.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AttachToLink.LongestHSegment">
            <summary>
            The node stays attached to the longest horizontal segment of the link.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.AttachToNode">
            <summary>
            Defines values specifying the possible ways to attach a node to another node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AttachToNode.TopLeft">
            <summary>
            The node follows the top-left corner of the master node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AttachToNode.TopRight">
            <summary>
            The node follows the top-right corner of the master node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AttachToNode.BottomLeft">
            <summary>
            The node follows the bottom-left corner of the master node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AttachToNode.BottomRight">
            <summary>
            The node follows the bottom-right corner of the master node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AttachToNode.TopCenter">
            <summary>
            The node follows the top-center point of the master node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AttachToNode.MiddleRight">
            <summary>
            The node follows the middle-right point of the master node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AttachToNode.BottomCenter">
            <summary>
            The node follows the bottom-center point of the master node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AttachToNode.MiddleLeft">
            <summary>
            The node follows the middle-left point of the master node.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.AutoResize">
            <summary>
            Defines in which directions automatic resizing can enlarge
            the diagram scrollable area.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AutoResize.None">
            <summary>
            Do not enlarge the diagram area automatically.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AutoResize.RightAndDown">
            <summary>
            Enlarge the diagram area to the right and down if an item is
            moved outside the boundaries in these directions.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AutoResize.AllDirections">
            <summary>
            Enlarge the diagram area in any direction if an item is
            moved outside the boundaries.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Behavior">
            <summary>
            Defines values that specify how the component responds to
            actions performed by the user.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Behavior.Modify">
            <summary>
            Objects can be selected and modified. New objects cannot be created.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Behavior.DrawShapes">
            <summary>
            Drawing with the mouse creates ShapeNode instances.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Behavior.DrawLinks">
            <summary>
            Drawing started over a node creates a DiagramLink. Otherwise a
            lasso rectangle is displayed allowing the selection of items.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Behavior.LinkShapes">
            <summary>
            A mode that is suitable for creating flowcharts and process
            diagrams. Drawing over empty document area creates a ShapeNode
            instance. Drawing started over a node creates a DiagramLink.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Behavior.LinkTables">
            <summary>
            A mode that is suitable for creating entity-relationship
            diagrams. Drawing over empty document area creates a TableNode
            instance. Drawing started over a node creates a DiagramLink.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Behavior.DrawTables">
            <summary>
            Drawing with the mouse creates TableNode instances.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Behavior.DrawControls">
            <summary>
            Drawing with the mouse creates a DiagramNodeAdapter object
            that wraps an instance of the DefaultControlType.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Behavior.LinkControls">
            <summary>
            Drawing over empty document area creates a DiagramNodeAdapter
            instance. Drawing started over a node creates a DiagramLink.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Behavior.DoNothing">
            <summary>
            The control ignores users actions with the mouse, but
            raises the appropriate mouse events. This mode allows
            applications to implement their own mouse-drawing behavior,
            disabling the WpfDiagram default response to users actions.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Behavior.Custom">
            <summary>
            Specifies that user input should be handled by the
            BehaviorBase-derived object assigned to CustomBehavior.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Behavior.DrawContainers">
            <summary>
            Drawing with the mouse creates ContainerNode instances.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Behavior.LinkContainers">
            <summary>
            Drawing over empty document area creates a ContainerNode
            instance. Drawing started over a node creates a DiagramLink.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Behavior.Pan">
            <summary>
            Dragging with the mouse pans the view. This requires that
            the Diagram is contained in a ScrollViewer.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Behavior.DrawTreeViews">
            <summary>
            Drawing with the mouse creates TreeViewNode instances.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Behavior.LinkTreeViews">
            <summary>
            Drawing over empty document area creates a TreeViewNode
            instance. Drawing started over a node creates a DiagramLink.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Behavior.DrawNodes">
            <summary>
            Drawing with the mouse creates TemplatedNode instances.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Behavior.LinkNodes">
            <summary>
            Drawing over empty document area creates a TemplatedNode
            instance. Drawing started over a node creates a DiagramLink.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.CellFrameStyle">
            <summary>
            Specifies the style of the cells' frame lines.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.CellFrameStyle.None">
            <summary>
            Table cells have no border.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.CellFrameStyle.Simple">
            <summary>
            The border of table cells is simple line.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.CellFrameStyle.System3D">
            <summary>
            The border has 3D look.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ColumnStyle">
            <summary>
            Specifies how table columns' width is set.
            </summary>
            <remarks>
            Use the enumeration values to set the behavior of table columns,
            when the user resizes the table.
            </remarks>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ColumnStyle.FixedWidth">
            <summary>
            The columns has fixed, unchangeable width.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ColumnStyle.AutoWidth">
            <summary>
            The columns' width changes when the table is resized.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DelKeyAction">
            <summary>
            Specifies the type of action performed when the user presses the DEL key.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DelKeyAction.None">
            <summary>
            Indicates that nothing happens.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DelKeyAction.DeleteActiveItem">
            <summary>
            Indicates that only the ActiveItem is deleted.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DelKeyAction.DeleteSelectedItems">
            <summary>
            Indicates that all selected items are deleted.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.CursorHint">
            <summary>
            Specifies what mouse cursor to display while a user interacts with the diagram.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.CursorHint.Move">
            <summary>
            Indicates the cursor specified by the MoveCursor property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.CursorHint.Rotate">
            <summary>
            Indicates the cursor specified by the RotateCursor property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.CursorHint.HorizontalResize">
            <summary>
            Indicates the cursor specified by the HorizontalResizeCursor property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.CursorHint.VerticalResize">
            <summary>
            Indicates the cursor specified by the VerticalResizeCursor property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.CursorHint.DiagonalResize">
            <summary>
            Indicates the cursor specified by the DiagonalResizeCursor property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.CursorHint.CounterDiagonalResize">
            <summary>
            Indicates the cursor specified by the CounterDiagonalResizeCursor property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.CursorHint.DrawLink">
            <summary>
            Indicates the cursor specified by the DrawLinkCursor property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.CursorHint.Pointer">
            <summary>
            Indicates the cursor specified by the PointerCursor property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.CursorHint.AllowLink">
            <summary>
            Indicates the cursor specified by the AllowLinkCursor property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.CursorHint.DisallowLink">
            <summary>
            Indicates the cursor specified by the DisallowLinkCursor property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.CursorHint.Disallow">
            <summary>
            Indicates the cursor specified by the DisallowCursor property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.CursorHint.DontChange">
            <summary>
            Indicates the cursor specified by the Cursor property.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.CustomDraw">
            <summary>
            Specifies what kind of custom painting to perform on diagram elements.
            </summary>
            <remarks>
            These values can be assigned to the CustomDraw property of shapes,
            tables and links.
            </remarks>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.CustomDraw.None">
            <summary>
            Do not perform custom drawing, let all painting be done by WpfDiagram.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.CustomDraw.Additional">
            <summary>
            The custom painting code executes after item's interior and frame
            are painted by WpfDiagram, but before text is rendered. In this
            mode, the DrawingContext instance passed to the custom drawing event
            handler has a clipping region applied to it.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.CustomDraw.Full">
            <summary>
            The component does not do any standard drawing, the entire painting
            of an item is done by the application.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.CustomDraw.Additional2">
            <summary>
            The custom painting code executes after all parts of an item are
            painted by WpfDiagram. In this mode, the DrawingContext instance passed
            to the custom drawing event handler doesn't have a clipping region
            applied to it.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.SaveToStringFormat">
            <summary>
            Specifies in what format to save the diagram when generating a string
            using the SaveToString method.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.SaveToStringFormat.Xml">
            <summary>
            Indicates a non-compressed XML output.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.SaveToStringFormat.CompressedXml">
            <summary>
            Indicates a compressed XML output.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DirectionConstraint">
            <summary>
            Defines values that specify in what direction to constrain node movement.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DirectionConstraint.None">
            <summary>
            No restrictions.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DirectionConstraint.Horizontal">
            <summary>
            Users are allowed to move the node horizontally.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DirectionConstraint.Vertical">
            <summary>
            Users are allowed to move the node vertically.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ExpandButtonAction">
            <summary>
            Specifies what action is triggered by the +/- buttons that are
            displayed near expandable nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ExpandButtonAction.ExpandTreeBranch">
            <summary>
            Expands or collapses the children of a node in a tree-like
            diagram and raises the TreeExpanded or TreeCollapsed event.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ExpandButtonAction.RaiseEvents">
            <summary>
            Raises the ExpandButtonClicked event.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ExpandButtonPosition">
            <summary>
            Defines values that specify possible locations for expand/collapse buttons.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ExpandButtonPosition.OuterRight">
            <summary>
            Place expand/collapse buttons at the right-hand side of their nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ExpandButtonPosition.OuterLowerRight">
            <summary>
            Place expand/collapse buttons at the lower-right corner of their nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ExpandButtonPosition.OuterUpperRight">
            <summary>
            Place expand/collapse buttons at the upper-right corner of their nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ExpandButtonPosition.OuterBottom">
            <summary>
            Place expand/collapse buttons at the bottom side of their nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ExpandButtonPosition.OuterLeft">
            <summary>
            Place expand/collapse buttons at the left-hand side of their nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ExpandButtonPosition.OuterLowerLeft">
            <summary>
            Place expand/collapse buttons at the lower-left corner of their nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ExpandButtonPosition.OuterUpperLeft">
            <summary>
            Place expand/collapse buttons at the upper-left corner of their nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ExpandButtonPosition.OuterTop">
            <summary>
            Place expand/collapse buttons at the top side of their nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ExpandButtonPosition.Custom">
            <summary>
            Place the expand/collapse button at a position returned by the
            CustomExpandButtonPosition delegate.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.FitSize">
            <summary>
            Specifies how the ResizeToFitText method should resize a node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.FitSize.KeepWidth">
            <summary>
            Specifies that the original node width should remain intact.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.FitSize.KeepHeight">
            <summary>
            Specifies that the original node height should remain intact.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.FitSize.KeepRatio">
            <summary>
            Allows changing both the width and height of a node, but keep
            the original width/height ratio if possible.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.GridStyle">
            <summary>
            Defines values that specify the visual style of the alignment grid.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.GridStyle.Points">
            <summary>
            The grid is painted as a matrix of points.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.GridStyle.Lines">
            <summary>
            The grid is represented as a series of crossing horizontal and
            vertical lines.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.GroupAnchorStyles">
            <summary>
            Specifies the master node edges to which a subordinate node can be anchored.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.GroupAnchorStyles.Left">
            <summary>
            Specifies the left edge.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.GroupAnchorStyles.Top">
            <summary>
            Specifies the top edge.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.GroupAnchorStyles.Right">
            <summary>
            Specifies the right edge.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.GroupAnchorStyles.Bottom">
            <summary>
            Specifies the bottom edge.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.AdjustmentHandles">
            <summary>
            Identifies the distinct selection handles of a node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.None">
            <summary>
            Specifies that none of the selection handles can be used to modify the node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.ResizeTopLeft">
            <summary>
            The top-left handle is enabled and can be used to resize the node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.ResizeTopRight">
            <summary>
            The top-right handle is enabled and can be used to resize the node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.ResizeBottomRight">
            <summary>
            The bottom-right handle is enabled and can be used to resize the node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.ResizeBottomLeft">
            <summary>
            The bottom-left handle is enabled and can be used to resize the node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.ResizeTopCenter">
            <summary>
            The top-center handle is enabled and can be used to resize
            the node vertically.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.ResizeMiddleRight">
            <summary>
            The middle-right handle is enabled and can be used to resize
            the node horizontally.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.ResizeBottomCenter">
            <summary>
            The bottom-center handle is enabled and can be used to resize
            the node vertically.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.ResizeMiddleLeft">
            <summary>
            The middle-left handle is enabled and can be used to resize
            the node horizontally.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.Move">
            <summary>
            The center selection handle is enabled and can be used to move the node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.Rotate">
            <summary>
            The rotation handle is enabled and can be used to rotate the node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.All">
            <summary>
            All selection handles areenabled and canbe used to modify the node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.LeftHandles">
            <summary>
            The top-left, middle-left and bottom-left handles are enabled.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.RightHandles">
            <summary>
            The top-right, bottom-right and middle-right handles are enabled.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.TopHandles">
            <summary>
            The top-left, top-center and top-right handles are enabled.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.BottomHandles">
            <summary>
            The bottom-left, bottom-center and bottom-right handles are enabled.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.CornerHandles">
            <summary>
            The four corner handles are enabled.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.MiddleHandles">
            <summary>
            The four middle handles are enabled.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.ResizeHandles">
            <summary>
            The eight resize handles are enabled.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.WidthHandles">
            <summary>
            All left and right handles are enabled.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.AdjustmentHandles.HeightHandles">
            <summary>
            All top and bottom handles are enabled.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.HandlesStyle">
            <summary>
            Enumerates possible visual styles for frames that are drawn
            around selected nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.HandlesStyle.Invisible">
            <summary>
            There is no visible difference between selected and unselected node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.HandlesStyle.SquareHandles">
            <summary>
            If selected, the node is drawn with square modification handles.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.HandlesStyle.DashFrame">
            <summary>
            If selected, a node is drawn with a dashed frame. The frame
            enables resizing the node. The center of the node allows moving
            it and the edge area enables creating links.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.HandlesStyle.HatchFrame">
            <summary>
            If selected, the object is drawn with hatched frame. Modifications
            can be done as with DashFrame.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.HandlesStyle.HatchHandles">
            <summary>
            If selected, a node is drawn with both hatched frame and
            modification handles. The frame enable moving the node, and
            the handles enable resizing. Links are created from any point
            of the interior.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.HandlesStyle.HatchHandles2">
            <summary>
            Looks like HatchHandles, but allows moving the node from the
            interior area. Links are created from the points near the edge.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.HandlesStyle.HatchHandles3">
            <summary>
            Behaves like HatchHandles2, but paints the selection frame
            using a denser brush pattern.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.HandlesStyle.MoveOnly">
            <summary>
            If a node is selected, it can be only moved. Best used with
            ModificationStart set to AutoHandles.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.HandlesStyle.EasyMove">
            <summary>
            Any point of the interior of a node enables moving the node,
            except a small area in the center that allows creating links.
            Best used with ModificationStart set to AutoHandles.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.HandlesStyle.SquareHandles2">
            <summary>
            Square resize handles are drawn around a selected node.
            There isn't a move-handle in the center as with the SquareHandles
            style, but nodes can be moved by dragging their interior or
            caption areas. Links can be created by drawing from near the
            edges of a node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.HandlesStyle.Custom">
            <summary>
            WpfDiagram raises the DrawHandles and HitTestAdjustmentHandles
            events to let your application perform custom drawing and hit
            testing of selection handles.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.HandlesStyle.InvisibleMove">
            <summary>
            There aren't any selection handles displayed. The selected node
            can be only moved, but not resized.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.HitTestPriority">
            <summary>
            Defines values that specify the order of item hit-testing.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.HitTestPriority.ZOrder">
            <summary>
            Test items in decreasing z-order, independently of their types.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.HitTestPriority.NodesBeforeLinks">
            <summary>
            Test nodes first, then links.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ControlMouseAction">
            <summary>
            Specifies available ways to handle mouse clicks on .NET controls
            hosted in a ControlNode.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ControlMouseAction.PassToControl">
            <summary>
            Let the control handle the mouse click. Do not select the host node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ControlMouseAction.SelectNode">
            <summary>
            The host node gets selected when the control is clicked.
            The control is left to handle the mouse click too.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ControlMouseAction.IgnoreControl">
            <summary>
            WpfDiagram tries to intercept the mouse message and not
            pass it to the control. That allows drawing links from
            anywhere within the control.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.MarkStyle">
            <summary>
            Specifies the visual style of anchor point marks.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.MarkStyle.None">
            <summary>
            No visual indication for the anchor point.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.MarkStyle.Cross">
            <summary>
            No visual indication for the anchor point.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.MarkStyle.X">
            <summary>
            Anchor point marked with an 'X'.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.MarkStyle.Circle">
            <summary>
            Anchor point marked with a circle.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.MarkStyle.Rectangle">
            <summary>
            Anchor point marked with a rectangle.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.MarkStyle.Custom">
            <summary>
            A DrawAnchorPoint event is fired, allowing custom painting of anchor points.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ModificationStart">
            <summary>
            Specifies how the user can start modifying an item.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ModificationStart.SelectedOnly">
            <summary>
            Only selected objects can be modified.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ModificationStart.AutoHandles">
            <summary>
            Adjustment handles appear automatically around the object
            under the mouse; it can be modified without selecting it first.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ModificationEffect">
            <summary>
            Specifies the visual effect to apply during interactive modification of items.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ModificationEffect.None">
            <summary>
            Show the actual modified item as it would look if the user
            completes the modification at the current mouse position.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ModificationEffect.MoveShades">
            <summary>
            Show a semi-transparent shade of the modified item at the current mouse position.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ModifierKeyAction">
            <summary>
            Defines the actions that can be assigned to a modifier key such as CTRL or ALT.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ModifierKeyAction.None">
            <summary>
            Specifies that a modifier key does not have any specific
            function assigned to it.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ModifierKeyAction.Pan">
            <summary>
            Pan the view if the mouse is dragged while the modifier key is pressed down.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ModifierKeyAction.Select">
            <summary>
            Start drawing a selection rectangle if the mouse is dragged
            while a modifier key is pressed down. Toggle the selection
            if an item is clicked while the key is down.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ModifierKeyAction.OverrideBehavior">
            <summary>
            While the modifier key is pressed down, dragging the mouse
            starts creating a new item or drawing a selection rectangle
            instead of modifying a selected item. Otherwise, dragging the
            mouse could start modification of the selected item.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.MouseButton">
            <summary>
            Specifies constants that define which mouse button was pressed.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.MouseButton.None">
            <summary>
            No mouse button was pressed.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.MouseButton.Left">
            <summary>
            The left mouse button was pressed.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.MouseButton.Right">
            <summary>
            The right mouse button was pressed.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.MouseButton.Middle">
            <summary>
            The middle mouse button was pressed.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.MouseButton.XButton1">
            <summary>
            The first XButton was pressed.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.MouseButton.XButton2">
            <summary>
            The second XButton was pressed.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.MouseButtonActions">
            <summary>
            Specifies what actions can be associated with the middle and right mouse buttons.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.MouseButtonActions.None">
            <summary>
            Do not associate any action with the button.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.MouseButtonActions.Pan">
            <summary>
            Pans the view if the mouse is dragged while the button is pressed down.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.MouseButtonActions.Cancel">
            <summary>
            Cancels the current drawing operation.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.MouseButtonActions.Select">
            <summary>
            Starts a multiple selection operation.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.MouseButtonActions.Draw">
            <summary>
            Starts drawing a diagram item.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Orientation">
            <summary>
            Defines values that specify the orientation of the first segment
            of cascading links.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Orientation.Auto">
            <summary>
            WpfDiagram determines automatically the initial direction of
            link's first segment.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Orientation.Horizontal">
            <summary>
            The first segment of the link is always horizontal.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Orientation.Vertical">
            <summary>
            The first segment of the link is always vertical.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Relationship">
            <summary>
            Specifies the type of relationship between two tables.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Relationship.OneToMany">
            <summary>
            The relationship is of type 1:M, that is, one to many.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Relationship.ManyToOne">
            <summary>
            The relationship is of type M:1, that is, many to one.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.RenderTarget">
            <summary>
            Specifies where the diagram is being rendered.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.RenderTarget.Display">
            <summary>
            The disgram is rendered on the screen.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.RenderTarget.Printer">
            <summary>
            The disgram is rendered on a printer.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.RerouteLinks">
            <summary>
            Provides values indicating in what circumstances links must be
            rerouted automatically.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.RerouteLinks.Never">
            <summary>
            Do not reroute links automatically.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.RerouteLinks.WhenModified">
            <summary>
            Reroute a link if its end points are moved around.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.RerouteLinks.WhenIntersectNode">
            <summary>
            Reroute a link if it intersects a node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.RerouteLinks.WhileCreating">
            <summary>
            Route new links while users draw them. This flag can be combined
            with any of the previous two flags.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.RestrictToBounds">
            <summary>
            Specifies the restriction of the position of an object as to
            the document extents.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.RestrictToBounds.NoRestriction">
            <summary>
            No restriction on the position of items.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.RestrictToBounds.Intersection">
            <summary>
            Items must be located at least partially inside the document extents.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.RestrictToBounds.InsideOnly">
            <summary>
            Items must be located entirely inside the document extents.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.SelectionStyle">
            <summary>
            Defines values that specify how multiple selected items are indicated visually.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.SelectionStyle.SelectionHandles">
            <summary>
            Rectangular manipulation handles are painted over selected items.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.SelectionStyle.Frame">
            <summary>
            A dashed rectangle is drawn around selected items.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ShadowsStyle">
            <summary>
            Enumerates possible shadows-drawing styles.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ShadowsStyle.None">
            <summary>
            No shadows are drawn.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ShadowsStyle.OneLevel">
            <summary>
            All shadows are drawn at the lowest z-level, and appear to be on one level.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ShadowsStyle.ZOrder">
            <summary>
            Every shadows is drawn just below its object, possibly covering other objects.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ShowAnchors">
            <summary>
            Specifies when anchors points should be displayed.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ShowAnchors.Always">
            <summary>
            Anchor point marks are always painted.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ShowAnchors.Never">
            <summary>
            Anchor point marks are never painted.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ShowAnchors.Auto">
            <summary>
            Anchor point marks are shown for the node under the mouse cursor.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ShowAnchors.Selected">
            <summary>
            Anchor point marks are painted for the selected node.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.SnapToAnchor">
            <summary>
            Specifies when link ends are snapped to nearest anchor points.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.SnapToAnchor.OnCreate">
            <summary>
            Snap to anchor point when creating a new link.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.SnapToAnchor.OnCreateOrModify">
            <summary>
            Snap to anchor point when creating or modifying a link.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TableConnectionStyle">
            <summary>
            Specifies the possible values for the ConnectionStyle property of tables.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TableConnectionStyle.Table">
            <summary>
            Users are allowed to create relations to a table as whole entity.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TableConnectionStyle.Rows">
            <summary>
            Users are allowed to create relations to the rows of a table.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TableConnectionStyle.Both">
            <summary>
            Users are allowed to create relations both to the rows of
            a table or the the table as a whole.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TableShape">
            <summary>
            Defines the possible values for Style property of tables.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TableShape.Rectangle">
            <summary>
            Sets table's shape to rectangle.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TableShape.RoundedRectangle">
            <summary>
            Sets table's shape to rounded rectangle.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.HyperLinkStyle">
            <summary>
            Specifies how various export components should treat the HyperLink property of items.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.HyperLinkStyle.None">
            <summary>
            Do not generate hyperlinks.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.HyperLinkStyle.Text">
            <summary>
            Generate hyperlinks for the text bounding rectangle.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.HyperLinkStyle.Shape">
            <summary>
            Generate hyperlinks that correspond to the item's shape.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.RuntimeDataKey.LinkCrossings">
            <summary>
            The key of a link's crossings data.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.RuntimeDataKey.LayoutData">
            <summary>
            The key of custom node data during layouts.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.RuntimeDataKey.ModifiedThroughGroup">
            <summary>
            Identifies whether an item in multiple selection
            will be modified through its master group.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.StringFormatFlags">
            <summary>
            Replaces System.Drawing.StringFormatFlags
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.StringFormatFlags.DirectionRightToLeft">
            <summary>
            Text is displayed from right to left.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.StringFormatFlags.DirectionVertical">
            <summary>
            Text is vertically aligned. 
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.StringFormatFlags.FitBlackBox">
            <summary>
            Parts of characters are allowed to overhang the string's layout rectangle. By default, characters are repositioned to avoid any overhang.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.StringFormatFlags.DisplayFormatControl">
            <summary>
             Control characters such as the left-to-right mark are shown in the output with a representative glyph.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.StringFormatFlags.NoFontFallback">
            <summary>
            Fallback to alternate fonts for characters not supported in the requested font is disabled. Any missing characters are displayed with the fonts missing glyph, usually an open square.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.StringFormatFlags.MeasureTrailingSpaces">
            <summary>
             Includes the trailing space at the end of each line. By default the boundary rectangle returned by the MeasureString method excludes the space at the end of each line. Set this flag to include that space in measurement.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.StringFormatFlags.NoWrap">
            <summary>
            Text wrapping between lines when formatting within a rectangle is disabled. This flag is implied when a point is passed instead of a rectangle, or when the specified rectangle has a zero line length.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.StringFormatFlags.LineLimit">
            <summary>
            Only entire lines are laid out in the formatting rectangle. By default layout continues until the end of the text, or until no more lines are visible as a result of clipping, whichever comes first. Note that the default settings allow the last line to be partially obscured by a formatting rectangle that is not a whole multiple of the line height. To ensure that only whole lines are seen, specify this value and be careful to provide a formatting rectangle at least as tall as the height of one line.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.StringFormatFlags.NoClip">
            <summary>
            Overhanging parts of glyphs, and unwrapped text reaching outside the formatting rectangle are allowed to show. By default all text and glyph parts reaching outside the formatting rectangle are clipped.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.HotkeyPrefix">
            <summary>
            Replaces System.Drawing.Text.HotkeyPrefix
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.HotkeyPrefix.None">
            <summary>
            No hot-key prefix. 
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.HotkeyPrefix.Show">
            <summary>
            Display the hot-key prefix. 
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.HotkeyPrefix.Hide">
            <summary>
            Do not display the hot-key prefix. 
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.StringTrimming">
            <summary>
            Replaces System.Drawing.StringTrimming
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.StringTrimming.None">
            <summary>
            Specifies no trimming.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.StringTrimming.Character">
            <summary>
            Specifies that the text is trimmed to the nearest character. 
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.StringTrimming.Word">
            <summary>
            Specifies that text is trimmed to the nearest word. 
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.StringTrimming.EllipsisCharacter">
            <summary>
            Specifies that the text is trimmed to the nearest character, and an ellipsis is inserted at the end of a trimmed line.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.StringTrimming.EllipsisWord">
            <summary>
            Specifies that text is trimmed to the nearest word, and an ellipsis is inserted at the end of a trimmed line.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.StringTrimming.EllipsisPath">
            <summary>
            The center is removed from trimmed lines and replaced by an ellipsis. The algorithm keeps as much of the last slash-delimited segment of the line as possible.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.StringAlignment">
            <summary>
            Replaces System.Drawing.StringAlignment
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.StringAlignment.Near">
            <summary>
            Specifies the text be aligned near the layout. In a left-to-right layout, the near position is left. In a right-to-left layout, the near position is right.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.StringAlignment.Center">
            <summary>
            Specifies that text is aligned in the center of the layout rectangle.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.StringAlignment.Far">
            <summary>
            Specifies that text is aligned far from the origin position of the layout rectangle. In a left-to-right layout, the far position is right. In a right-to-left layout, the far position is left.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TreeViewConnectionStyle">
            <summary>
            Specifies the possible values for the ConnectionStyle property of TreeViewNodes.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TreeViewConnectionStyle.Node">
            <summary>
            Users are allowed to create relations to the TreeViewNode as an integral entity.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TreeViewConnectionStyle.Items">
            <summary>
            Users are allowed to create relations to the items of a TreeViewNode.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Granularity">
            <summary>
            Specifies the granularity of the obstacles map generated by QuickRouter.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Granularity.CoarseGrained">
            <summary>
            Merge map tiles if possible to create a coarse-grained map.
            The fewer tiles in the map lead to faster path-finding.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Granularity.Normal">
            <summary>
            Use the map tiles found by the initial division algorithm.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Granularity.FineGrained">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DummyConnectionPoint">
            <summary>
            Allows unconnected links.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyConnectionPoint.#ctor(MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean,System.Windows.Point)">
            <summary>
            Initializes a new instance of the DummyConnectionPoint class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyConnectionPoint.SameNode(MindFusion.Diagramming.Wpf.ConnectionPoint)">
            <summary>
            ConnectionPoint.SameNode override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyConnectionPoint.LinkChanges(MindFusion.Diagramming.Wpf.DiagramItem,System.Windows.Point)">
            <summary>
            ConnectionPoint.LinkChanges override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyConnectionPoint.GetIntersection(System.Windows.Point,System.Windows.Point)">
            <summary>
            ConnectionPoint.GetIntersection override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyConnectionPoint.GetNodeRect(System.Boolean)">
            <summary>
            ConnectionPoint.GetNodeRect override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyConnectionPoint.AddLinkToNode">
            <summary>
            ConnectionPoint.AddLinkToNode override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyConnectionPoint.RemoveLinkFromNode">
            <summary>
            ConnectionPoint.RemoveLinkFromNode override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyConnectionPoint.SaveEndRelative">
            <summary>
            ConnectionPoint.SaveEndRelative override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyConnectionPoint.GetEndPoint">
            <summary>
            ConnectionPoint.SaveEndRelative override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyConnectionPoint.GetInitialPoint">
            <summary>
            ConnectionPoint.GetInitialPoint override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyConnectionPoint.CanMoveLink(System.Windows.Point)">
            <summary>
            ConnectionPoint.CanMoveLink override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyConnectionPoint.CalculateIntersections">
            <summary>
            ConnectionPoint.CalcIntrs override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyConnectionPoint.GetAnchoredPoint(MindFusion.Diagramming.Wpf.AnchorPosition,System.Boolean)">
            <summary>
            ConnectionPoint.GetAnchoredPt override.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DummyConnectionPoint.SmallSize">
            <summary>
            The size of the imaginary nodes dummy links connect to.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DummyConnectionPoint.Node">
            <summary>
            Gets a dummy node associated with this connection point.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.CommandHistory">
            <summary>
            Maintains a queue of Command records used to undo or redo actions.
            </summary>
            <remarks>
            The only instance of CommandHistory can be accessed via the History property
            of UndoManager.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.CommandHistory.#ctor">
            <summary>
            Initializes a new instance of the CommandHistory class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.CommandHistory.MergeUndoRecords(System.Int32,System.String)">
            <summary>
            Merges several undo records into a single composite record.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.CommandHistory.SaveCommand(MindFusion.Diagramming.Wpf.Commands.Command,MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Adds the specified command to the command history.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.CommandHistory.Clear">
            <summary>
            Removes all records from the history queue.
            </summary>
            <remarks>
            Call Clear to remove all action records that are currently in
            the history queue, making those actions unavailable for undo
            or redo anymore. 
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.CommandHistory.Undo">
            <summary>
            Performs undo on the current command in the history,
            adjusting the current command pointer.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.CommandHistory.Redo">
            <summary>
            Performs redo in the next command in the history,
            adjusting the current command pointer.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.CommandHistory.NextUndo">
            <summary>
            Gets a reference to the command that would be undone if Undo is invoked.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.CommandHistory.NextRedo">
            <summary>
            Gets a reference to the command that would be redone if Redo is invoked.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.CommandHistory.Capacity">
            <summary>
            Gets or sets the maximum number of records to keep in the history queue.
            </summary>
            <remarks>
            If the history queue is full, the oldest command records are removed
            from the beginning when new ones are added.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.CommandHistory.Commands">
            <summary>
            Gets the commands saved in the undo / redo history queue.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ForegroundLayer">
            <summary>
            Draws graphics that should always appear above all diagram items.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ForegroundLayer.GetVisualChild(System.Int32)">
            <summary>
            Visual.GetVisualChild override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ForegroundLayer.VisualChildrenCount">
            <summary>
            Visual.VisualChildrenCount override.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ShapeLibrary">
            <summary>
            The ShapeLibrary class represents a collection of shape definitions
            stored together.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ShapeLibrary.FileFormatVersion">
            <summary>
            The current file format version.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeLibrary.#ctor">
            <summary>
            Initializes a new empty instance of the ShapeLibrary class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeLibrary.#ctor(MindFusion.Diagramming.Wpf.Shape[])">
            <summary>
            Initializes a new instance of the ShapeLibrary class.
            </summary>
            <param name="shapes">
            An array of Shape object to initialize the libarary with.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeLibrary.LoadFromXml(System.String)">
            <summary>
            Loads this library from the specified file.
            </summary>
            <param name="fileName">
            The name of the file from which to load the shape library.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeLibrary.LoadFromXml(System.Xml.XmlDocument)">
            <summary>
            Loads the shape library from the specified XML document.
            </summary>
            <param name="document">
            The document to load the library from.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeLibrary.LoadFromXml(System.Xml.XmlDocument,System.String)">
            <summary>
            Loads the library from the specified XML document. 
            All locations of images associated with shapes in the library
            are loaded relative to the specified library path.
            </summary>
            <remarks>
            If the path is an empty string or null, image locations are
            loaded relative to the BaseURI of the specified document.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeLibrary.SaveToXml(System.String)">
            <summary>
            Saves this library to the specified file.
            </summary>
            <param name="fileName">
            The name of the file where to save the shape library.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeLibrary.SaveToXml(System.Xml.XmlDocument)">
            <summary>
            Saves the shape libaray into the specified XML document.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeLibrary.SaveToXml(System.Xml.XmlDocument,System.String)">
            <summary>
            Saves the shape library into the specified XML document.
            All locations of images associated with shapes in the library
            are saved relative to the specified destination path.
            </summary>
            <remarks>
            If the path is an empty string or null, image locations are
            written as absolute.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeLibrary.ConvertToRelativePath(System.String,System.String)">
            <summary>
            Converts an image path to one relative to the shape library path.
            </summary>
            <param name="imagePath">
            The path that contains the image.
            </param>
            <param name="shapeLibraryPath">
            The path that contains the shape library.
            </param>
            <returns>
            A string value that represents the relative path.
            </returns>
            <remarks>
            Returns a relative version of imagePath with respect to
            shapeLibraryPath to facilitate ShapeLibrary transport/distribution.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeLibrary.MakeImagesRelativeTo(System.String)">
            <summary>
            Makes image locations relative to specified shape library path.
            </summary>
            <param name="shapeLibraryPath">
            The path that contains the shape library.
            </param>
            <remarks>
            This method is supposed to be called before serialization,
            so that the shape library can be moved/distributed.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeLibrary.Shapes">
            <summary>
            Gets or sets the array of all shapes in the library.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ShapeConnectionPoint">
            <summary>
            Represents a connection between a link and a shapeNode.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeConnectionPoint.#ctor(MindFusion.Diagramming.Wpf.ShapeNode,MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean)">
            <summary>
            Initializes a new instance of the ShapeConnectionPoint class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeConnectionPoint.#ctor">
            <summary>
            Initializes a new instance of the ShapeConnectionPoint class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeConnectionPoint.GetNodeRect(System.Boolean)">
            <summary>
            ConnectionPoint.GetNodeRect override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeConnectionPoint.GetInitialPoint">
            <summary>
            ConnectionPoint.GetInitialPoint override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeConnectionPoint.ShapeNode">
            <summary>
            Gets the shapeNode this link is associated with.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ScriptHelper">
            <summary>
            Allows calling some static WpfDiagram methods from JavaScript
            and VBScript. It seems the script languages do not allow calling
            class static methods, so a ScriptHelper instance property is
            provided by the Diagram class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ScriptHelper.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the ScriptHelper class.
            </summary>
            <param name="diagram">
            The Diagram the helper methods will work on.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ScriptHelper.ShapeTemplateFromId(System.String)">
            <summary>
            Returns the Shape having the specified identifier.
            </summary>
            <param name="shapeId">
            The id of the shape to create.
            </param>
            <returns>
            An instance of the Shape class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ScriptHelper.NodesIntersect(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Calculates whether the specified nodes' outlines intersect.
            </summary>
            <param name="n1">
            The first DiagramNode to check.
            </param>
            <param name="n2">
            The second DiagramNode to check.
            </param>
            <returns>
            true if the outlines of the specified nodes intersect; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ScriptHelper.CreateSolidColorBrush(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a solid brush with the specified color components.
            </summary>
            <param name="alpha">
            The alpha factor of the solid brush color.
            </param>
            <param name="red">
            The red component of the solid brush color.
            </param>
            <param name="green">
            The green component of the solid brush color.
            </param>
            <param name="blue">
            The blue component of the solid brush color.
            </param>
            <returns>
            An instance of the MindFusion.Drawing.SolidBrush that represents
            the newly created brush.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ScriptHelper.CreateObject(System.String)">
            <summary>
            Creates a WpfDiagram object given its class name.
            </summary>
            <param name="className">
            The class name of the object to create.
            </param>
            <returns>
            A reference to the WpfDiagram object of the specified class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ScriptHelper.ApplyLayout(System.Object)">
            <summary>
            Applies the specified layout to the underlying diagram.
            </summary>
            <param name="layout">
            An instance of one of the layout classes that represents the layout
            to perform on the underlying diagram.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.RemoveFromContainerCmd">
            <summary>
            Undoable command that implements an addition of a node to a container.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RemoveFromContainerCmd.#ctor(MindFusion.Diagramming.Wpf.ContainerNode,MindFusion.Diagramming.Wpf.DiagramNode,System.Boolean)">
            <summary>
            Intializes a new instance of the AddToContainerCmd class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RemoveFromContainerCmd.Execute">
            <summary>
            Executes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RemoveFromContainerCmd.Execute(System.Boolean)">
            <summary>
            Carries out the command action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RemoveFromContainerCmd.Undo">
            <summary>
            Undoes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RemoveFromContainerCmd.Redo">
            <summary>
            Redoes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RemoveFromContainerCmd.Adopt(MindFusion.Diagramming.Wpf.Commands.Command)">
            <summary>
            Merges adjacent commands in the history queue if they are related.
            </summary>
            <param name="command">
            The Command that might be adopted by this command.
            </param>
            <returns>
            true if the specified command has been adopted; otherwise, false.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.RemoveFromContainerCmd.Container">
            <summary>
            Gets the group associated with the command.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.RemoveFromContainerCmd.Node">
            <summary>
            Gets the item associated with the command.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.PrintOptions">
            <summary>
            Provides properties that allow customization of various
            aspects of printing and print-preview.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.RenderOptions">
            <summary>
            Provides properties that allow customization of various
            aspects of printing and print-preview.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RenderOptions.#ctor">
            <summary>
            Initializes a new instance of the RenderOptions class.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.RenderOptions.scrollX">
            <summary>
            Horizontal scroll position.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.RenderOptions.scrollY">
            <summary>
            Vertical scroll position.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RenderOptions.RenderTarget">
            <summary>
            Gets or sets the rendering target.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RenderOptions.Scale">
            <summary>
            Gets or sets the scale of the print output relatively
            to the original on-screen size of the diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RenderOptions.EnableShadows">
            <summary>
            Gets or sets a value indicating whether the printing
            of the shadows of diagram items is enabled.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RenderOptions.EnableImages">
            <summary>
            Gets or sets a value indicating whether the printing of images
            that are displayed in nodes is enabled.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RenderOptions.EnableInterior">
            <summary>
            Gets or sets a value indicating whether the printing of
            node interiors is enabled.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RenderOptions.EnableAnchors">
            <summary>
            Gets or sets a value indicating whether the printing of anchor
            point marks is enabled.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RenderOptions.EnableBackground">
            <summary>
            Gets or sets a value indicating whether the printing of
            the background color is enabled.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RenderOptions.EnableBackgroundImage">
            <summary>
            Gets or sets a value indicating whether the printing of
            the background image is enabled.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RenderOptions.EnableText">
            <summary>
            Gets or sets a value indicating whether the printing of
            the text of diagram items is enabled.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RenderOptions.ScrollX">
            <summary>
            Gets or sets the document's X scroll position.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RenderOptions.ScrollY">
            <summary>
            Gets or sets the document's Y scroll position.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RenderOptions.TargetView">
            <summary>
            Gets or sets the object that currently displays the Diagram.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PrintOptions.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the PrintOptions class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.PrintOptions.Clone">
            <summary>
            Creates a copy of the current PrintOptions instance.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.PrintOptions.DocumentName">
            <summary>
            Gets or sets the name of the printed document.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.PrintOptions.HeaderFormat">
            <summary>
            Gets or sets the format of page headers.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.PrintOptions.Margins">
            <summary>
            Gets or sets the margins for the printed pages.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.PrintOptions.EnableLanes">
            <summary>
            Gets or sets whether to print lanes.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.OrthogonalLayoutInfo">
            <summary>
            Contains settings for the OrthogonalLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.OrthogonalLayoutInfo.#ctor">
            <summary>
            Initializes a new instance of the OrthogonalLayoutInfo class.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.OrthogonalLayoutInfo.Margins">
            <summary>
            Gets or sets the distance between the top-left corner
            of the smallest rectangle containing the arranged graph
            and the top-left point of the document bounds.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.OrthogonalLayoutInfo.Directed">
            <summary>
            Gets or sets a value indicating whether the graph being laid out
            is directed.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.OrthogonalLayoutInfo.Refine">
            <summary>
            Gets or sets a value indicating whether to refine the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.OrthogonalLayoutInfo.Padding">
            <summary>
            Gets or sets a value indicating how much space to leave between nodes in adjacent lanes.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.OrthogonalLayoutInfo.MinLaneSize">
            <summary>
            Gets or sets a value indicating the minimum size of a lane.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.OrthogonalLayoutInfo.MinimizeLinkBends">
            <summary>
            Gets or sets a value indicating whether the layout should attempt to minimize link bending.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.OrthogonalLayout">
            <summary>
            Performs orthogonal layout on a graph.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.OrthogonalLayout.#ctor">
            <summary>
            Initializes a new instance of the OrthogonalLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.OrthogonalLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.OrthogonalLayoutInfo)">
            <summary>
            Applies the layout to the specified graph using the specified settings.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.OrthogonalLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.OrthogonalLayoutInfo,MindFusion.Layout.LayoutProgress)">
            <summary>
            Applies the layout to the specified graph using the specified settings
            and progress callback delegate.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.OrthogonalLayout.AlignEndsToNode(MindFusion.Layout.ILink)">
            <summary>
            Aligns the end points of the specified link to the bounds
            of its adjacent nodes.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.OrthogonalLayout.VertexSize(MindFusion.Graphs.Vertex)">
            <summary>
            Calculates the size of the specified GraphLib vertex as a
            GraphLib.Size object.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.OrthogonalLayout.graph">
            <summary>
            The GraphLib representation of the graph to be arranged.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.OrthogonalLayout.graphToDiagMapNodes">
            <summary>
            Maps GraphLib vertices to INode objects.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.OrthogonalLayout.graphToDiagMapLinks">
            <summary>
            Maps GraphLib edges to ILink objects.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.NodeListView">
            <summary>
            ListView control with specific support for hosting DiagramNodes and other UIELements 
            and dragging them to Diagram control.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.NodeListView.#ctor">
            <summary>
            Initializes a new instance of the NodeListView class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.NodeListView.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            UIElement.OnPreviewMouseDown override.
            </summary>
            <param name="e">
            The System.Windows.Input.MouseButtonEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.NodeListView.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            UIElement.OnPreviewMouseMove override.
            </summary>
            <param name="e">
            The System.Windows.Input.MouseButtonEventArgs that contains the event data.
            </param>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.NodeListView.LabelProperty">
            <summary>
            Identifies the Label attached property which defines the text of the Label next to the DiagramNode icon.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.NodeListView.SetLabel(System.Windows.UIElement,System.String)">
             <summary>
             Sets the value of the Label attached property
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.NodeListView.GetLabel(System.Windows.UIElement)">
             <summary>
             Gets the value of the Label attached property
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Visitors.VisitOperation">
            <summary>
            Defines an operation performed on a diagram item
            through a method call visitor.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Visitors.VisitOperationIntr">
            <summary>
            Defines an operation performed on a diagram item
            through a method call visitor.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Visitors.MethodCallVisitor">
            <summary>
            Invokes a general method on the visited objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Visitors.MethodCallVisitor.#ctor(MindFusion.Diagramming.Wpf.Visitors.VisitOperation)">
            <summary>
            Initializes a new instance of the MethodCallVisitor class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Visitors.MethodCallVisitor.#ctor(MindFusion.Diagramming.Wpf.Visitors.VisitOperationIntr,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Initializes a new instance of the MethodCallVisitor class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Visitors.MethodCallVisitor.Accept(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            CollectionVisitor.Accept override.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Behaviors.LinkShapesBehavior">
            <summary>
            This class is used when the diagram behavior is set to Behavior.LinkShapes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.LinkShapesBehavior.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the LinkShapesBehavior class.
            </summary>
            <param name="diagram">
            The Diagram this behavior will be associated with.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.LinkShapesBehavior.CreateNode">
            <summary>
            LinkNodesBehavior.CreateNode override.
            </summary>
            <returns>
            An instance of the DiagramNode class.
            </returns>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.MultipleGraphsPlacement">
            <summary>
            Specifies graph orientation.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.MultipleGraphsPlacement.Vertical">
            <summary>
            Indicates that graphs should be placed in a column.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.MultipleGraphsPlacement.Horizontal">
            <summary>
            Indicates that graphs should be placed in a row.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.MultipleGraphsPlacement.MinimalArea">
            <summary>
            Indicates that graphs should be placed so that they cover minimal area.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.MultipleGraphsPlacement.VerticalSortDescending">
            <summary>
            Indicates that graphs should be placed in a column and sorted
            by the number of vertices they contain in a descending order.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.MultipleGraphsPlacement.VerticalSortAscending">
            <summary>
            Indicates that graphs should be placed in a column and sorted
            by the number of vertices they contain in an ascending order.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.MultipleGraphsPlacement.HorizontalSortDescending">
            <summary>
            Indicates that graphs should be placed in a row and sorted
            by the number of vertices they contain in a descending order.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.MultipleGraphsPlacement.HorizontalSortAscending">
            <summary>
            Indicates that graphs should be placed in a row and sorted
            by the number of vertices they contain in an ascending order.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.ILayout">
            <summary>
            Common interface for all layout classes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ILayout.Arrange(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Applies the layout to the specified Diagram instance.
            </summary>
            <param name="diagram">
            The Diagram that should be arranged.
            </param>
            <returns>
            Returns whether the arrangement was successful.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.ILayout.LayoutNode">
            <summary>
            Gets or sets a delegate, which is invoked when the
            position of a node is changed by the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.ILayout.LayoutLink">
            <summary>
            Gets or sets a delegate, which is invoked when the
            position of a link is changed by the layout.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.LayoutProgress">
            <summary>
            Represents methods that are called to report on progress of layout algorithms.
            </summary>
            <param name="current">
            An integer value specifying the current relative progress of
            the layout algorithm.
            </param>
            <param name="total">
            An integer value specifying the total number of steps required by the
            layouting algorithm in order to finish.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.LayoutNode">
            <summary>
            Represents methods that are called by the layout algorithms
            when the position of a node changes.
            </summary>
            <param name="node">
            A reference to the node being laid out.
            </param>
            <param name="oldBounds">
            The bounding rectangle of the node before it was repositioned by
            the layouting algorithm.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.LayoutLink">
            <summary>
            Represents methods that are called by the layout algorithms
            when the position of a link changes.
            </summary>
            <param name="link">
            A reference to the link being laid out.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.LayoutSubgraph">
            <summary>
            Represents methods that are called by the layout algorithms
            in order to perform custom arrangement of a subgraph.
            </summary>
            <param name="diagram">
            The diagram being arranged.
            </param>
            <param name="items">
            The subset of items to arrange.
            </param>
            <returns>
            true if the items were arranged; otherwise, false.
            </returns>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.Layout">
            <summary>
            The base class for all layout classes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.#ctor">
            <summary>
            Initializes a new instance of the Layout class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.Arrange(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Applies the layout to the specified Diagram instance.
            </summary>
            <param name="diagram">
            The Diagram that should be arranged.
            </param>
            <returns>
            true if the diagram has been arranged successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.Arrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Applies the layout to the specified subset of items from the
            specified Diagram instance.
            </summary>
            <param name="diagram">
            The Diagram that should be arranged.
            </param>
            <param name="items">
            A collection of nodes and links from diagram that define
            the subgraph to arrange.
            </param>
            <returns>
            true if the diagram has been arranged successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.ValidateSettings">
            <summary>
            Called when the layout is about to start in order
            to validate the layout settings.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.StartLayout(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Invoked before the layout has started.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.EndLayout(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Invoked after the layout has completed successfully.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.EndLayout(MindFusion.Diagramming.Wpf.Diagram,System.Boolean)">
            <summary>
            Invoked after the layout has completed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.BuildGraph(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Creates and returns a FCGraph instance representing
            the graph in the specified diagram.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.FindNode(MindFusion.Diagramming.Wpf.Layout.FCGraph,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Finds the node in the specified graph corresponding
            to the specified node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.Split(MindFusion.Layout.IGraph,MindFusion.Diagramming.Wpf.Diagram,System.Boolean,System.Boolean)">
            <summary>
            Splits the specified graph to its interconnected subgraphs.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.CreateProgressDelegate">
            <summary>
            Returns a progress delegate which propagates progress
            notifications to the underlying LayoutProgress or null
            if the underlying LayoutProgress is null.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.OnLayoutProgress(System.Int32,System.Int32)">
            <summary>
            Invokes the underlying progress delegate.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.OnLayoutNode(MindFusion.Diagramming.Wpf.DiagramNode,System.Windows.Rect)">
            <summary>
            Invokes the underlying LayoutNode delegate with the
            specified node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.OnLayoutLink(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Invokes the underlying LayoutLink delegate with the
            specified link.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.MoveGraph(MindFusion.Diagramming.Wpf.Layout.FCGraph)">
            <summary>
            Moves the specified graph to the current offset.
            Adjusts the current offset afterwards.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.MoveGraph(MindFusion.Diagramming.Wpf.Layout.FCGraph,System.Double@,System.Double@)">
            <summary>
            Moves the specified graph to the current offset.
            Adjusts the current offset afterwards.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.MoveGraph(MindFusion.Diagramming.Wpf.Layout.FCGraph,System.Boolean,System.Double@,System.Double@)">
            <summary>
            Moves the specified graph to the current offset.
            Adjusts the current offset afterwards.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.MoveGraph(MindFusion.Diagramming.Wpf.Layout.FCGraph,System.Double,System.Double)">
            <summary>
            Offsets the specified graph with the specified distance.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.UpdateLinkAnchoring(MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean,System.Boolean)">
            <summary>
            Updates the control points of the specified link according
            to the layout's Anchoring property.
            </summary>
            <param name="link">
            The DiagramLink to update.
            </param>
            <param name="onlyEndPoints">
            Specifies whether to update only the end points of the link
            or all points in the link.
            </param>
            <param name="onlyAnchoring">
            Specifies whether only links with anchor points
            should be updated.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.RegisterNode(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Registers the specified node as being modified.
            All registered nodes are processed later by a call
            to ProcessRegisteredObjects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.RegisterLink(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Registers the specified node as being modified.
            All registered nodes are processed later by a call
            to ProcessRegisteredObjects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.ProcessRegisteredObjects">
            <summary>
            Processes all previously registered links and nodes by
            calling the LayoutNode and LayoutLink delegates for each
            node and link respectively.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.ArrangeMinimalArea">
            <summary>
            Arranges the built subgraphs in the smalles possible area.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.Layout.SetPoints(MindFusion.Diagramming.Wpf.DiagramLink,MindFusion.Diagramming.Wpf.PointCollection)">
            <summary>
            Updates the number of segments of the specified link,
            usually after the number of points of this link has
            been modified directly.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.Layout._progress">
            <summary>
            An optional delegate repeatedly invoked to notify
            clients about the current layout progress.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.Layout._layoutNode">
            <summary>
            An optional delegate invoked once for each node in
            the diagram once the layout has completed.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.Layout._layoutLink">
            <summary>
            An optional delegate invoked once for each link in
            the diagram once the layout has completed.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.Layout._multipleGraphsPlacement">
            <summary>
            A flag indicating the relative position of indivudal
            graphs post-layout.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.Layout._margins">
            <summary>
            The laid-out diagram margins.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.Layout._keepGroupLayout">
            <summary>
            Indicates whether the relative positions of the nodes
            within groups are preserved.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.Layout._xOffset">
            <summary>
            The current horizontal subgraph offset during layouting.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.Layout._yOffset">
            <summary>
            The current vertical subgraph offset during layouting.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.Layout._graphBounds">
            <summary>
            A list containing the bounding rectangles of subgraphs
            during layouting.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.Layout._processedNodes">
            <summary>
            A list containing the original bounding rectangles
            of all laid-out nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.Layout._processedLinks">
            <summary>
            A list containing the original bounding rectangles
            of all laid-out links.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.Layout._anchoring">
            <summary>
            The link anchoring style.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.Layout.Name">
            <summary>
            Gets a user-friendly name of the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.Layout.Progress">
            <summary>
            Gets or sets the progress callback delegate.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.Layout.LayoutNode">
            <summary>
            Gets or sets a delegate, which is invoked when the
            position of a node is changed by the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.Layout.LayoutLink">
            <summary>
            Gets or sets a delegate, which is invoked when the
            position of a link is changed by the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.Layout.MultipleGraphsPlacement">
            <summary>
            Gets or sets a value indicating how multiple independent graphs
            in the diagram should be positioned relatively to each other.
            </summary>
            <value>
            A member of the MultipleGraphsPlacement enumeration.
            The default value is Horizontal.
            </value>
            <remarks>
            If the diagram contains several unconnected subgraphs, each of them is processed by 
            the algorithm independently from the others. This property specifies how such 
            subgraphs should be placed one relatively to another. The possible options are 
            to arrange them in a row, in a column, or in such a way that the diagram covers 
            a minimal area.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.Layout.Margins">
            <summary>
            Gets or sets the distance between the top-left corner
            of the smallest rectangle containing the arranged diagram
            and the top-left point of the document bounds.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.Layout.DefaultMarginValue">
            <summary>
            Gets the default value for the Margins property, which
            may vary accross different layouts.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.Layout.KeepGroupLayout">
            <summary>
            Gets or sets a value indicating whether to treat each Group
            of nodes as a single vertex in the arranged graph.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.Layout.Anchoring">
            <summary>
            Gets or sets how to align links to the anchor points of nodes.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.TreeLayoutLinkType">
            <summary>
            Specifies the shape of the diagram links after they are laid out.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.TreeLayoutLinkType.Straight">
            <summary>
            Indicates straight links with a single segment.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.TreeLayoutLinkType.Cascading2">
            <summary>
            Indicates cascading links with two segments.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.TreeLayoutLinkType.Cascading3">
            <summary>
            Indicates cascading links with three segments.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.TreeLayoutLinkType.Rounded">
            <summary>
            Indicates Bézier links with a single segment.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.TreeLayoutType">
            <summary>
            Specifies the type of a tree layout.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.TreeLayoutType.Cascading">
            <summary>
            Indicates cascading tree layout.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.TreeLayoutType.Centered">
            <summary>
            Indicates centered tree layout.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.TreeLayoutType.Radial">
            <summary>
            Indicates radial tree layout.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.TreeLayoutType.HorizontalVertical">
            <summary>
            Indicates a Horizontal-Vertical binary tree layout.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.TreeLayoutBalance">
            <summary>
            Specifies how to order child nodes in order to produce tree layouts
            with custom balance.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.TreeLayoutBalance.Original">
            <summary>
            Indicates that the child order should not be changed.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.TreeLayoutBalance.Reversed">
            <summary>
            Indicates that the child order should be reversed.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.TreeLayoutBalance.LeftHeavy">
            <summary>
            Indicates that the child nodes with most total children
            will be processed first, thus producing a left-heavy layout.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.TreeLayoutBalance.RightHeavy">
            <summary>
            Indicates that the child nodes with least total children
            will be processed first, thus producing a right-heavy layout.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.TreeLayoutDirections">
            <summary>
            Specifies the direction of a tree layout.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.TreeLayoutDirections.TopToBottom">
            <summary>
            Indicates a top-to-bottom direction.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.TreeLayoutDirections.BottomToTop">
            <summary>
            Indicates a bottom-to-top direction.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.TreeLayoutDirections.LeftToRight">
            <summary>
            Indicates a left-to-right direction.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.TreeLayoutDirections.RightToLeft">
            <summary>
            Indicates a right-to-left direction.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.TreeLayout">
            <summary>
            Implements several algorithms for arranging tree structures.
            </summary>
            <remarks>
            Call the Arrange method of a TreeLayout instance to apply directional or radial 
            layout to a tree/subtree in the current diagram.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.TreeLayout.#ctor">
            <summary>
            Initializes a new instance of the TreeLayout class
            with the default settings.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.TreeLayout.#ctor(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Initializes a new instance of the TreeLayout class
            with the specified node as root.
            </summary>
            <param name="root">
            The root of the arranged tree.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.TreeLayout.#ctor(MindFusion.Diagramming.Wpf.Layout.TreeLayoutType)">
            <summary>
            Initializes a new instance of the TreeLayout class with the specified type.
            </summary>
            <param name="type">
            The type of the tree layout.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.TreeLayout.#ctor(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.Layout.TreeLayoutType)">
            <summary>
            Initializes a new instance of the TreeLayout class
            with the specified node as root and the specified type.
            </summary>
            <param name="root">
            The root of the arranged tree.
            </param>
            <param name="type">
            The type of the tree layout.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.TreeLayout.#ctor(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.Layout.TreeLayoutType,System.Boolean,MindFusion.Diagramming.Wpf.Layout.TreeLayoutLinkType,MindFusion.Diagramming.Wpf.Layout.TreeLayoutDirections,System.Double,System.Double,System.Boolean,System.Windows.Size)">
            <summary>
            Initializes a new instance of the TreeLayout class
            with the specified settings.
            </summary>
            <param name="root">
            The root of the arranged tree.
            </param>
            <param name="type">
            The type of the tree layout.
            </param>
            <param name="reversedLinks">
            Specifies whether the parent-to-child direction in the tree should
            be reversed, that is, from the end of the link towards its beginning.
            </param>
            <param name="linkStyle">
            The style of the links in the produced layout.
            </param>
            <param name="direction">
            The layout direction.
            </param>
            <param name="levelDistance">
            The distance between adjacent levels.
            </param>
            <param name="nodeDistance">
            The distance between adjacent nodes.
            </param>
            <param name="keepRootPosition">
            Specifies whether to keep the position of the tree root.
            </param>
            <param name="margins">
            The margin between the produced tree and the left side of
            the diagram bounding rectangle.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.TreeLayout.#ctor(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.Layout.TreeLayoutType,System.Boolean,MindFusion.Diagramming.Wpf.Layout.TreeLayoutLinkType,MindFusion.Diagramming.Wpf.Layout.TreeLayoutDirections,System.Double,System.Double,System.Boolean,System.Windows.Size,System.Boolean)">
            <summary>
            Initializes a new instance of the TreeLayout class.
            </summary>
            <param name="root">
            The root of the arranged tree.
            </param>
            <param name="type">
            The type of the tree layout.
            </param>
            <param name="reversedLinks">
            Specifies whether the parent-to-child direction in the tree should
            be reversed, that is, from the end of the link towards its beginning.
            </param>
            <param name="linkStyle">
            The style of the links in the produced layout.
            </param>
            <param name="direction">
            The layout direction.
            </param>
            <param name="levelDistance">
            The distance between adjacent levels.
            </param>
            <param name="nodeDistance">
            The distance between adjacent nodes.
            </param>
            <param name="keepRootPosition">
            Specifies whether to keep the position of the tree root.
            </param>
            <param name="margins">
            The margin between the produced tree and the left side of
            the diagram bounding rectangle.
            </param>
            <param name="keepGroupLayout">
            Specifies whether to keep the relative position of grouped items.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.TreeLayout.BuildGraph(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Layout.BuildGraph override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.TreeLayout.ValidateSettings">
            <summary>
            Layout.ValidateSettings override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.TreeLayout.Arrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Applies the layout to the specified subset of items from the
            specified Diagram instance.
            </summary>
            <param name="diagram">
            The Diagram that should be arranged.
            </param>
            <param name="items">
            A collection of nodes and links from diagram that define
            the subgraph to arrange.
            </param>
            <returns>
            false only if the Root property is set to a link; otherwise, true.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.TreeLayout.UpdateLink(MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean)">
            <summary>
            Updates the style and position of the specified arrow.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.TreeLayout.SetAnchors(MindFusion.Diagramming.Wpf.DiagramLink,System.Int32,System.Int32)">
            <summary>
            Sets the specified anchors to the specified link.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.TreeLayout.CalculateAssistantAnchor(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Calculates the anchor of the specified target node according to its
            position relative to the specified source and the layout direction.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.TreeLayout.CalculateAnchors">
            <summary>
            Calculates the type of anchors to apply to arrows according
            to the layout settings.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TreeLayout.Name">
            <summary>
            Gets a user-friendly name of the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TreeLayout.DefaultMarginValue">
            <summary>
            Gets the default value of the Margins property.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TreeLayout.Root">
            <summary>
            Gets or sets the root node of the tree.
            </summary>
            <value>
            An instance of the DiagramNode class that represents the root node.
            </value>
            <remarks>
            If not set, the layout will try to find the root automatically.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TreeLayout.KeepRootPosition">
            <summary>
            Gets or sets a value indicating whether to keep the root node
            at its original position.
            </summary>
            <value>
            true to keep the root position; otherwise, false.
            </value>
            <remarks>
            If the root position is not kept, that is, the value of this
            property is false, the entire tree is dispositioned after the
            layout is complete, according to the values of Margins.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TreeLayout.Type">
            <summary>
            Gets or sets what type of tree layout to apply to the diagram.
            </summary>
            <value>
            A member of the TreeLayoutType enumeration.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TreeLayout.LinkStyle">
            <summary>
            Gets or sets a value indicating how links in the arranged tree should look. 
            </summary>
            <value>
            A member of the TreeLayoutLinkType enumeration.
            </value>
            <remarks>
            This property is ignored if Type is set to Radial.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TreeLayout.LevelDistance">
            <summary>
            Gets or sets how much space to leave between levels of the tree.
            </summary>
            <value>
            A real number specifying the distance between adjacent levels in the tree. 
            The default value is 48.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TreeLayout.NodeDistance">
            <summary>
            Gets or sets how much space to leave between nodes on the same level.
            </summary>
            <value>
            A real number specifying the distance between adjacent nodes.
            The default value is 48.
            </value>
            <remarks>
            This property is ignored if Type is set to Radial.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TreeLayout.StretchFactor">
            <summary>
            Gets or sets the stretch factor applied on Radial tree layouts.
            </summary>
            <value>
            A real number specifying the ratio between the horizontal and vertical radii of radial layout outlines.
            The default is 1.
            </value>
            <remarks>
            When applying a radial layout, node layers are laid out in
            concentric circles around the Root node. Stretching them by
            changing this property makes layers laid out in elliptic outlines.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TreeLayout.Direction">
            <summary>
            Gets or sets the tree direction.
            </summary>
            <value>
            A member of the TreeLayoutDirection.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TreeLayout.ReversedLinks">
            <summary>
            Gets or sets a value indicating the link direction that relates
            parent nodes to child nodes.
            </summary>
            <value>
            true to indicate reversed direction, that is, the parent node is the one the link 
            points to; otherwise, false.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TreeLayout.IgnoreLinkDirection">
            <summary>
            Gets or sets a value indicating whether the tree layout algorithm
            should ignore the direction of links when arranging a tree.
            </summary>
            <value>
            true to ignore link direction; otherwise, false.
            The default is false.
            </value>
            <remarks>
            Parent-child direction is considered the one in which nodes go
            further from the root, instead that of the links. If IgnoreLinkDirection
            is set to true, you must explicitly specify the tree Root.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TreeLayout.Balance">
            <summary>
            Gets or sets a value indicating the ordering of the child
            nodes in order to produce layouts with custom balance.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TreeLayout.EnableAssistants">
            <summary>
            Gets or sets a value indicating whether the "assistant" trait
            is regarded when performing the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TreeLayout.CompactAssistants">
            <summary>
            Gets or sets a value indicating whether the "assistant" nodes on the
            same side of a single parent are arranged as close enough to each other
            as possible. Turning this off will force the nodes on one side to be
            aligned with their counterparts in the other and occasionally leaving
            space between adjacent branches.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.AnnealLayout">
            <summary>
            Implements a simulated annealing graph layout algorithm.
            </summary>
            <remarks>
            Simulated Annealing is a general-purpose optimization method used to solve 
            large-scale combinatorial problems by simulating the process of heating and cooling 
            of metal to achieve freedom from defects. Finding a nice arrangement of a graph is 
            a combinatorial problem that can be reduced to assigning costs to graph 
            configurations and finding the minimum cost configuration. In that case, a cost is 
            assigned to a graph configuration by evaluating different aesthetic criteria such 
            as distance between nodes, length of links and the number of link crossings.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.#ctor">
            <summary>
            Initializes a new instance of the AnnealLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.BeginArrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Initializes the layout object for a step-by-step execution.
            </summary>
            <param name="diagram">
            The Diagram that will be arranged.
            </param>
            <param name="items">
            A collection of nodes and links from diagram that define the subgraph to arrange.
            </param>
            <returns>
            true if the layout object has been initialized successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.Iterate(System.Int32,System.Int32)">
            <summary>
            Runs one or more layout iterations.
            </summary>
            <param name="iterationFrom">
            Specifies from which iteration to start.
            </param>
            <param name="iterationTo">
            Specifies at which iteration to stop.
            </param>
            <remarks>
            Use this method to create an animation of the layout process, for example, by 
            calling it from a timer. Call BeginArrange to prepare the layout object for 
            use of Iterate, and call EndArrange when done. Each call to Iterate starts 
            from the iteration next to the one where the previous call has stopped.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.EndArrange">
            <summary>
            Completes the step-by-step execution.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.Arrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Applies the layout to the specified subset of items from the
            specified Diagram instance.
            </summary>
            <param name="diagram">
            The Diagram that should be arranged.
            </param>
            <param name="items">
            A collection of nodes and links from diagram that define the
            subgraph to arrange.
            </param>
            <returns>
            This method always returns true.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.Name">
            <summary>
            Gets a user-friendly name of the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.DefaultMarginValue">
            <summary>
            Gets the default value of the Margins property.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.Root">
            <summary>
            Gets or sets a node indicating which subgraph of the
            diagram should be laid out.
            </summary>
            <value>
            A DiagramNode whose containing graph should be arranged.
            The default is null (Nothing in Visual Basic).
            </value>
            <remarks>
            If a root nodes is specified and SplitGraph is enabled, only
            the graph that contains the root node is laid out by Arrange.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.DistributionFactor">
            <summary>
            Gets or sets a value indicating the importance of the node
            distribution, relative to the other criteria considered by
            the algorithm.
            </summary>
            <value>
            A double multiplier applied to the node distribution cost when evaluating 
            the total cost of a graph configuration.
            The default is 560000.
            </value>
            <remarks>
            Assigning a larger value to this property will make the
            algorithm choose graph configurations in which the nodes are
            placed farther one from another.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.BoundaryFactor">
            <summary>
            Gets or sets a value indicating the importance of the distance
            between nodes and the layout area boundaries, relative to the
            other criteria considered by the algorithm.
            </summary>
            <value>
            A double multiplier applied to the node-to-boundary distance cost when evaluating 
            the total cost of a graph configuration.
            The default is 42000.
            </value>
            <remarks>
            Assigning a larger value to this property will make the algorithm
            choose graph configurations in which nodes are placed farther from
            the layout area bounds, that is, nodes will tend to gather in the
            center of the layout area.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.LinkLengthFactor">
            <summary>
            Gets or sets a value indicating the importance of the short
            length of links, relative to the other criteria considered
            by the algorithm.
            </summary>
            <value>
            A double multiplier applied to the link length cost when evaluating the total cost 
            of a graph configuration.
            The default is 0.02.
            </value>
            <remarks>
            Assigning a larger value to this property will make the algorithm
            choose graph configurations in which links are shorter.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.CrossingLinksCost">
            <summary>
            Gets or sets a value indicating the importance of the low number
            of link crossings, relative to the other criteria considered by
            the algorithm.
            </summary>
            <value>
            A double value added to the total cost of a graph configuration for each pair of crossing links.
            The default is 1200000.
            </value>
            <remarks>
            Assigning a larger value to this property will make the algorithm
            choose graph configurations with fewer link crossings.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.NodeLinkCrossingCost">
            <summary>
            Gets or sets a value indicating the importance of low number
            of overlaps between links and nodes relative to the other
            criteria considered by the algorithm.
            </summary>
            <value>
            A double value added to the total cost of a graph configuration when a link crosses a node.
            The default is 150000.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.NodeLinkDistFactor">
            <summary>
            Gets or sets a value indicating the importance of the distance
            between nodes and links, relative to the other criteria considered
            by the algorithm.
            </summary>
            <value>
            A double value specifying the distance factor.
            The default value is 320000.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.InitialTemperature">
            <summary>
            Gets or sets the initial temperature of the simulated annealing process.
            </summary>
            <value>
            A double value specifying the initial temperature of the simulation.
            The default is 40.
            </value>
            <remarks>
            A low initial temperature prevents nodes from moving far from
            their initial position.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.TemperatureScale">
            <summary>
            Gets or sets how much the simulated temperature is decreased
            at each stage of the algorithm.
            </summary>
            <value>
            A double multiplier applied to the simulated temperature at each stage of the 
            algorithm.
            The default is 0.75.
            </value>
            <remarks>
            This value should be in the interval (0, 1). The algorithm produces
            better results when running for many Stages with a gradual temperature
            decrease, that is, a TemperatureScale closer to 1.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.IterationsPerStage">
            <summary>
            Gets or sets how many node shift iterations to perform at each
            stage of the algorithm.
            </summary>
            <value>
            An integer value specifying the number of node shift iterations.
            The default is 50.
            </value>
            <remarks>
            IterationsPerStage specifies how many node configurations to evaluate
            at each stage of the temperature cool-down simulation.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.Stages">
            <summary>
            Gets or sets how many cool-down stages the algorithm should simulate.
            </summary>
            <value>
            An integer value specifying the number of temperature decreases the simulation 
            should run.
            The default is 15.
            </value>
            <remarks>
            At each stage the algorithm evaluates different graph arrangements
            produced by modifying the best configuration from the previous stage.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.LayoutArea">
            <summary>
            Gets or sets the size of the layout area.
            </summary>
            <value>
            A System.Windows.Rect structure representing the boundaries of the layout area.
            The default is Rect.Empty.
            </value>
            <remarks>
            If the layout area is not explicitly set, the algorithm will
            choose one suitable for the graph size.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.WidthHeightRatio">
            <summary>
            Gets or sets what width/height ratio the layout area should have.
            </summary>
            <value>
            A real number specifying the layout area width to height ratio.
            The default is 1.
            </value>
            <remarks>
            If the LayoutArea is not explicitly set, the algorithm will choose
            one suitable for the graph size. In that case the WidthHeightRatio
            property specifies how much larger the layout area width should be
            than its height.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.Randomize">
            <summary>
            Gets or sets a value indicating whether the nodes should be placed
            at random positions when the layout routine starts.
            </summary>
            <value>
            true to start the simulation with random node positions; false to start it with the 
            original node positions.
            The default is true.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.SplitGraph">
            <summary>
            Gets or sets a value indicating whether unconnected subgraphs should
            be laid out independently from each other.
            </summary>
            <value>
            true if unconnected graphs in the diagram should be laid out independently; otherwise, false.
            The default is false.
            </value>
            <remarks>
            If this property is set to true, each independent graph in the diagram
            is laid out in its own layout area. Otherwise all subgraphs are arranged
            in the same layout area.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.Statistics">
            <summary>
            Returns statistics about the layout execution and end results.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.AnnealLayout.GatherStatistics">
            <summary>
            Specifies whether the layout should gather statistics while running.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.SpringLayout">
            <summary>
            Implements the Spring-Embedder graph layout algorithm.
            </summary>
            <remarks>
            Spring-Embedder produces layouts having uniform distribution of nodes by simulating 
            a physical system in which nodes repulse each other and the links between them act 
            as confining springs. Nodes are moved around in an iterative process. The forces 
            that act on a node are calculated, taking in account the positions of surrounding 
            nodes and links from the previous iteration.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.SpringLayout.#ctor">
            <summary>
            Initializes a new instance of the SpringLayout class
            with the default settings.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.SpringLayout.#ctor(System.Int32,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the SpringLayout class
            with the specified settings.
            </summary>
            <param name="iterationCount">
            The number of iterations to perform.
            </param>
            <param name="nodeDistance">
            The distance between nodes.
            </param>
            <param name="minimizeCrossings">
            Specifies whether to try to minimize crossings while layouting.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.SpringLayout.#ctor(System.Int32,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SpringLayout class with
            the specified settings.
            </summary>
            <param name="iterationCount">
            The number of iterations to perform.
            </param>
            <param name="nodeDistance">
            The distance between nodes.
            </param>
            <param name="minimizeCrossings">
            Specifies whether to try to minimize crossings while layouting.
            </param>
            <param name="keepGroupLayout">
            Specifies whether to keep the relative position of grouped items.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.SpringLayout.BeginArrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Initializes the layout object for a step-by-step execution.
            </summary>
            <param name="diagram">
            The Diagram that is arranged.
            </param>
            <param name="items">
            A collection of nodes and links from diagram that define the subgraph to arrange.
            </param>
            <remarks>
            You can use this method together with Iterate and EndArrange to display an animation 
            of the layout process. To run all iterations of the process at once and display 
            just the end result, call Arrange.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.SpringLayout.Iterate(System.Int32,System.Int32)">
            <summary>
            Runs one or more layout iterations.
            </summary>
            <param name="iterationFrom">
            Specifies from which iteration to start.
            </param>
            <param name="iterationTo">
            Specifies at which iteration to stop.
            </param>
            <remarks>
            Use this method to create an animation of the layout process, for example, by 
            calling it from a timer. Call BeginArrange to prepare the layout object for 
            use of Iterate, and call EndArrange when done. Each call to Iterate starts 
            from the iteration next to the one where the previous call has stopped.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.SpringLayout.EndArrange">
            <summary>
            Completes the step-by-step execution.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.SpringLayout.Arrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Applies the layout to the specified subset of items from the
            specified Diagram instance.
            </summary>
            <param name="diagram">
            The Diagram that should be arranged.
            </param>
            <param name="items">
            A collection of nodes and links from diagram that define
            the subgraph to arrange.
            </param>
            <returns>
            This method always returns true.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SpringLayout.Name">
            <summary>
            Gets a user-friendly name of the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SpringLayout.DefaultMarginValue">
            <summary>
            Gets the default value of the Margins property.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SpringLayout.Stretch">
            <summary>
            Gets or sets the link stretch factor.
            </summary>
            <value>
            A double value specifying the stretch factor used by the spring layout.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SpringLayout.IterationCount">
            <summary>
            Gets or sets for how many iterations to run the layout routine.
            </summary>
            <value>
            An integer number specifying the number of iterations.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SpringLayout.NodeDistance">
            <summary>
            Gets or sets the desired distance between nodes.
            </summary>
            <value>
            A real number specifying the distance between nodes.
            The default is 96.
            </value>
            <remarks>
            The final distance between connected nodes is determined
            by multiplying the Weight of the link that connects them
            by the value of NodeDistance.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SpringLayout.MinimizeCrossings">
            <summary>
            Gets or sets a value indicating whether crossing minimization
            mode is enabled.
            </summary>
            <value>
            true to attempt crossing minimization; otherwise, false.
            The default is true.
            </value>
            <remarks>
            If enabled, the algorithm tries to decrease number of crossing links.
            For better results, use greater IterationCount.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SpringLayout.EnableClusters">
            <summary>
            Gets or sets a value indicating whether to enable allocation
            of nodes to distinct clusters.
            </summary>
            <value>
            true to detect and process node clusters; otherwise, false.
            The default is false.
            </value>
            <remarks>
            If enabled, the SpringLayout algorithm detects node clusters
            and places them at distinct positions. Each cluster consists
            of a center node surrounded by several local nodes. Clusters
            might be connected with other clusters via their center nodes.
            Best-looking results are achieved when there aren't links
            between the local nodes in a cluster.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SpringLayout.SplitGraph">
            <summary>
            Gets or sets a value indicating whether to split the graph
            to its interconnected subgraphs and arrange the subgraphs
            independently or arrange the graph as a whole.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SpringLayout.RepulsionFactor">
            <summary>
            Gets or sets the multiplier applied to repulsion forces between nodes.
            </summary>
            <value>
            A double value specifying the repulsion factor used by the spring layout.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SpringLayout.RandomSeed">
            <summary>
            Gets or sets the randomization seed to use for
            generating random node positions.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SpringLayout.Randomize">
            <summary>
            Gets or sets a value indicating whether nodes should be placed
            at random positions when the layout routine starts.
            </summary>
            <value>
            true to start the simulation with random node positions; false to start it with the 
            original node positions.
            The default is true.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SpringLayout.LayoutArea">
            <summary>
            Gets or sets the size of the layout area.
            </summary>
            <value>
            A .NET Rect representing the boundaries of the layout area.
            The default is Rect.Empty.
            </value>
            <remarks>
            If the layout area is not explicitly set, the algorithm will
            choose one suitable for the graph size.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SpringLayout.LayoutMethod">
            <summary>
            Specifies what energy model to use for the simulation.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SpringLayout.Root">
            <summary>
            Gets or sets a node indicating which subgraph of
            the diagram must be laid out.
            </summary>
            <value>
            An instance of the DiagramNode class.
            The default is a null reference (Nothing in Visual Basic).
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SpringLayout.Layout3D">
            <summary>
            Specifies whether the layout should set the 3D coordinates
            of nodes for display inside DiagramView3D.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SpringLayout.Surface">
            <summary>
            Specifies on what surface the nodes should be placed initially.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SpringLayout.LinkType">
            <summary>
            Gets or sets the appearance of the links in the final layout.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.SpringLayoutLinkType">
            <summary>
            Specifies the style of the diagram links after they are laid out.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.SpringLayoutLinkType.Straight">
            <summary>
            Indicates straight links with a single segment.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.SpringLayoutLinkType.Rounded">
            <summary>
            Indicates Bézier links with a single segment.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.LayeredLayoutLinkType">
            <summary>
            Specifies the style of the links after they are laid out.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.LayeredLayoutLinkType.Straight">
            <summary>
            Indicates straight links.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.LayeredLayoutLinkType.Cascading">
            <summary>
            Indicates cascading links.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.Orientation">
            <summary>
            Specifies axial orientation.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.Orientation.Vertical">
            <summary>
            Indicates vertical orientation.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.Orientation.Horizontal">
            <summary>
            Indicates horizontal orientation.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.Direction">
            <summary>
            Specifies a layout direction.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.Direction.Straight">
            <summary>
            Indicates either left-to-right or top-to-bottom direction.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.Direction.Reversed">
            <summary>
            Indicates either right-to-left or bottom-to-top direction.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.LayeredLayout">
            <summary>
            Implements a layered graph layout algorithm.
            </summary>
            <remarks>
            This algorithm assigns diagram nodes to distinct horizontal or vertical layers.
            While arranging the layers, the layout routine seeks to meet the following criteria: 
            - connected nodes must be placed close together;
            - links must flow in one direction if possible;
            - links must cross as few layers as possible;
            - links must not cross other links;
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.#ctor">
            <summary>
            Initializes a new instance of the LayeredLayout class
            with the default settings.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.#ctor(MindFusion.Diagramming.Wpf.Layout.Orientation,System.Double,System.Double,System.Windows.Size)">
            <summary>
            Initializes a new instance of the LayeredLayout class
            with the specified settings.
            </summary>
            <param name="orientation">
            The orientation of the layout.
            </param>
            <param name="layerDistance">
            The distance between adjacent layers.
            </param>
            <param name="nodeDistance">
            The distance between adjacent nodes within the same layer.
            </param>
            <param name="margins">
            The margin between the produced graph and the left side of
            the diagram bounding rectangle.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.Arrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Applies the layout to the specified subset of items from the
            specified Diagram instance.
            </summary>
            <param name="diagram">
            The Diagram that should be arranged.
            </param>
            <param name="items">
            A collection of nodes and links from diagram that define
            the subgraph to arrange.
            </param>
            <returns>
            This method always returns true.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.Name">
            <summary>
            Gets a user-friendly name of the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.DefaultMarginValue">
            <summary>
            Gets the default value of the Margins property.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.Orientation">
            <summary>
            Gets or sets the overall orientation of the arranged diagram.
            </summary>
            <value>
            A member of the Orientation enumeration.
            The default is Vertical.
            </value>
            <remarks>
            Specify Orientation.Vertical to have links flow in vertical direction and 
            Orientation.Horizontal to have links flow in horizontal direction. 
            The orientation of the resulting layers is opposite to that of the links. 
            Thus, if the link tends to go in a vertical direction, the nodes are 
            distributed in horizontal layers.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.Direction">
            <summary>
            Gets or sets the direction of the arranged diagram.
            </summary>
            <value>
            A member of the Direction enumeration.
            The default is Straight.
            </value>
            <remarks>
            If Orientation is set to Horizontal, Direction.Straight stands
            for "left to right" and Direction.Reversed for "right to left".
            If Orientation is set to Vertical, Direction.Straight stands
            for "top to bottom" and Direction.Reversed for "bottom to top".
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.LayerDistance">
            <summary>
            Gets or sets the desired distance between layer axis lines.
            </summary>
            <value>
            A real number specifying the distance between layers.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.NodeDistance">
            <summary>
            Gets or sets the desired distance between adjacent nodes in a layer.
            </summary>
            <value>
            A real number specifying the distance between adjacent nodes.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.SplitLayers">
            <summary>
            Gets or sets a value indicating whether to split layers
            that are much wider than the other layers.
            </summary>
            <value>
            true to split wide layers; otherwise, false.
            The default is false.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.LinksCompactFactor">
            <summary>
            Gets or sets a value indicating how much to compact the outermost arrows.
            </summary>
            <value>
            A real number in the interval [0, 1].
            The default is 1.
            </value>
            <remarks>
            Links and nodes on the same graph layer are distributed uniformly as specified by 
            the NodeDistance value. However, if there are more than 2-3 outermost links on 
            a layer, they usually take up too much space without improving the visual 
            quality of the diagram layout. This property allows compacting such links to 
            save space. The factor specifies roughly a fraction of NodeDistance to leave 
            between outer links.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.TimeLimit">
            <summary>
            Gets or sets a time-out value for the path-finding part
            of the layered layout algorithm.
            </summary>
            <value>
            An integer value specifying time-out in milliseconds.
            The default is 10000 (10 seconds).
            </value>
            <remarks>
            The layered layout algorithm arranges graph nodes and links along the longest path 
            in the graph. Large graphs with many links could contain hundreds of thousands 
            of possible paths, so finding the longest one would be very time-consuming. 
            When the time-out set with this property occurs, the path-finding routine stops 
            and the layout algorithm uses the longest path known at that moment. 
            Usually, for graphs containing several hundreds of nodes, 1-2 seconds are 
            enough to find a long-enough path to produce nice layered layout.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.SwapPairsIterations">
            <summary>
            Gets or sets how many times to perform pair-swapping iterations
            on each layer.
            </summary>
            <value>
            An integer value specifying how many pair-swapping iterations to perform. 
            The default is 5.
            </value>
            <remarks>
            The algorithm swaps node pairs on each layer aiming to decrease
            the number of crossing links. Setting a higher value to this
            property helps to decrease the number of crossings.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.Root">
            <summary>
            Gets or sets a node indicating which subgraph of the diagram
            must be laid out.
            </summary>
            <value>
            An instance of the DiagramNode class.
            The default is a null reference (Nothing in Visual Basic).
            </value>
            <remarks>
            All links and nodes that can be reached from the root by following recursively its 
            links form a graph. If the root is specified, only the graph containing it is 
            laid out by Arrange.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.IgnoreNodeSize">
            <summary>
            Gets or sets a value indicating whether the distance between
            adjacent nodes in the final layout should be independent of
            the nodes' size.
            </summary>
            <value>
            true to ignore the node size; otherwise, false.
            The default is true.
            </value>
            <remarks>
            At this time, considering the size of nodes deteriorates the
            performance of the algorithm, so that's disabled by default.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.EnableCustomLayers">
            <summary>
            Gets or sets a value indicating whether to indicating whether
            the layered layout will honor the LayeredLayoutTraits.Layer flags.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.LinkType">
            <summary>
            Gets or sets the appearance of the links in the final layout.
            </summary>
            <value>
            A member of the LayeredLayoutLinkType enumeration.
            The default is Straight.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.Statistics">
            <summary>
            Gets layout-specific information about the nodes and links participating
            in the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.KeepRootPosition">
            <summary>
            Gets or sets a value indicating whether to preserve the position of the root node.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.EnforceLinkFlow">
            <summary>
            Gets or sets a value indicating whether to attempt to force all links to go in
            the same direction. If the graph being arrange has cycles, some of the links will
            still go backward.
            </summary>
            <remarks>
            EnableCustomLayers and SplitLayers are ignored if this property is set to true.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.StraightenLongLinks">
            <summary>
            Gets or sets whether the layout algorithm should strive to straighten
            links that cross more than one layer of the graph.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.StableSort">
            <summary>
            Gets or sets a value indicating whether to apply stable sorting during the
            layout algorithm. Stable sorting sometimes produces more readable results.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.StartNode">
            <summary>
            Gets or sets the node that should be placed in the first layer of the arranged graph.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayout.EndNode">
            <summary>
            Gets or sets the node that should be placed in the last layer of the arranged graph.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.LayeredLayoutStatistics">
            <summary>
            Encapsulates information about a layered layout which has already complete.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.LayeredLayoutStatistics.#ctor">
            <summary>
            Initializes a new instance of the LayeredLayoutStatistics class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.LayeredLayoutStatistics.Add(MindFusion.Layout.LayeredLayoutStatistics,MindFusion.Diagramming.Wpf.Layout.FCGraph)">
            <summary>
            Populates the statistics info from the specified source.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.LayeredLayoutStatistics.nodeLayerIndices">
            <summary>
            A mapping between nodes and their assigned layers.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.LayeredLayoutStatistics.nodeGridPositions">
            <summary>
            A mapping between nodes and their assigned grid positions.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.LayeredLayoutStatistics.linkLayerCount">
            <summary>
            A mapping between links and the number of layers they run through.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.LayeredLayoutStatistics.layerCount">
            <summary>
            The total number of layers in the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayoutStatistics.NodeLayerIndices">
            <summary>
            Gets a mapping between nodes and their assigned layers.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayoutStatistics.NodeGridPositions">
            <summary>
            Gets a mapping between nodes and their assigned grid positions.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayoutStatistics.LinkLayerCount">
            <summary>
            Gets a mapping between links and the number of layers they run through.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.LayeredLayoutStatistics.LayerCount">
            <summary>
            Gets the total number of layers in the layout. If more than one subgraph is
            laid out, this property returns the number of layers in the last subgraph.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.SwimlaneLayout">
            <summary>
            Implements an algorithm which arranges nodes in lanes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.SwimlaneLayout.#ctor">
            <summary>
            Initializes a new instance of the SwimlaneLayout class
            with the default settings.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.SwimlaneLayout.Arrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Applies the layout to the specified subset of items from the
            specified Diagram instance.
            </summary>
            <param name="diagram">
            The Diagram that should be arranged.
            </param>
            <param name="items">
            A collection of nodes and links from diagram that define
            the subgraph to arrange.
            </param>
            <returns>
            This method always returns true.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SwimlaneLayout.Name">
            <summary>
            Gets a user-friendly name of the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SwimlaneLayout.DefaultMarginValue">
            <summary>
            Gets the default value of the Margins property.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SwimlaneLayout.Direction">
            <summary>
            Gets or sets the direction of the arranged diagram.
            </summary>
            <remarks>
            If Orientation is set to Horizontal, Direction.Straight stands
            for "left to right" and Direction.Reversed for "right to left".
            If Orientation is set to Vertical, Direction.Straight stands
            for "top to bottom" and Direction.Reversed for "bottom to top".
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SwimlaneLayout.Orientation">
            <summary>
            Gets or sets the overall orientation of the arranged diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SwimlaneLayout.SwimlaneGrid">
            <summary>
            Gets or sets the object through which the layout can manipulate the swimlane grid.
            </summary>
            <remarks>
            If this is null at the time of layout, the layout will operate on the diagram's
            lane grid.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SwimlaneLayout.LaneDistance">
            <summary>
            Gets or sets the spacing between adjacent lanes in the final layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SwimlaneLayout.NodeDistance">
            <summary>
            Gets or sets the spacing between adjacent nodes within a lane in the final layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SwimlaneLayout.CollapseEmptyLanes">
            <summary>
            Get or sets a value indicating whether lanes without associated nodes will
            shrink to zero size. By default, empty lanes will have size equal to LaneDistance.
            </summary>
            <remarks>
            To be able to shrink the lanes of a LaneGrid to zero size, the MinHeaderSize
            property of the lane grid must be set to an appropriate value.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SwimlaneLayout.CompactNodes">
            <summary>
            Gets or sets a value indicating whether the nodes within individual lanes are compacted.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.SwimlaneLayout.KeepLaneSizes">
            <summary>
            Gets or sets a value indicating whether the layout will attempt to preserve the
            original sizes of the lanes in the supplied grid.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.ISwimlaneGrid">
            <summary>
            Represents an object which can be used by a SwimlaneLayout to adjust the
            corresponding swimlane grid.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ISwimlaneGrid.SetRowCount(System.Int32)">
            <summary>
            Sets the number of rows in the swimlane grid.
            </summary>
            <param name="value">
            A non-negative integer value specifying the number of rows.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ISwimlaneGrid.SetColumnCount(System.Int32)">
            <summary>
            Sets the number of columns in the swimlane grid.
            </summary>
            <param name="value">
            A non-negative integer value specifying the number of columns.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ISwimlaneGrid.GetRowCount">
            <summary>
            Gets the number of rows in the swimlane grid.
            </summary>
            <returns>
            The number of rows in the grid.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ISwimlaneGrid.GetColumnCount">
            <summary>
            Gets the number of columns in the grid.
            </summary>
            <returns>
            The number of columns in the grid.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ISwimlaneGrid.SetRowHeight(System.Int32,System.Double)">
            <summary>
            Sets the the height of the specified row in the swimlane grid.
            </summary>
            <param name="index">
            The zero-based index of the row.
            </param>
            <param name="value">
            The new height of the row.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ISwimlaneGrid.SetColumnWidth(System.Int32,System.Double)">
            <summary>
            Sets the the width of the specified column in the swimlane grid.
            </summary>
            <param name="index">
            The zero-based index of the column.
            </param>
            <param name="value">
            The new width of the column.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ISwimlaneGrid.GetRowHeight(System.Int32)">
            <summary>
            Gets the the height of the specified row in the swimlane grid.
            </summary>
            <param name="index">
            The zero-based index of the row.
            </param>
            <returns>
            The height of the row.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ISwimlaneGrid.GetColumnWidth(System.Int32)">
            <summary>
            Gets the the width of the specified column in the swimlane grid.
            </summary>
            <param name="index">
            The zero-based index of the column.
            </param>
            <returns>
            The width of the column.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ISwimlaneGrid.SetLeftMargin(System.Double)">
            <summary>
            Sets the left margin of the swimlane grid.
            </summary>
            <param name="value">
            The distance between the left side of the grid and the diagram bounds.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ISwimlaneGrid.SetTopMargin(System.Double)">
            <summary>
            Sets the top margin of the swimlane grid.
            </summary>
            <param name="value">
            The distance between the top side of the grid and the diagram bounds.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.LaneGrid">
            <summary>
            Represents an ISwimlaneGrid which operates on a MindFusion.Diagramming.Lanes.Grid object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.LaneGrid.#ctor(MindFusion.Diagramming.Wpf.Lanes.Grid)">
            <summary>
            Initializes a new instance of the LaneGrid class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.LaneGrid.SetRowCount(System.Int32)">
            <summary>
            ISwimlaneGrid.SetRowCount implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.LaneGrid.SetColumnCount(System.Int32)">
            <summary>
            ISwimlaneGrid.SetColumnCount implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.LaneGrid.GetRowCount">
            <summary>
            ISwimlaneGrid.GetRowCount implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.LaneGrid.GetColumnCount">
            <summary>
            ISwimlaneGrid.GetColumnCount implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.LaneGrid.SetRowHeight(System.Int32,System.Double)">
            <summary>
            ISwimlaneGrid.SetRowHeight implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.LaneGrid.SetColumnWidth(System.Int32,System.Double)">
            <summary>
            ISwimlaneGrid.SetColumnCount implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.LaneGrid.GetRowHeight(System.Int32)">
            <summary>
            ISwimlaneGrid.GetRowHeight implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.LaneGrid.GetColumnWidth(System.Int32)">
            <summary>
            ISwimlaneGrid.GetColumnCount implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.LaneGrid.SetLeftMargin(System.Double)">
            <summary>
            ISwimlaneGrid.SetLeftMargin implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.LaneGrid.SetTopMargin(System.Double)">
            <summary>
            ISwimlaneGrid.SetTopMargin implementation.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.SwimlaneGridAdapter">
            <summary>
            A wrapper between MindFusion.Diagramming.Layout.ISwimlaneGrid and
            MindFusion.Layout.ISwimlaneGrid.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.SwimlaneGridAdapter.#ctor(MindFusion.Diagramming.Wpf.Layout.ISwimlaneGrid)">
            <summary>
            Initializes a new instance of the SwimlaneGridAdapter class
            over the specified ISwimlaneGrid instance.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.SwimlaneGridAdapter.SetRowCount(System.Int32)">
            <summary>
            ISwimlaneGrid.SetRowCount implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.SwimlaneGridAdapter.SetColumnCount(System.Int32)">
            <summary>
            ISwimlaneGrid.SetColumnCount implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.SwimlaneGridAdapter.GetRowCount">
            <summary>
            ISwimlaneGrid.GetRowCount implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.SwimlaneGridAdapter.GetColumnCount">
            <summary>
            ISwimlaneGrid.GetColumnCount implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.SwimlaneGridAdapter.SetRowHeight(System.Int32,System.Double)">
            <summary>
            ISwimlaneGrid.SetRowHeight implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.SwimlaneGridAdapter.SetColumnWidth(System.Int32,System.Double)">
            <summary>
            ISwimlaneGrid.SetColumnWidth implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.SwimlaneGridAdapter.GetRowHeight(System.Int32)">
            <summary>
            ISwimlaneGrid.GetRowHeight implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.SwimlaneGridAdapter.GetColumnWidth(System.Int32)">
            <summary>
            ISwimlaneGrid.GetColumnWidth implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.SwimlaneGridAdapter.SetLeftMargin(System.Double)">
            <summary>
            ISwimlaneGrid.SetLeftMargin implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.SwimlaneGridAdapter.SetTopMargin(System.Double)">
            <summary>
            ISwimlaneGrid.SetTopMargin implementation.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.OrthogonalLayout">
            <summary>
            Implements an orthogonal graph layout algorithm. Each link is drawn
            as a chain of alternating horizontal and vertical segments.
            Nodes are placed in a way that facilitates few links bends and crossings.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.OrthogonalLayout.#ctor">
            <summary>
            Initializes a new instance of the OrthogonalLayout class
            with the default settings.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.OrthogonalLayout.BuildGraph(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Layout.BuildGraph override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.OrthogonalLayout.Arrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Applies the layout to the specified subset of items from the
            specified Diagram instance.
            </summary>
            <param name="diagram">
            The Diagram that should be arranged.
            </param>
            <param name="items">
            A collection of nodes and links from diagram that define
            the subgraph to arrange.
            </param>
            <returns>
            This method always returns true.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.OrthogonalLayout.Name">
            <summary>
            Gets a user-friendly name of the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.OrthogonalLayout.DefaultMarginValue">
            <summary>
            Gets the default value of the Margins property.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.OrthogonalLayout.Directed">
            <summary>
            Gets or sets a value indicating whether the graph being laid out
            is directed.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.OrthogonalLayout.Refine">
            <summary>
            Gets or sets a value indicating whether to refine the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.OrthogonalLayout.Padding">
            <summary>
            Gets or sets a value indicating how much space to leave between nodes in adjacent lanes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.OrthogonalLayout.MinLaneSize">
            <summary>
            Gets or sets a value indicating the minimum size of a lane.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.OrthogonalLayout.MinimizeLinkBends">
            <summary>
            Gets or sets a value indicating whether the layout should attempt to minimize link bending.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.TriangularLayout">
            <summary>
            Performs triangular layout on simple, connected graphs.
            </summary>
            <remarks>
            The triangular layout places vertices on a virtual grid, such that if the source graph
            is planar is guaranteed that all links will have a single segment and will not intersect.
            If the graph is not planar, the intersecting links are optionally segmented and bended
            in order to improve readability.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.TriangularLayout.#ctor">
            <summary>
            Initializes a new instance of the TriangularLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.TriangularLayout.BuildGraph(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Layout.BuildGraph override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.TriangularLayout.Arrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Applies the layout to the specified subset of items from the
            specified Diagram instance.
            </summary>
            <param name="diagram">
            The Diagram that should be arranged.
            </param>
            <param name="items">
            A collection of nodes and links from diagram that define
            the subgraph to arrange.
            </param>
            <returns>
            This method always returns true.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TriangularLayout.Name">
            <summary>
            Gets a user-friendly name of the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TriangularLayout.DefaultMarginValue">
            <summary>
            Gets the default value of the Margins property.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TriangularLayout.Orientation">
            <summary>
            Gets or sets a the orientation of the arranged graph.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TriangularLayout.BendNonplanarLinks">
            <summary>
            Gets or sets a value indicating whether the intersecting links in a
            non-planar graphs will be segmented and bended to improve presentation.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TriangularLayout.GridSize">
            <summary>
            Gets or sets the size of the virtual grid the layout will place vertices on.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.CascadeLayout">
            <summary>
            Performs cascading layout on simple, connected graphs.
            </summary>
            <remarks>
            The cascade layout places vertices on a virtual grid and arranges edges orthogonally,
            such that if the source graph is planar it is guaranteed that all edges will have no
            more than two bends and will not intersect.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.CascadeLayout.#ctor">
            <summary>
            Initializes a new instance of the CascadeLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.CascadeLayout.BuildGraph(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Layout.BuildGraph override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.CascadeLayout.Arrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Applies the layout to the specified subset of items from the
            specified Diagram instance.
            </summary>
            <param name="diagram">
            The Diagram that should be arranged.
            </param>
            <param name="items">
            A collection of nodes and links from diagram that define
            the subgraph to arrange.
            </param>
            <returns>
            This method always returns true.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.CascadeLayout.IntersectsNode(MindFusion.Diagramming.Wpf.Layout.FCGraph,MindFusion.Diagramming.Wpf.Layout.FCLink)">
            <summary>
            Checks whether the specified link intersects a node in the specified graph.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.CascadeLayout.Name">
            <summary>
            Gets a user-friendly name of the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.CascadeLayout.DefaultMarginValue">
            <summary>
            Gets the default value of the Margins property.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.CascadeLayout.Orientation">
            <summary>
            Gets or sets a the orientation of the arranged graph.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.CascadeLayout.Padding">
            <summary>
            Gets or sets the spacing between nodes in adjacent layers.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.HierarchicalLayout">
            <summary>
            Performs hierarchical layout on simple, connected, level-planar graphs.
            </summary>
            <remarks>
            The hierarchical layout places vertices on predefined levels, such that if the source graph
            is level-planar it is guaranteed that all edges will have a single segment and will not
            intersect. A planar graph is considered level-planar if it is still possible to draw it
            without edge intersections when its vertices are positioned on predefined levels.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.HierarchicalLayout.#ctor">
            <summary>
            Initializes a new instance of the HierarchicalLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.HierarchicalLayout.BuildGraph(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Layout.BuildGraph override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.HierarchicalLayout.Arrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Applies the layout to the specified subset of items from the
            specified Diagram instance.
            </summary>
            <param name="diagram">
            The Diagram that should be arranged.
            </param>
            <param name="items">
            A collection of nodes and links from diagram that define
            the subgraph to arrange.
            </param>
            <returns>
            false, if there is a node in the graph without assigned level; otherwise, true.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.HierarchicalLayout.Name">
            <summary>
            Gets a user-friendly name of the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.HierarchicalLayout.DefaultMarginValue">
            <summary>
            Gets the default value of the Margins property.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.HierarchicalLayout.Orientation">
            <summary>
            Gets or sets a the orientation of the arranged graph.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.HierarchicalLayout.LevelDistance">
            <summary>
            Gets or sets the distance between adjacent levels in the hierarchical layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.HierarchicalLayout.LinkBendFactor">
            <summary>
            Gets or sets the bending factor of links.
            </summary>
            <remarks>
            A value of 1 indicates that the links should not bend. A value less than 1 indicates that
            the links should bend towards the geometric center of the graph. A value greater than 1
            indicates that the links should bend outwards.
            </remarks>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.CircularLayout">
            <summary>
            Implements a circular graph layout algorithm. Nodes are distributed
            evenly on the circumference of a circle at positions that result in
            as few link crossing as possible.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.CircularLayout.#ctor">
            <summary>
            Initializes a new instance of the CircularLayout class
            with the default settings.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.CircularLayout.BuildGraph(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Layout.BuildGraph override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.CircularLayout.Arrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Applies the layout to the specified subset of items from the
            specified Diagram instance.
            </summary>
            <param name="diagram">
            The Diagram that should be arranged.
            </param>
            <param name="items">
            A collection of nodes and links from diagram that define
            the subgraph to arrange.
            </param>
            <returns>
            This method always returns true.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.CircularLayout.Name">
            <summary>
            Gets a user-friendly name of the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.CircularLayout.DefaultMarginValue">
            <summary>
            Gets the default value of the Margins property.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.CircularLayout.Radius">
            <summary>
            Gets or sets the radius of the layout circle.
            </summary>
            <remarks>
            If this property is set to 0, the layout will try to find an
            appropriate radius depending on the number and size of the participating nodes.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.CircularLayout.SiftingRounds">
            <summary>
            Gets or sets the number of sifts to perform during the layout.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.GridLayout">
            <summary>
            Implements a grid graph layout algorithm.
            </summary>
            <remarks>
            GridLayout arranges diagram nodes in a grid, keeping connected nodes close together. 
            The algorithm strives to achieve a small number of link crossings. It is based on 
            an iterative process whose initial steps shuffle the grid nodes randomly. That can 
            lead to very different results each time the algorithm is run.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.GridLayout.#ctor">
            <summary>
            Initializes a new instance of the GridLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.GridLayout.Arrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Applies the layout to a subgraph of the specified Diagram instance.
            </summary>
            <param name="diagram">
            The Diagram that should be arranged.
            </param>
            <param name="items">
            A collection of nodes and links from diagram that define the
            subgraph to arrange.
            </param>
            <returns>
            true if the layout is successfully applied; false if StartNode and
            EndNode are specified and there is no path between them.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.GridLayout.Name">
            <summary>
            Gets a user-friendly name of the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.GridLayout.DefaultMarginValue">
            <summary>
            Gets the default value of the Margins property.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.GridLayout.StartNode">
            <summary>
            Gets or sets the node that is placed at the upper left corner of the grid.
            </summary>
            <value>
            An instance of the DiagramNode class.
            The default is null (Nothing in Visual Basic).
            </value>
            <remarks>
            If you assign a node to that property, then EndNode cannot be
            null and must be set too. GridLayout usually produces better
            layouts if both StartNode and EndNode are null references; in
            such a case the algorithm automatically selects suitable nodes.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.GridLayout.EndNode">
            <summary>
            Gets or sets the node that is placed at the lower right corner of the grid.
            </summary>
            <value>
            An instance of the DiagramNode class.
            Default value is null (Nothing in Visual Basic).
            </value>
            <remarks>
            If you assign a node to that property, then StartNode cannot be null
            and must be set too. GridLayout usually produces better layouts if
            both StartNode and EndNode are null references; in such a case the
            algorithm automatically selects suitable nodes.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.GridLayout.Iterations">
            <summary>
            Gets or sets for how many iterations to run the grid layout algorithm.
            </summary>
            <value>
            An integer number specifying the number of iterations.
            The default is 3000.
            </value>
            <remarks>
            More iterations would yield better layouts but require more time
            to complete.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.GridLayout.GridSize">
            <summary>
            Gets or sets the desired distance between adjacent grid points.
            </summary>
            <value>
            A real number specifying the grid size.
            The default is 96.
            </value>
            <remarks>
            When placing a node at a grid position, the node center point is
            aligned to the grid point at that position.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.GridLayout.RandomSeed">
            <summary>
            Gets or sets the randomization seed to use for generating
            random node positions.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.GridLayout.SplitGraph">
            <summary>
            Gets or sets a value indicating whether to split the graph
            to its interconnected subgraphs and arrange the subgraphs
            independently or arrange the graph as a whole.
            </summary>
            <value>
            true to split the graph; otherwise, false.
            </value>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.GridLayout.Root">
            <summary>
            Gets or sets a node indicating which subgraph of the
            diagram should be laid out.
            </summary>
            <value>
            An instance of the DiagramNode class.
            The default is a null reference (Nothing in Visual Basic).
            </value>
            <remarks>
            All links and nodes that can be reached from the root by
            following recursively its links form a graph. If the root
            is specified, only the graph which it defines is laid out
            by Arrange.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.GridLayout.UseLongestPath">
            <summary>
            Gets or sets a value indicating whether the algorithm should
            arrange nodes around the longest path in the graph.
            </summary>
            <value>
            true to look for the longest path in the graph and arrange nodes around it; 
            otherwise, false.
            </value>
            <remarks>
            Initially, the algorithm places nodes and links from the longest path in the graph 
            at the grid diagonal, and arranges the rest of the nodes around the diagonal. 
            Large graphs with many links could contain hundreds of thousands of possible 
            paths, so finding the longest one would be very time-consuming. Disabling this 
            property will let you skip the path-finding part of the algorithm, which will 
            make it work much faster.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.GridLayout.TimeLimit">
            <summary>
            Gets or sets a time-out value for the path-finding part
            of the grid layout algorithm.
            </summary>
            <value>
            An integer value specifying time-out in milliseconds.
            The default is 10000 (10 seconds).
            </value>
            <remarks>
            The grid layout algorithm arranges graph nodes and links along the longest path in 
            the graph. Large graphs with many links could contain hundreds of thousands of 
            possible paths, so finding the longest one would be very time-consuming. When 
            the time-out set with this property occurs, the path-finding routine stops and 
            the layout algorithm uses the longest path known at that moment. Usually, for 
            graphs containing several hundreds of nodes, 1-2 seconds are enough to find a 
            path long enough to produce a nice layout.
            </remarks>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.OrthogonalRouter">
            <summary>
            Implements an orthogonal link routing algorithm.
            </summary>
            <remarks>
            OrthogonalRouter is a secondary layout algorithm that can be used to arrange links 
            after an initial node arrangement has already been applied. The orthogonal layout 
            is useful when there are much more links than nodes in a graph. The algorithm 
            strives to achieve the following criteria, while preserving as much of the initial 
            node configuration as possible.
            - links must not overlap;
            - only vertical and horizontal routing lines are used;
            - graph routing is performed with respect to the specified main layout direction;
            - links crossings are minimized;
            - bends are minimized;
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.OrthogonalRouter.#ctor">
            <summary>
            Initializes a new instance of the OrthogonalRouter class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.OrthogonalRouter.Arrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Applies the layout to the specified subset of items from the
            specified Diagram instance.
            </summary>
            <param name="diagram">
            The Diagram that should be arranged.
            </param>
            <param name="items">
            A collection of nodes and links from diagram that define the
            subgraph to arrange.
            </param>
            <returns>
            This method always returns true.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.OrthogonalRouter.Name">
            <summary>
            Gets a user-friendly name of the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.OrthogonalRouter.DefaultMarginValue">
            <summary>
            Gets the default value of the Margins property.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.OrthogonalRouter.BendDistance">
            <summary>
            Gets or sets how far from its adjacent node a link should bend.
            </summary>
            <value>
            A real number specifying the distance from a link's first bend to its adjacent node. 
            The default is 0, specifying that the algorithm should automatically choose a value for this parameter.
            </value>
            <remarks>
            This should be a value between 0 and 1, specifying a distance
            proportional to the node size.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.OrthogonalRouter.GridSize">
            <summary>
            Gets or sets the distance between adjacent grid points when
            BaseLayout is set to Grid.
            </summary>
            <value>
            A real number specifying the grid size.
            The default is 96.
            </value>
            <remarks>
            This value is assigned to the GridSize property of the base GridLayout.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.OrthogonalRouter.RandomSeed">
            <summary>
            Gets or sets the randomization seed to use for generating
            random node positions.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.OrthogonalRouter.Orientation">
            <summary>
            Gets or sets the overall orientation of the arranged diagram
            when BaseLayout is set to Layered.
            </summary>
            <value>
            An instance of the Orientation enumeration.
            The default is Vertical.
            </value>
            <remarks>
            This value is assigned to the Orientation property of the
            base LayeredLayout.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.OrthogonalRouter.Direction">
            <summary>
            Gets or sets the direction of the arranged diagram when BaseLayout
            is set to Layered.
            </summary>
            <value>
            A member of the Direction enumeration.
            The default is Straight.
            </value>
            <remarks>
            This value is assigned to the Direction property of the base LayeredLayout.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.OrthogonalRouter.LayerDistance">
            <summary>
            Gets or sets the desired distance between layer axis lines.
            </summary>
            <value>
            A real number specifying the distance between layers.
            The default is 96.
            </value>
            <remarks>
            Gets or sets the distance between layers when BaseLayout
            is set to Layered or Cascading.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.OrthogonalRouter.NodeDistance">
            <summary>
            Gets or sets the desired distance between adjacent nodes in a layer.
            </summary>
            <value>
            A real number specifying the distance between adjacent nodes.
            The default is 96.
            </value>
            <remarks>
            Gets or sets the distance between nodes in the same layer when
            BaseLayout is set to Layered or Cascading.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.OrthogonalRouter.PutEndPointsAtNodeBorders">
            <summary>
            Gets or sets a value indicating whether the end points of a link
            should be placed at the outlines of the nodes connected by that link.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.OrthogonalRouter.StartOrientation">
            <summary>
            Gets or sets the desired orientation of the first segments of routed links.
            </summary>
            <value>
            A member of the Orientation enumeration.
            The default value is Auto.
            </value>
            <remarks>
            If this property is set to Horizontal, links will end at the left or right sides 
            of nodes. If set to Vertical, links will end at the top or bottom sides.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.OrthogonalRouter.EndOrientation">
            <summary>
            Gets or sets the desired orientation of the last segments of routed links.
            </summary>
            <value>
            A member of the Orientation enumeration.
            The default value is Auto.
            </value>
            <remarks>
            If this property is set to Horizontal, links will end at the left or right sides 
            of nodes. If set to Vertical, links will end at the top or bottom sides.
            </remarks>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.LaneType">
            <summary>
            Specifies where FlowLayout gets the swimlane dimensions from.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.LaneType.LaneGrid">
            <summary>
            FlowLayout gets the swimlane dimensions from Diagram.LaneGrid.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.LaneType.LaneNodes">
            <summary>
            FlowLayout interprets locked background nodes as swimlanes.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.LaneType.Custom">
            <summary>
            FlowLayout should get the swimlane dimensions from the array
            of rectangles passed as an argument to Arrange.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.FlowLayout">
            <summary>
            Implements a flowchart, workflow and process diagrams layout algorithm.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FlowLayout.#ctor">
            <summary>
            Initializes a new instance of the FlowLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FlowLayout.Arrange(MindFusion.Diagramming.Wpf.Diagram,System.Windows.Rect[])">
            <summary>
            Applies the layout to the specified Diagram instance and an array of rectangles
            defining custom lane borders.
            </summary>
            <param name="diagram">
            The Diagram to arrange.
            </param>
            <param name="laneBorders">
            An array of rectangles defining custom lane borders.
            </param>
            <returns>
            true if the diagram has been arranged successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FlowLayout.Arrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Applies the layout to the specified subset of items from the
            specified Diagram instance.
            </summary>
            <param name="diagram">
            The Diagram to arrange.
            </param>
            <param name="items">
            Specifies a subset of diagram items to arrange.
            </param>
            <returns>
            true if the diagram has been arranged successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FlowLayout.Arrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection,System.Windows.Rect[])">
            <summary>
            Applies the layout to the specified subset of items from the
            specified Diagram instance and an array of rectangles
            defining custom lane borders.
            </summary>
            <param name="diagram">
            The Diagram to arrange.
            </param>
            <param name="items">
            Specifies a subset of diagram items to arrange.
            </param>
            <param name="laneBorders">
            An array of rectangles defining custom lane borders.
            </param>
            <returns>
            true if the diagram has been arranged successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FlowLayout.AddNode(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Adds the specified node to the already arranged diagram.
            </summary>
            <param name="node">
            A DiagramNode instance.
            </param>
            <param name="diagram">
            A Diagram instance.
            </param>
            <returns>
            true if the node has been added successfully; otherwise, false.
            </returns>
            <remarks>
            You can use AddNode to implement incremental layout of a diagram,
            for example, by adding new nodes drawn by the user or added via a
            context menu command. For this method to work correctly, RecreateGraph
            must be disabled.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FlowLayout.RemoveNode(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Removes the specified node from an existing diagram.
            </summary>
            <param name="node">
            The DiagramNode to remove.
            </param>
            <param name="diagram">
            An already arranged Diagram.
            </param>
            <returns>
            true if the node has been removed successfully; otherwise, false.
            </returns>
            <remarks>
            You can use RemoveNode to implement incremental layout of a diagram,
            for example, by removing nodes deleted by the user or removed via a
            context menu command. For this method to work correctly, RecreateGraph
            must be disabled.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FlowLayout.InsertNode(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.DiagramLink,MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Inserts the specified node between two nodes connected by the by
            specified link.
            </summary>
            <param name="node">
            The DiagramNode to insert.
            </param>
            <param name="linkToSplit">
            The DiagramLink to split.
            </param>
            <param name="diagram">
            A Diagram instance.
            </param>
            <returns>
            true if the node has been added successfully; otherwise, false.
            </returns>
            <remarks>
            You can use InsertNode to implement incremental layout of a diagram,
            for example, by adding new nodes drawn by the user or added via a
            context menu command. For this method to work correctly, RecreateGraph
            must be disabled.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FlowLayout.BendLinks(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Bends all links in an already arranged diagram.
            </summary>
            <param name="diagram">
            A Diagram instance.
            </param>
            <remarks>
            You can use BendLinks to implement incremental layout of a diagram,
            for example, by calling it after the user draws a new link, or after
            several new links are added programmatically. For this method to work
            correctly, RecreateGraph must be disabled.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FlowLayout.InsertLane(MindFusion.Diagramming.Wpf.DiagramNode,System.Int32,MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Inserts new lane box
            </summary>
            <param name="node"></param>
            <param name="indx"></param>
            <param name="diagram"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FlowLayout.RemoveLane(MindFusion.Diagramming.Wpf.DiagramNode,System.Int32,MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Removes lane box
            </summary>
            <param name="node"></param>
            <param name="indx"></param>
            <param name="diagram"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FlowLayout.InsertLane(MindFusion.Diagramming.Wpf.Lanes.Header,MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Inserts new lane
            </summary>
            <param name="header"></param>
            <param name="diagram"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FlowLayout.RemoveLane(MindFusion.Diagramming.Wpf.Lanes.Header,MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Removes selected lane from laneGrid
            </summary>
            <param name="header"></param>
            <param name="diagram"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FlowLayout.BuildLaneList(MindFusion.Diagramming.Wpf.Diagram,System.Windows.Rect[])">
            <summary>
            Creates a list of Lane objects describing the swimlanes
            to use for arranging the specified diagram.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FlowLayout.ResizeLanes(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Sets new swimlane sizes based on the layout requirements.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FlowLayout.ResizeLanes(MindFusion.Diagramming.Wpf.Diagram,System.Windows.Rect)">
            <summary>
            Sets new swimlane sizes based on the layout requirements if arrange diagram item collection.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.FlowLayout._docLane">
            <summary>
            A flag indicating whether there are no lanes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.Name">
            <summary>
            Gets a user-friendly name of the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.DefaultMarginValue">
            <summary>
            Gets the default value of the Margins property.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.MultipleGraphsPlacement">
            <summary>
            Not supported by FlowLayout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.Anchoring">
            <summary>
            Not supported by FlowLayout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.ChangeLaneDimensions">
            <summary>
            Gets or sets a value indicating whether the layout algorithm
            is allowed to change the initial Lane dimensions.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.HorizontalGroupOffset">
            <summary>
            Gets or sets the horizontal subgroup offset.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.VerticalGroupOffset">
            <summary>
            Gets or sets the vertical subgroup offset.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.ProcessOffset">
            <summary>
            Gets or sets the horizontal subgroup offset.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.RandomSeed">
            <summary>
            Gets or sets the randomization seed to use for generating
            random node positions.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.Root">
            <summary>
            Gets or sets the node specifying which subgraph of
            the diagram should be laid out.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.NodeDistance">
            <summary>
            Gets or sets the desired distance between adjacent nodes in a layer.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.LayoutRules">
            <summary>
            Gets or sets the rules used to infer the node positions from
            their logic identifiers and the connections in the graph.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.LaneType">
            <summary>
            Gets or sets a value indicating how process diagram swimlanes
            are defined in the current Diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.RecreateGraph">
            <summary>
            Gets or sets a value indicating whether the layout algorithm
            should recreate its internal graph representation for the diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.LaneBoundaries">
            <summary>
            Gets or sets the array of custom lane borders.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.LaneDistance">
            <summary>
            Gets or sets the desired distance between adjacent lanes.
            </summary>
            <remarks>
            The lanes are placed at the specified distance from each other
            only if ChangeLaneDimensions is enabled.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.LaneOffsetX">
            <summary>
            Gets or sets the desired distance between nodes and lanes' border.
            </summary>
            <remarks>
            The nodes are placed at the specified distance from lane's border
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.LaneOffsetY">
            <summary>
            Gets or sets the desired distance between nodes and lanes' border.
            </summary>
            <remarks>
            The nodes are placed at the specified distance from lane's border
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.SubLaneOffsetY">
            <summary>
            Gets or sets the desired distance between nodes and sub lanes' border.
            </summary>
            <remarks>
            The nodes are placed at the specified distance from sub lane's border
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.LinksBend">
            <summary>
            Specifies whether links between non-adjacent nodes should bend.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.AutoRoute">
            <summary>
            Gets or sets a value indicating whether longer links should be routed
            to avoid crossing the diagram nodes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.Lanes">
            <summary>
            Returns a list of layout lanes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.LinksToRoute">
            <summary>
            Gets all links, which needs additional route.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowLayout.MinLaneHight">
            <summary>
            Gets or sets the minimal Lane's hight
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.FlowchartLayout">
            <summary>
            Implements a flowchart, workflow and process diagrams layout algorithm.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FlowchartLayout.#ctor">
            <summary>
            Initializes a new instance of the FlowchartLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FlowchartLayout.BuildGraph(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Creates and returns a FCGraph instance representing
            the graph in the specified diagram.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FlowchartLayout.Arrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Applies the layout to the specified subset of items from the
            specified Diagram instance.
            </summary>
            <param name="diagram">
            The Diagram to arrange.
            </param>
            <param name="items">
            Specifies a subset of diagram items to arrange.
            </param>
            <returns>
            true if the diagram has been arranged successfully; otherwise, false.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowchartLayout.Name">
            <summary>
            Gets a user-friendly name of the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowchartLayout.DefaultMarginValue">
            <summary>
            Gets the default value of the Margins property.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowchartLayout.SplitGraph">
            <summary>
            Gets or sets a value indicating whether unconnected subgraphs
            should be laid out independently from each other.
            </summary>
            <remarks>
            If this property is set to true, each independent graph in
            the diagram is laid out in its own layout area. Otherwise all
            subgraphs are arranged in the same layout area.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowchartLayout.Orientation">
            <summary>
            Gets or sets the overall orientation of the arranged diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowchartLayout.BranchPadding">
            <summary>
            Gets or sets how much space to leave between adjacent decision branches in the flowchart.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowchartLayout.LinkPadding">
            <summary>
            Gets or sets how much space to leave between adjacent back links designating nested loops.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowchartLayout.NodeDistance">
            <summary>
            Gets or sets the distance between consecutive nodes in the flowchart.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FlowchartLayout.IgnoreRepeatingLinks">
            <summary>
            Gets or sets a value indicating whether to ignore repeating links.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.TopologicalLayout">
            <summary>
            Implements a topological ordering.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.TopologicalLayout.#ctor">
            <summary>
            Initializes a new instance of the TopologicalLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.TopologicalLayout.BuildGraph(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Layout.BuildGraph override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.TopologicalLayout.Arrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Applies the layout to the specified subset of items from the
            specified Diagram instance.
            </summary>
            <param name="diagram">
            The Diagram to arrange.
            </param>
            <param name="items">
            Specifies a subset of diagram items to arrange.
            </param>
            <returns>
            true if the diagram has been arranged successfully; otherwise, false.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TopologicalLayout.MultipleGraphsPlacement">
            <summary>
            Gets or sets a value indicating how multiple independent graphs
            in the diagram should be positioned relatively to each other.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TopologicalLayout.Name">
            <summary>
            Gets a user-friendly name of the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TopologicalLayout.DefaultMarginValue">
            <summary>
            Gets the default value of the Margins property.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TopologicalLayout.SplitGraph">
            <summary>
            Gets or sets a value indicating whether unconnected subgraphs
            should be laid out independently from each other.
            </summary>
            <remarks>
            If this property is set to true, each independent graph in
            the diagram is laid out in its own layout area. Otherwise all
            subgraphs are arranged in the same layout area.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TopologicalLayout.Orientation">
            <summary>
            Gets or sets the overall orientation of the arranged diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TopologicalLayout.Direction">
            <summary>
            Gets or sets the direction of the arranged diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TopologicalLayout.NodeDistance">
            <summary>
            Gets or sets the distance between adjacent nodes in the diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.TopologicalLayout.BendAdjacentLinks">
            <summary>
            Gets or sets a value indicating whether to bend links connecting
            adjacent nodes or draw them as straight lines.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.CompositeLayout">
            <summary>
            Implements a multi-level graph layout algorithm.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.CompositeLayout.#ctor">
            <summary>
            Initializes a new instance of the CompositeLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.CompositeLayout.BuildGraph(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Layout.BuildGraph override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.CompositeLayout.Arrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Applies the layout to the specified subset of items from the
            specified Diagram instance.
            </summary>
            <param name="diagram">
            The Diagram to arrange.
            </param>
            <param name="items">
            Specifies a subset of diagram items to arrange.
            </param>
            <returns>
            true if the diagram has been arranged successfully; otherwise, false.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.CompositeLayout.Name">
            <summary>
            Gets a user-friendly name of the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.CompositeLayout.DefaultMarginValue">
            <summary>
            Gets the default value of the Margins property.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.CompositeLayout.PartitionMethod">
            <summary>
            Gets or sets the method to use when finding partition within the source graph.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.CompositeLayout.DesiredSubgraphSize">
            <summary>
            Gets or sets the preferred number of vertices in the partitions allocated by the layout.
            </summary>
            <remarks>
            Setting this property to 0 or less will cause an exception.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.CompositeLayout.Tolerance">
            <summary>
            Gets or sets a multiplier to be applied to the DesiredSubgraphSize.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.CompositeLayout.EmphasizeTrees">
            <summary>
            Gets or sets a value indicating whether the cut-vertices of tree subgraphs are added
            to the corresponding trees.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.CompositeLayout.MasterLayout">
            <summary>
            Gets or sets a layout that should be applied globally to the graph.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.CompositeLayout.SubtreeLayout">
            <summary>
            Gets or sets a layout that should be applied to subgraphs representing trees.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.CompositeLayout.SubgraphLayout">
            <summary>
            Gets or sets a layout that should be applied to general subgraphs.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.CompositeLayout.CustomLayout">
            <summary>
            Gets or sets a custom layout that should be applied to subgraphs.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.CompositeLayout.RotateSubgraphs">
            <summary>
            Gets or sets a value indicating whether subgraphs are rotated to minimize
            intersections with cross-partition links.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.CompositeLayout.CustomPartition">
            <summary>
            Gets or sets the custom partition to use when PartitionMethod is set to Custom.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.FractalLayout">
            <summary>
            A tree layout algorithm that places child nodes symmetrically around their parent node.
            </summary>
            <remarks>
            Nodes at the lowest level are arranged directly in a circle around their parent. At the upper level,
            the already arranged nodes form branches that are arranged in a circle around the new parent node.
            The algorithm is recursively repeated till the highest level is reached.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FractalLayout.#ctor">
            <summary>
            Initializes a new instance of the FractalLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FractalLayout.BuildGraph(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Layout.BuildGraph override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FractalLayout.Arrange(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Applies the layout to the specified subset of items from the
            specified Diagram instance.
            </summary>
            <param name="diagram">
            The Diagram that should be arranged.
            </param>
            <param name="items">
            A collection of nodes and links from diagram that define
            the subgraph to arrange.
            </param>
            <returns>
            This method always returns true.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FractalLayout.Name">
            <summary>
            Gets a user-friendly name of the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FractalLayout.DefaultMarginValue">
            <summary>
            Gets the default value of the Margins property.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FractalLayout.Root">
            <summary>
            Gets or sets the tree root.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Behaviors.DrawTablesBehavior">
            <summary>
            This class is used when the diagram behavior is set to Behavior.DrawTables.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.DrawTablesBehavior.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the DrawTablesBehavior class.
            </summary>
            <param name="diagram">
            The Diagram this behavior will be associated with.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.DrawTablesBehavior.CreateNode">
            <summary>
            LinkNodesBehavior.CreateNode override.
            </summary>
            <returns>
            An instance of the DiagramNode class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LineMath.GetArrowheadLineEndPoint(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Double,System.Double)">
            <summary>
            Gets the endpoint of the arrow on angle angle, of the line (line_sp, line_ep)
            </summary>
            <param name="line_sp">start point of the line</param>
            <param name="line_ep">end point of the line</param>
            <param name="pointTmp"></param>
            <param name="angle">arrowhead semiangle in degree</param>
            <param name="dim">arrowhead dimension</param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LineMath.CertainDistancePoint(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Double)">
            <summary>
            Returns a point of a certain line segment displaced on the certain distance from its begin or end point
            </summary>
            <param name="sp">start point to devine the line</param>
            <param name="ep">end point to devine the line</param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.MathUtils.GetViewMatrix(System.Windows.Media.Media3D.Camera)">
            <summary>
                Computes the effective view matrix for the given
                camera.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.MathUtils.GetProjectionMatrix(System.Windows.Media.Media3D.Camera,System.Double)">
            <summary>
                Computes the effective projection matrix for the given
                camera.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.MathUtils.TryWorldToViewportTransform(System.Windows.Media.Media3D.Viewport3DVisual,System.Boolean@)">
            <summary>
                Computes the transform from world space to the Viewport3DVisual's
                inner 2D space.
            
                This method can fail if Camera.Transform is non-invertable
                in which case the camera clip planes will be coincident and
                nothing will render.  In this case success will be false.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.MathUtils.TryWorldToCameraTransform(System.Windows.Media.Media3D.Viewport3DVisual,System.Boolean@)">
            <summary>
                Computes the transform from world space to camera space
            
                This method can fail if Camera.Transform is non-invertable
                in which case the camera clip planes will be coincident and
                nothing will render.  In this case success will be false.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.MathUtils.GetWorldTransformationMatrix(System.Windows.DependencyObject,System.Windows.Media.Media3D.Viewport3DVisual@)">
            <summary>
            Gets the object space to world space transformation for the given DependencyObject
            </summary>
            <param name="visual">The visual whose world space transform should be found</param>
            <param name="viewport">The Viewport3DVisual the Visual is contained within</param>
            <returns>The world space transformation</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.MathUtils.TryTransformTo2DAncestor(System.Windows.DependencyObject,System.Windows.Media.Media3D.Viewport3DVisual@,System.Boolean@)">
            <summary>
                Computes the transform from the inner space of the given
                Visual3D to the 2D space of the Viewport3DVisual which
                contains it.
            
                The result will contain the transform of the given visual.
            
                This method can fail if Camera.Transform is non-invertable
                in which case the camera clip planes will be coincident and
                nothing will render.  In this case success will be false.
            </summary>
            <param name="visual"></param>
            <param name="viewport"></param>
            <param name="success"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.MathUtils.TryTransformToCameraSpace(System.Windows.DependencyObject,System.Windows.Media.Media3D.Viewport3DVisual@,System.Boolean@)">
            <summary>
                Computes the transform from the inner space of the given
                Visual3D to the camera coordinate space
            
                The result will contain the transform of the given visual.
            
                This method can fail if Camera.Transform is non-invertable
                in which case the camera clip planes will be coincident and
                nothing will render.  In this case success will be false.
            </summary>
            <param name="visual"></param>
            <param name="viewport"></param>
            <param name="success"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.MathUtils.TransformBounds(System.Windows.Media.Media3D.Rect3D,System.Windows.Media.Media3D.Matrix3D)">
            <summary>
                Transforms the axis-aligned bounding box 'bounds' by
                'transform'
            </summary>
            <param name="bounds">The AABB to transform</param>
            <param name="transform"></param>
            <returns>Transformed AABB</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.MathUtils.TryNormalize(System.Windows.Media.Media3D.Vector3D@)">
            <summary>
                Normalizes v if |v| > 0.
            
                This normalization is slightly different from Vector3D.Normalize. Here
                we just divide by the length but Vector3D.Normalize tries to avoid
                overflow when finding the length.
            </summary>
            <param name="v">The vector to normalize</param>
            <returns>'true' if v was normalized</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.MathUtils.GetCenter(System.Windows.Media.Media3D.Rect3D)">
            <summary>
                Computes the center of 'box'
            </summary>
            <param name="box">The Rect3D we want the center of</param>
            <returns>The center point</returns>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Matrix3DStack">
            <summary>
                Matrix3DStack is a stack of Matrix3Ds.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Matrix3DStack.Peek">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Matrix3DStack.Push(System.Windows.Media.Media3D.Matrix3D)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Matrix3DStack.Append(System.Windows.Media.Media3D.Matrix3D)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Matrix3DStack.Prepend(System.Windows.Media.Media3D.Matrix3D)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Matrix3DStack.Pop">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Matrix3DStack.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TemplatedNode">
            <summary>
            The TemplatedNode class represents nodes whose appearance
            is set through Xaml data templates.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TemplatedNode.#ctor">
            <summary>
            Initializes a new instance of the TemplatedNode class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TemplatedNode.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the TemplatedNode class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TemplatedNode.#ctor(MindFusion.Diagramming.Wpf.TemplatedNode)">
            <summary>
            Initializes a new instance of the TemplatedNode class using
            the specified node as a prototype.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TemplatedNode.Draw(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.RenderOptions)">
            <summary>
            Draws the node using the specified DrawingContext object.
            </summary>
            <param name="graphics">
            A DrawingContext object where the node should be rendered.
            </param>
            <param name="options">
            Provides options for the drawing operation.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TemplatedNode.OnAdd">
            <summary>
            DiagramNode.OnAdd override.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TemplatedNode.TemplateProperty">
            <summary>
            Identifies the Template dependency property.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TemplatedNode.MeasureOverride(System.Windows.Size)">
            <summary>
            FrameworkElement.MeasureOverride override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TemplatedNode.ArrangeOverride(System.Windows.Size)">
            <summary>
            FrameworkElement.ArrangeOverride override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TemplatedNode.GetVisualChild(System.Int32)">
            <summary>
            FrameworkElement.GetVisualChild override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TemplatedNode.MindFusion#Diagramming#Wpf#InplaceEditable#GetTextToEdit">
            <summary>
            Node.GetTextToEdit override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TemplatedNode.MindFusion#Diagramming#Wpf#InplaceEditable#SetEditedText(System.String)">
            <summary>
            Node.SetEditedText override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TemplatedNode.MindFusion#Diagramming#Wpf#InplaceEditable#GetEditRect(System.Windows.Point)">
            <summary>
            Node.GetEditRect override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TemplatedNode.Template">
            <summary>
            Gets or sets the DataTemplate used to display this node.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TemplatedNode.VisualChildrenCount">
            <summary>
            FrameworkElement.VisualChildrenCount override.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Shape3DStyle">
            <summary>
            Enumerator defining node shapes
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Shape3DStyle.ROTATIONAL">
            <summary>
            Rotational body
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Shape3DStyle.POLYHEDRA">
            <summary>
            Polyhedra body
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Shape3DStyle.POlYGON">
            <summary>
            2D Polygon
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Shape3DStyle.NON">
            <summary>
            Not Specified
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ArrowHead3DStyle">
            <summary>
            Enumerator defining arrowhead shapes shapes
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ArrowHead3DStyle.CONE">
            <summary>
            Cone shape
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ArrowHead3DStyle.LINE">
            <summary>
            2D Arrow
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ArrowHead3DStyle.NON">
            <summary>
            Not Specified
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DiagramView3D">
            <summary>
            DiagramView3D allows adding a 3D view of the same Diagram instance to an application.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Viewport3DDecorator">
            <summary>
            This class enables a Viewport3D to be enhanced by allowing UIElements to be placed 
            behind and in front of the Viewport3D.  These can then be used for various enhancements.  
            For examples see the Trackball, or InteractiveViewport3D.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Viewport3DDecorator.#ctor">
            <summary>
            Creates the Viewport3DDecorator
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Viewport3DDecorator.BindToContentsWidthHeight(System.Windows.UIElement)">
            <summary>
            Data binds the (Max/Min)Width and (Max/Min)Height properties to the same
            ones as the content.  This will make it so we end up being sized to be
            exactly the same ActualWidth and ActualHeight as waht is below us.
            </summary>
            <param name="newContent">What to bind to</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Viewport3DDecorator.OnViewport3DDecoratorContentChange(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Extenders of Viewport3DDecorator can override this function to be notified
            when the Content property changes
            </summary>
            <param name="oldContent">The old value of the Content property</param>
            <param name="newContent">The new value of the Content property</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Viewport3DDecorator.GetVisualChild(System.Int32)">
            <summary>
            Returns the child at the specified index.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Viewport3DDecorator.MeasureOverride(System.Windows.Size)">
            <summary>
            Updates the DesiredSize of the Viewport3DDecorator
            </summary>
            <param name="constraint">The "upper limit" that the return value should not exceed</param>
            <returns>The desired size of the Viewport3DDecorator</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Viewport3DDecorator.MeasurePreViewportChildren(System.Windows.Size)">
            <summary>
            Measures the size of all the PreViewportChildren.  If special measuring behavior is needed, this
            method should be overridden.
            </summary>
            <param name="constraint">The "upper limit" on the size of an element</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Viewport3DDecorator.MeasurePostViewportChildren(System.Windows.Size)">
            <summary>
            Measures the size of all the PostViewportChildren.  If special measuring behavior is needed, this
            method should be overridden.
            </summary>
            <param name="constraint">The "upper limit" on the size of an element</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Viewport3DDecorator.MeasureUIElementCollection(System.Windows.Controls.UIElementCollection,System.Windows.Size)">
            <summary>
            Measures all of the UIElements in a UIElementCollection
            </summary>
            <param name="collection">The collection to measure</param>
            <param name="constraint">The "upper limit" on the size of an element</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Viewport3DDecorator.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the Pre and Post Viewport children, and arranges itself
            </summary>
            <param name="arrangeSize">The final size to use to arrange itself and its children</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Viewport3DDecorator.ArrangePreViewportChildren(System.Windows.Size)">
            <summary>
            Arranges all the PreViewportChildren.  If special measuring behavior is needed, this
            method should be overridden.
            </summary>
            <param name="arrangeSize">The final size to use to arrange each child</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Viewport3DDecorator.ArrangePostViewportChildren(System.Windows.Size)">
            <summary>
            Arranges all the PostViewportChildren.  If special measuring behavior is needed, this
            method should be overridden.
            </summary>
            <param name="arrangeSize">The final size to use to arrange each child</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Viewport3DDecorator.ArrangeUIElementCollection(System.Windows.Controls.UIElementCollection,System.Windows.Size)">
            <summary>
            Arranges all the UIElements in the passed in UIElementCollection
            </summary>
            <param name="collection">The collection that should be arranged</param>
            <param name="constraint">The final size that element should use to arrange itself and its children</param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Viewport3DDecorator.Content">
            <summary>
            The content/child of the Viewport3DDecorator.  A Viewport3DDecorator only has one
            child and this child must be either another Viewport3DDecorator or a Viewport3D.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Viewport3DDecorator.Viewport3D">
            <summary>
            Property to get the Viewport3D that is being enhanced.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Viewport3DDecorator.PreViewportChildren">
            <summary>
            The UIElements that occur before the Viewport3D
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Viewport3DDecorator.PostViewportChildren">
            <summary>
            The UIElements that occur after the Viewport3D
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Viewport3DDecorator.VisualChildrenCount">
            <summary>
            Returns the number of Visual children this element has.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Viewport3DDecorator.LogicalChildren">
            <summary> 
            Returns an enumertor to this element's logical children
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView3D.#ctor">
            <summary>
            Constructor of DiagramView3D class
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.DiagramView3D.Position3D">
            <summary>
            Specifies the diagram node 3D Location
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView3D.UpdateTransform(System.Boolean)">
            <summary>
            Recalculate transform to keep effective zoom factor equal to ZoomFactor property
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView3D.AddLight(System.Windows.Media.Media3D.Light)">
            <summary>
            Adding Light To the view scene
            </summary>
            <param name="light"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView3D.RemoveLight(System.Windows.Media.Media3D.Light)">
            <summary>
            Remove Light from view scene
            </summary>
            <param name="light"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView3D.ClearLights">
            <summary>
            Clear all lights
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView3D.SwitchCamera">
            <summary>
            Changes camera from PerspectiveCamera to OrthographicCamera and reverse
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView3D.ClearAll">
            <summary>
            Clears all diagram items
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView3D.CreateNode(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new Node3D instance at the specified position with
            the specified size and adds it to the Nodes collection of the
            underlying diagram.
            </summary>
            <param name="x">
            The x-coordinate of the upper-left corner of the new node.
            </param>
            <param name="y">
            The y-coordinate of the upper-left corner of the new node.
            </param>
            <param name="width">
            The width of the new node.
            </param>
            <param name="height">
            The height of the new node.
            </param>
            <returns>
            The newly created ShapeNode instance.
            </returns>
            <remarks>
            The method creates a shape node at the position specified by x and y.
            The size of the node is set by width and height.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView3D.CreateLink(MindFusion.Diagramming.Wpf.Node3D,MindFusion.Diagramming.Wpf.Node3D)">
            <summary>
            Creates a new Link3D instance between the specified nodes
            and adds it to the Links collection of the underlying diagram.
            </summary>
            <param name="origin">
            The origin node.
            </param>
            <param name="destination">
            The destination node.
            </param>
            <returns>
            The newly created DiagramLink instance.
            </returns>
            <remarks>
            The method creates a link connecting the nodes specified by
            origin and destination.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView3D.UpdateView3D">
            <summary>
            Updates Viewer when diagram is not reset, but chanched only 
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView3D.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView3D.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView3D.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView3D.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView3D.ScreenToViewport(System.Windows.Point,System.Windows.Rect,System.Windows.Rect)">
             <summary>
            Transforms point from screen coordinates to viewport coordinates.
             </summary>
             <param name="screenPoint">The point in screen coordinates.</param>
             <param name="visibleRect"></param>
             <param name="screenRect"></param>
             <returns></returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramView3D.Diagram">
            <summary>
            The Diagram instance that could be shared with other views
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramView3D.ZoomFactor">
            <summary>
            Gets or sets the effective zoom factor used to scale up or down the Diagram3D. This property takes into
            consideration the Diagram.ZoomFactor so changing it will not cause visual change
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramView3D.Camera">
            <summary>
            View Camera
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramView3D.ShapeStyle">
            <summary>
            Daiagram nodes shape style
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramView3D.DrawDistance">
            <summary>
            Z palne to draw new items
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramView3D.Nodes">
            <summary>
            All nodes3D
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramView3D.Links">
            <summary>
            All links 3D
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramView3D.CameraPosition">
            <summary>
            Gets or sets the camera position.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Viewport3DConteiner.GetCenter">
            <summary>
            returns actual node center
            </summary>
            <returns></returns>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Node3D">
            <summary>
            Represents a diagram node 3d.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Node3D.#ctor(MindFusion.Diagramming.Wpf.DiagramNode,System.Double)">
            <summary>
             Constructor of the class node3d
            </summary>
            <param name="dNode"></param>
            <param name="zLocation"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Node3D.#ctor(MindFusion.Diagramming.Wpf.DiagramNode,System.Double,System.Windows.Media.Brush)">
            <summary>
            Constructor of the class node3d
            </summary>
            <param name="dNode"></param>
            <param name="zLocation"></param>
            <param name="brush"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Node3D.SetVisual(System.Windows.Media.Media3D.Geometry3D)">
            <summary>
            Sets the node 3D geometry.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Node3D.GetCenter">
            <summary>
            returns actual node center
            </summary>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Node3D.GetBounds">
            <summary>
            returns actual node bounds
            </summary>
            <returns></returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Node3D.AllLinks">
            <summary>
            Gets All links
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Node3D.IncommingLinks">
            <summary>
            Gets a collection of links that point to the node.
            </summary>
            <remarks>
            Use this collection to get access to every link pointing to the node,
            as well as get the number of such links.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Node3D.OutgoingLinks">
            <summary>
            Gets a collection of links that start from this node.
            </summary>
            <remarks>
            Use this collection to get access to every link starting from the node,
            as well as get the number of such links.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Node3D.Style">
            <summary>
            gest or sets node's shapestyle
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Node3D.Node2D">
            <summary>
            gets or sets corresponding 2D diagram node
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Node3D.Location3DZ">
            <summary>
            Gets or sets z node position
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Node3D.Material">
            <summary>
            Gets or sets node material
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Node3D.CenterLocation3D">
            <summary>
            returns node center position
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Node3D.Bounds">
            <summary>
            returns node bounds
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Node3D.Text">
            <summary>
            Text of the node
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Node3D.Radius">
            <summary>
            returns node radii
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Link3D">
            <summary>
            Represents a diagram link 3d.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ScreenSpaceLines3D">
            <summary>
                ScreenSpaceLines3D are a 3D line primitive whose thickness
                is constant in 2D space post projection.
            
                This means that the lines do not become foreshortened as
                they receed from the camera as other 3D primitives do under
                a typical perspective projection.
            
                Example Usage:
            
                &lt;tools:ScreenSpaceLines3D
                    Points="0,0,0 0,1,0 0,1,0 1,1,0 1,1,0 0,0,1"
                    Thickness="5" Color="Red"&gt;
            
                "Screen space" is a bit of a misnomer as the line thickness
                is specified in the 2D coordinate system of the container
                Viewport3D, not the screen.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Link3D.Origin">
            <summary>
            Gets or sets Link's origin
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Link3D.Destination">
            <summary>
            Gets ot sets link's destination
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ArrowHead3D">
            <summary>
            Represents an Arrow Head3D
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ArrowHead3D.#ctor(MindFusion.Diagramming.Wpf.Link3D)">
            <summary>
            Initializes a new instance of the ArrowHead3D class.
            </summary>        
            <param name="link"> </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ArrowHead3D.#ctor(MindFusion.Diagramming.Wpf.Link3D,System.Windows.Media.Color)">
            <summary>
            Initializes a new instance of the ArrowHead3D class.
            </summary>
            <param name="link"></param>
            <param name="_color"></param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArrowHead3D.Style">
            <summary>
            Gets or sets arrow head style
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArrowHead3D.Color">
            <summary>
            Gets ot sets arrow head color
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ZOrderComparer">
            <summary>
            Performs comparison on chart objects according
            to their position in the Z-order.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.SerializeTagEventArgs">
            <summary>
            Contains the arguments passed to the SerializeTag and DeserializeTag
            event handlers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.SerializeTagEventArgs.#ctor(System.Object,System.Object,System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Initializes a new instance of the SerializeTagArgs class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.SerializeTagEventArgs.Object">
            <summary>
            Gets or sets an XmlElement object where the tag should be
            serialized/deserialized.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.SerializeTagEventArgs.Tag">
            <summary>
            Gets or sets the tag object being serialized/deserialized.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.SerializeTagEventArgs.Representation">
            <summary>
            Gets or sets the string representation of the tag object
            being serialized / deserialized.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.SerializeTagEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the event is handled.
            </summary>
            <remarks>
            Always set this flag to true if you perform custom tag serialization.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.SerializeTagEventArgs.Context">
            <summary>
            Gets a context object that can help you write and read
            various values.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.SerializeTagEventHandler">
            <summary>
            Represents methods that will handle the SerializeTag and DeserializeTag
            events of the Diagram class.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A SerializeTagEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.GroupDetachCmd">
            <summary>
            Implements removal of an item from a group.
            </summary>
            <remarks>
            Instances of this class are implicitly created by WpfDiagram
            in response to calls to the Detach methods of the Group class.
            References to those instances are passed to handlers of the
            ActionRecorded, ActionUndone and ActionRedone events.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.GroupDetachCmd.#ctor(MindFusion.Diagramming.Wpf.Group,MindFusion.Diagramming.Wpf.Group.Attachment)">
            <summary>
            Initializes a new instance of the GroupDetachCmd class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.GroupDetachCmd.Execute">
            <summary>
            Executes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.GroupDetachCmd.Execute(System.Boolean)">
            <summary>
            Carries out the command action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.GroupDetachCmd.Undo">
            <summary>
            Undoes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.GroupDetachCmd.Redo">
            <summary>
            Redoes the command action.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.GroupDetachCmd.Group">
            <summary>
            Gets the group associated with the command.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.GroupDetachCmd.Item">
            <summary>
            Gets the item associated with the command.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.GraphicsUnit">
            <summary>
            Specifies units of measure for a given data.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GraphicsUnit.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GraphicsUnit.#ctor(System.Double,System.String)">
            <summary>
            Initializes a new instance of the GraphicsUnit class with
            the specified base resolution.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GraphicsUnit.Convert(System.Double,MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Converts amount from this unit to specified unit.
            </summary>
            <param name="amount"></param>
            <param name="targetUnit"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GraphicsUnit.Convert(System.Windows.Point,MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Convenience method for converting points to specified units
            </summary>
            <param name="p"></param>
            <param name="targetUnit"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GraphicsUnit.Convert(System.Windows.Rect,MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Convenience method for converting Rect to specified units
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GraphicsUnit.FromId(System.Int32,MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Returns a GraphicsUnit from its integer id.
            Parameter diagram is used if the id denotes the current diagram id (GraphicsUnit.World)
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GraphicsUnit.FromId(System.Int32,MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Returns the GraphicsUnit that has the specified id
            </summary>
            <param name="id"></param>
            <param name="measureUnit"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GraphicsUnit.ToString">
            <summary>
            Object.ToString override.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.GraphicsUnit.Millimeter">
            <summary>
            Specifies the millimeter as the unit of measure.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.GraphicsUnit.Inch">
            <summary>
            Specifies the inch as the unit of measure.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.GraphicsUnit.Point">
            <summary>
            Specifies a printer's point (1/72 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.GraphicsUnit.WpfPoint">
            <summary>
            Specifies a device-independent pixel as the unit of measure.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.GraphicsUnit.Pixel">
            <summary>
            Specifies a device pixel as the unit of measure.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.GraphicsUnit.World">
            <summary>
            Specifies the world coordinate system unit as the unit of measure.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.GraphicsUnit.UnitsPerInch">
            <summary>
            Gets the base resolution of this GraphicsUnit object.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.GraphicsUnit.Id">
            <summary>
            The unit id
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.GraphicsUnit.Name">
            <summary>
            The unit Name
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Expander">
            <summary>
            Implements drawing and hit testing for the the expand (+) and 
            collapse (-) icons displayed beside expandable nodes.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Manipulator">
            <summary>
            Base class for flowchart manipulators, which are user interface elements
            attached to a diagram item. The user can perform various manipulations on
            objects through their attached manipulators.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Manipulator.#ctor(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Initializes a new instance of the Manipulator class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Manipulator.Draw(System.Windows.Media.DrawingContext)">
            <summary>
            Renders the manipulator.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Manipulator.AddToRepaintRect(System.Windows.Rect@)">
            <summary>
            Adds the manipulator's repaint area to the
            specified rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Manipulator.HitTest(System.Windows.Point)">
            <summary>
            Tests if the specified point lies within the dedicated
            area and performs the appropriate manipulator action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Manipulator.PtInManipulator(System.Windows.Point)">
            <summary>
            Checks whether the specified point lies within the
            dedicated manipulator are.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Manipulator.SupportClipping">
            <summary>
            Gets a value indicating whether the manipulator
            supports clipping.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Manipulator.Item">
            <summary>
            Gets or sets the item this manipulator
            is attached to.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Expander.#ctor(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Initializes a new instance of the Expander class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Expander.Draw(System.Windows.Media.DrawingContext)">
            <summary>
            Manipulator.Draw override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Expander.AddToRepaintRect(System.Windows.Rect@)">
            <summary>
            Manipulator.AddToRepaintRect override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Expander.GetIconPos(System.Windows.Rect)">
            <summary>
            Gets the expander position relative to the specified
            node's bounding rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Expander.GetIconRect(System.Windows.Rect)">
            <summary>
            Gets the expander bounding rectangle relative
            to the specified node's bounding rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Expander.HitTest(System.Windows.Point)">
            <summary>
            Determines whether the +/- button is clicked and expands or
            collapses the tree branch that starts from the node if so.
            </summary>
            <param name="point">
            The document coordinates of the mouse pointer.
            </param>
            <returns>
            true if the expand/collapse button has been clicked.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Expander.PtInManipulator(System.Windows.Point)">
            <summary>
            Manipulator.PtInManipulator override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Expander.GetBounds">
            <summary>
            Get the expander bounds relative to the item this
            expander is attached to.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Expander.SupportClipping">
            <summary>
            Manipulator.SupportClipping override.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.GetManipulatorRect">
            <summary>
            Returns the manipulator position for a given node.
            </summary>
            <param name="node">A DiagramNode instance.</param>
            <returns>A Rect instance.</returns>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Behaviors.DrawContainersBehavior">
            <summary>
            This class is used when the diagram behavior is set to Behavior.DrawContainers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.DrawContainersBehavior.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the DrawContainersBehavior class.
            </summary>
            <param name="diagram">
            The Diagram this behavior will be associated with.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.DrawContainersBehavior.CreateNode">
            <summary>
            DrawNodesBehavior.CreateNode override.
            </summary>
            <returns>
            An instance of the DiagramNode class.
            </returns>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.CommandList">
            <summary>
            Represents a read-only collection of Command objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CommandList.#ctor(MindFusion.Diagramming.Wpf.Commands.CommandCollection)">
            <summary>
            Initializes a new instance of the CommandList class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CommandList.IndexOf(MindFusion.Diagramming.Wpf.Commands.Command)">
            <summary>
            Returns the zero-based index of the specfied command
            within the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CommandList.Contains(MindFusion.Diagramming.Wpf.Commands.Command)">
            <summary>
            Determines whether the specified command is contained
            within the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CommandList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies a range of commands from the current collection
            to the specified array, starting at the specified index
            of the target array.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.CommandList.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.CommandList.Item(System.Int32)">
            <summary>
            Gets the command at the specified index.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.CommandList.Count">
            <summary>
            Gets the number of commands contained within the collection.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.CommandList.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to
            the collection.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.CommandList.IsSynchronized">
            <summary>
            Gets a value indicating whether the access to the collection
            is synchronized.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.SwimlaneLayoutTraits">
            <summary>
            Indicates item traits specific to swimlane layouts. Members of this enumeration
            can be used as keys in the DiagramItem.LayoutTraits hashtable.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SwimlaneLayoutTraits.Lane">
            <summary>
            Specifies the lane to which a node should be assigned.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.SwimlaneLayoutInfo">
            <summary>
            Contains settings for the SwimlaneLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.SwimlaneLayoutInfo.#ctor">
            <summary>
            Initializes a new instance of the SwimlaneLayoutInfo class.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SwimlaneLayoutInfo.Orientation">
            <summary>
            Gets or sets the overall orientation of the arranged diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SwimlaneLayoutInfo.Direction">
            <summary>
            Gets or sets the direction of the arranged diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SwimlaneLayoutInfo.SwimlaneGrid">
            <summary>
            Gets or sets the object through which the swimlane grid can be manipulated by the layout.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SwimlaneLayoutInfo.Margins">
            <summary>
            Gets or sets the distance between the top-left corner
            of the smallest rectangle containing the arranged diagram
            and the top-left point of the document bounds.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SwimlaneLayoutInfo.LaneDistance">
            <summary>
            Gets or sets the spacing between adjacent lanes in the final layout.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SwimlaneLayoutInfo.NodeDistance">
            <summary>
            Gets or sets the spacing between adjacent nodes within a lane in the final layout.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SwimlaneLayoutInfo.CollapseEmptyLanes">
            <summary>
            Get or sets a value indicating whether lanes without associated nodes will
            shrink to zero size. By default, empty lanes will have size equal to LaneDistance.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SwimlaneLayoutInfo.CompactNodes">
            <summary>
            Gets or sets a value indicating whether the nodes within individual lanes are compacted.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SwimlaneLayoutInfo.KeepLaneSizes">
            <summary>
            Gets or sets a value indicating whether the layout will attempt to preserve the
            original sizes of the lanes in the supplied grid.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.SwimlaneLayout">
            <summary>
            Performs layered layout on a graph.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.SwimlaneLayout.#ctor">
            <summary>
            Initializes a new instance of the SwimlaneLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.SwimlaneLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.IGraphBuilder,MindFusion.Layout.SwimlaneLayoutInfo)">
            <summary>
            Applies the layout to the specified graph using the specified settings.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.SwimlaneLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.IGraphBuilder,MindFusion.Layout.SwimlaneLayoutInfo,MindFusion.Layout.LayoutProgress)">
            <summary>
            Applies the layout to the specified graph using the specified settings
            and progress callback delegate.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.LayerDistributor">
            <summary>
            Distributes nodes across layers.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayerDistributor.Distribute(MindFusion.Layout.Graph,System.Collections.Generic.Dictionary{MindFusion.Layout.GraphNode,System.Int32},System.Int32@)">
            <summary>
            Distributes the nodes in the specified graph across layers.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LayerDistributor.BuildGraph(MindFusion.Layout.Graph,System.Collections.Generic.Dictionary{MindFusion.Graphs.Vertex,MindFusion.Layout.GraphNode},System.Collections.Generic.Dictionary{MindFusion.Graphs.Edge,MindFusion.Layout.GraphLink})">
            <summary>
            Creates a GraphLib.Graph object out of the specified Graph object.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.XmlPersistContext">
            <summary>
            Contains methods that can help you serialize and deserialize
            WpfDiagram items to end from XML documents.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.#ctor(MindFusion.Diagramming.Wpf.Diagram,System.Xml.XmlDocument)">
            <summary>
            Initializes a new instance of the XmlPersistContext class.
            </summary>
            <param name="diagram">
            The Diagram this class will operate on.
            </param>
            <param name="document">
            The .NET XmlDocument to serialize/deserialize to/from.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.SaveItemToXml(MindFusion.Diagramming.Wpf.DiagramItem,System.Xml.XmlElement,System.String)">
            <summary>
            Saves the specified diagram item to the underlying
            document under the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.AddChildElement(System.String,System.Xml.XmlElement)">
            <summary>
            Adds a new child node with the specified name to
            the specified parent node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.AddChildElement(System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Adds a new child node with the specified name and
            value to the specified parent node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteString(System.String,System.String,System.Xml.XmlElement)">
            <summary>
            Writes a string value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteBool(System.Boolean,System.String,System.Xml.XmlElement)">
            <summary>
            Writes a boolean value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteChar(System.Char,System.String,System.Xml.XmlElement)">
            <summary>
            Write a char value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteDecimal(System.Decimal,System.String,System.Xml.XmlElement)">
            <summary>
            Write a decimal value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteByte(System.Byte,System.String,System.Xml.XmlElement)">
            <summary>
            Write a byte value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteSByte(System.SByte,System.String,System.Xml.XmlElement)">
            <summary>
            Write a 8-bit signed integer value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteInt(System.Int32,System.String,System.Xml.XmlElement)">
            <summary>
            Writes an integer value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteShort(System.Int16,System.String,System.Xml.XmlElement)">
            <summary>
            Writes a short value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteLong(System.Int64,System.String,System.Xml.XmlElement)">
            <summary>
            Writes a long value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteUInt(System.UInt32,System.String,System.Xml.XmlElement)">
            <summary>
            Writes an unsigned integer value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteUShort(System.UInt16,System.String,System.Xml.XmlElement)">
            <summary>
            Writes an unsigned short value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteULong(System.UInt64,System.String,System.Xml.XmlElement)">
            <summary>
            Writes an unsigned long value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteFloat(System.Double,System.String,System.Xml.XmlElement)">
            <summary>
            Writes a float value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteDouble(System.Double,System.String,System.Xml.XmlElement)">
            <summary>
            Writes a double value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteSizeF(System.Windows.Size,System.String,System.Xml.XmlElement)">
            <summary>
            Writes a Size with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteRectangleF(System.Windows.Rect,System.String,System.Xml.XmlElement)">
            <summary>
            Writes a Rect with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteThickness(System.Windows.Thickness,System.String,System.Xml.XmlElement)">
            <summary>
            Writes a Thickness with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WritePointF(System.Windows.Point,System.String,System.Xml.XmlElement)">
            <summary>
            Writes a Point with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.FromPointF(System.Windows.Point)">
            <summary>
            Converts the specified Point object to a string.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteAnchorPattern(MindFusion.Diagramming.Wpf.AnchorPattern,System.String,System.Xml.XmlElement)">
            <summary>
            Writes the specified anchor pattern.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteNodeConstraints(MindFusion.Diagramming.Wpf.NodeConstraints,System.String,System.Xml.XmlElement)">
            <summary>
            Writes the specified NodeConstraints object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteShape(MindFusion.Diagramming.Wpf.Shape,System.String,System.Xml.XmlElement)">
            <summary>
            Writes the specified shape with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteItemReference(MindFusion.Diagramming.Wpf.DiagramItem,System.String,System.Xml.XmlElement)">
            <summary>
            Writes a reference to the specified item with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WritePointCollection(MindFusion.Diagramming.Wpf.PointCollection,System.String,System.Xml.XmlElement)">
            <summary>
            Writes the specified point collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteBrush(System.Windows.Media.Brush,System.String,System.Xml.XmlElement)">
            <summary>
            Writes a reference to the specified brush. The brush
            is registered within the internal hashtable for
            subsequent serialization.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteBrushes(System.Xml.XmlElement)">
            <summary>
            Writes all currently accumulated brushes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteFloatArray(System.Double[],System.String,System.String,System.Xml.XmlElement)">
            <summary>
            Writes the specified array.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteColorArray(System.Windows.Media.Color[],System.String,System.String,System.Xml.XmlElement)">
            <summary>
            Writes the specified array.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WritePen(System.Windows.Media.Pen,System.String,System.Xml.XmlElement)">
            <summary>
            Writes the specified pen.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteFont(MindFusion.Diagramming.Wpf.Font,System.String,System.Xml.XmlElement)">
            <summary>
            Writes the specified font.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteEnum(System.Object,System.String,System.Xml.XmlElement)">
            <summary>
            Writes the specified enum value.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteStream(System.IO.Stream,System.String,System.Xml.XmlElement)">
            <summary>
            Writes the specified stream.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteImage(System.Windows.Media.ImageSource,System.String,System.Xml.XmlElement)">
            <summary>
            Writes a reference to the specified image. The image
            is registered within the internal hashtable for
            subsequent serialization.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteImages(System.Xml.XmlElement)">
            <summary>
            Writes all currently accumulated images.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteColor(System.Windows.Media.Color,System.String,System.Xml.XmlElement)">
            <summary>
            Writes the specified color.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteColor(System.Windows.Media.Brush,System.String,System.Xml.XmlElement)">
            <summary>
            WPF uses Brushes in many places instead of colors
            For compatability with older versions save the brush as color if possible
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteStringFormat(MindFusion.Diagramming.Wpf.StringFormat,System.String,System.Xml.XmlElement)">
            <summary>
            Writes the specified StringFormat object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteGroup(MindFusion.Diagramming.Wpf.Group,System.String,System.Xml.XmlElement)">
            <summary>
            Writes the specified group object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteTraits(System.Collections.Hashtable,System.String,System.Xml.XmlElement)">
            <summary>
            Writes the specified traits hashtable.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteHashtable(System.Collections.Hashtable,System.String,System.Xml.XmlElement)">
            <summary>
            Writes the specified hashtable.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteObject(System.Object,System.String,System.Xml.XmlElement)">
            <summary>
            Writes the specified object under the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteTag(System.Object,System.Object,System.String,System.Xml.XmlElement)">
            <summary>
            Writes the specified tag of the specified object.
            </summary>
            <remarks>
            Tags are written similarly to arbitrary objects except
            that the client of the diagram is given a chance
            to perform custom serialization through event handling.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.InstantiateItem(System.String)">
            <summary>
            Instantiates an item with the specified class id.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.LoadItemFromXml(System.Xml.XmlElement)">
            <summary>
            Reads a diagram item from the specified node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadString(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a string value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadString(System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Reads a string value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadBool(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a boolean value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadBool(System.String,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Reads a boolean value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadDecimal(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a decimal value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadByte(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a byte value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadSByte(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a 8-bit signed integer value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadChar(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a char value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadInt(System.String,System.Xml.XmlElement)">
            <summary>
            Reads an integer value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadInt(System.String,System.Xml.XmlElement,System.Int32)">
            <summary>
            Reads an integer value with the specified name.
            </summary>
            <param name="elementName">
            The name of the element containing the integer value.
            </param>
            <param name="parentElement">
            The parent element of the node with the specified name.
            </param>
            <param name="defaultValue">
            The value returned if the specified element is not found.
            </param>
            <value>
            An integer value. Returns defaultValue if there is no element with the specified name under 
            the specified parent.
            </value>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadShort(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a short value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadLong(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a long value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadUInt(System.String,System.Xml.XmlElement)">
            <summary>
            Reads an unsigned integer value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadUShort(System.String,System.Xml.XmlElement)">
            <summary>
            Reads an unsigned short value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadULong(System.String,System.Xml.XmlElement)">
            <summary>
            Reads an unsigned  long value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadFloat(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a double value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadFloat(System.String,System.Xml.XmlElement,System.Single)">
            <summary>
            Reads a double value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadDouble(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a double value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadSizeF(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a Size object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadRectangleF(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a Rect object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadThickness(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a Thickness object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadPointF(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a Point object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadPointF(System.Xml.XmlElement)">
            <summary>
            Reads a PointF object from the specified element.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ToPointF(System.String)">
            <summary>
            Converts the specified string to a Point object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadAnchorPattern(System.String,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Reads an AnchorPattern with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadNodeConstraints(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a NodeConstraints object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadShape(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a Shape object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadShape(System.String,System.Xml.XmlElement,MindFusion.Diagramming.Wpf.Shape)">
            <summary>
            Reads a Shape object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadItemReference(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a reference to the item with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadItemReference(System.Xml.XmlElement)">
            <summary>
            Reads an item reference from the specified element.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadPointCollection(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a PointCollection object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadBrush(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a Brush object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadBrushes(System.Xml.XmlElement)">
            <summary>
            Reads all brushes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadFloatArray(System.String,System.String,System.Xml.XmlElement)">
            <summary>
            Reads a double array with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadColorArray(System.String,System.String,System.Xml.XmlElement)">
            <summary>
            Reads a color array with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadPen(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a Pen object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadFont(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a Font object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadEnum(System.String,System.Xml.XmlElement)">
            <summary>
            Reads an enum value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadEnum(System.String,System.Xml.XmlElement,System.Object)">
            <summary>
            Reads an enum value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadStream(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a stream with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadImage(System.String,System.Xml.XmlElement)">
            <summary>
            Reads an Image object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadImages(System.Xml.XmlElement)">
            <summary>
            Reads all images.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadColor(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a color with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadStringFormat(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a StringFormat object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadGroup(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a group object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadHashtable(System.String,System.Xml.XmlElement)">
            <summary>
            Reads a hash table object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.GetType(System.String)">
            <summary>
            Gets the type with the specified name from the executing assembly.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadObject(System.String,System.Xml.XmlElement)">
            <summary>
            Reads an object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadTag(System.Object,System.String,System.Xml.XmlElement)">
            <summary>
            Reads the specified tag for the specified object.
            </summary>
            <remarks>
            Tags are read similarly to arbitrary objects except
            that the client of the diagram is given a chance
            to perform custom deserialization through event handling.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ReadXaml(System.String,System.Xml.XmlElement)">
            <summary>
            Loads an object from its XAML representation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.WriteXaml(System.Object,System.String,System.Xml.XmlElement)">
            <summary>
            Serializes an object to XAML.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.FixZOrder">
            <summary>
            Invoke after the diagram has been deserialed, to
            fix the item's zorder.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.ToRelativePath(System.String)">
            <summary>
            Converts the specified absolute path to a path relative to the BaseURI.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.SplitPath(System.String)">
            <summary>
            Splits the specified path to the individual directories contained in it.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.SelectNodes(System.Xml.XmlElement,System.String)">
            <summary>
            Returns the child nodes with the specified name.
            </summary>
            <param name="parentElement">The parent XML element.</param>
            <param name="name">A string specifying the name of the child nodes.</param>
            <returns>An XmlNodeList containing the found child nodes.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.SelectNode(System.Xml.XmlElement,System.String)">
            <summary>
            Returns the child node with the specified name.
            </summary>
            <param name="parentElement">The parent XML element.</param>
            <param name="name">A string specifying the name of the child node.</param>
            <returns>An XmlElement corresponding to the child node.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlPersistContext.FromRelativePath(System.String)">
            <summary>
            Converts the specified path from relative to the BaseURI to an
            absolute path.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.XmlPersistContext.diagram">
            <summary>
            The associated diagram.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.XmlPersistContext.document">
            <summary>
            The underlying document.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.XmlPersistContext.factory">
            <summary>
            The underlying item factory.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.XmlPersistContext.brushes">
            <summary>
            A map of all diagram brushes.
            </summary>
            <remarks>
            During serialization, this map will contain all
            serialized brushes, mapped to their indices.
            During deserialization, the brushes are loaded
            from the appropriate section in the Xml file,
            the first time they are accessed.
            This list is of type (Brush, int) when serializing
            and of type (int, Brush) when deserializing.
            </remarks>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.XmlPersistContext.images">
            <summary>
            A map of all diagram images.
            </summary>
            <remarks>
            During serialization, this map will contain all
            serialized images, mapped to their indices.
            During deserialization, the images are loaded
            from the appropriate section in the Xml file,
            the first time they are accessed.
            This list is of type (Image, int) when serializing
            and of type (int, Image) when deserializing.
            </remarks>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.XmlPersistContext.formatter">
            <summary>
            A binary formatter used when serializing arbitrary objects.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.XmlPersistContext.items">
            <summary>
            Contains loaded items during deserialization, mapped to
            their ids (z-indices).
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.XmlPersistContext.classVersion">
            <summary>
            The class version of the item currently being deserialized.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.XmlPersistContext.baseURI">
            <summary>
            The base URI of the XML document being loaded or saved.
            When not specified, the BaseURI of the underlying XmlDocument is used.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.XmlPersistContext.Diagram">
            <summary>
            Gets the underlying diagram object.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.XmlPersistContext.XmlDocument">
            <summary>
            Gets the underlying XML document.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.XmlPersistContext.ClassVersion">
            <summary>
            Gets the class version of the currently deserialized item.
            </summary>
            <remarks>
            This property is only useful when deserializing items.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.XmlPersistContext.BaseURI">
            <summary>
            Gets or sets the base URI of the XML document being loaded or saved.
            When not specified, the BaseURI of the underlying XmlDocument is used.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DeserializationHack">
            <summary>
            .NET 1.1 framework cannot load .NET 1.0 serialized classes,
            and vice versa; which is kind of stupid for classes such as
            Size and Rectangle; so we just try to find any needed type
            in loaded assemblies here.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TableNodeProperties">
            <summary>
            Stores the values of TableNode properties during undo / redo operations.
            If you need to implement undo support for the additional properties defined by
            a class derived from TableNode, do so by deriving from TableNodeProperties
            and overriding the TableNode.SaveProperties, TableNode.RestoreProperties,
            and TableNode.CreateProperties methods.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNodeProperties.#ctor">
            <summary>
            Initializes a new instance of the TableNodeProperties class.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.RoutingGrid">
            <summary>
            Manages allocation of routing grid arrays.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.RoutingGrid.GetCostGrid">
            <summary>
            Returns the grid of costs assigned to diagram locations.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.RoutingGrid.GetClosedGrid">
            <summary>
            Returns the grid of closed path nodes.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.RoutingGrid.GetOpenGrid">
            <summary>
            Returns the grid of open path nodes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoutingGrid.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the RoutingGrid class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoutingGrid.Allocate(System.Int32,System.Int32,System.Windows.Rect,MindFusion.Diagramming.Wpf.DiagramLink,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Allocates larger grid arrays if necessary.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoutingGrid.MarkObstacles(System.Windows.Rect,MindFusion.Diagramming.Wpf.DiagramLink,System.Int32,System.Int32,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Mark obstacles and costs in the routing grid.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoutingGrid.GetCostGrid">
            <summary>
            Returns the grid of costs assigned to diagram locations.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoutingGrid.GetClosedGrid">
            <summary>
            Returns the grid of closed path nodes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoutingGrid.GetOpenGrid">
            <summary>
            Returns the grid of open path nodes.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.RemoveGroupCmd">
            <summary>
            Implements destruction of groups.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RemoveGroupCmd.#ctor(MindFusion.Diagramming.Wpf.DiagramItem,MindFusion.Diagramming.Wpf.Group)">
            <summary>
            Initializes a new instance of the RemoveGroupCmd class.
            </summary>
            <remarks>
            Instances of this class are implicitly created by WpfDiagram
            in response to calls to the DestroyGroup method. References to
            those instances are passed to handlers of the ActionRecorded,
            ActionUndone and ActionRedone events.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RemoveGroupCmd.Execute">
            <summary>
            Executes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RemoveGroupCmd.Execute(System.Boolean)">
            <summary>
            Carries out the command action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RemoveGroupCmd.Undo">
            <summary>
            Undoes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RemoveGroupCmd.Redo">
            <summary>
            Redoes the command action.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.RemoveGroupCmd.Group">
            <summary>
            Gets a reference to the removed Group object.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.RemoveGroupCmd.Item">
            <summary>
            Gets a reference to the main item of the group.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.NodeConstraints">
            <summary>
            Defines specific constraints that can be applied to the size
            and location of nodes.
            </summary>
            <remarks>
            Instances of this class can be assigned to the Constraints property of nodes.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.NodeConstraints.#ctor">
            <summary>
            Initializes a new instance of the NodeConstraints class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.NodeConstraints.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
            <returns>
            An Object instance that is a copy of the current NodeConstraints instance.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.NodeConstraints.IsNodeConstrained">
            <summary>
            Check whether there is at least one constraint specified.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.NodeConstraints.MoveDirection">
            <summary>
            Gets or sets constraints on movement direction.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.NodeConstraints.MinWidth">
            <summary>
            Gets or sets the minimal node width allowed.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.NodeConstraints.MinHeight">
            <summary>
            Gets or sets the minimal node height allowed.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.NodeConstraints.MaxWidth">
            <summary>
            Gets or sets the maximal node width allowed.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.NodeConstraints.MaxHeight">
            <summary>
            Gets or sets the maximal node height allowed.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.NodeConstraints.KeepInsideParent">
            <summary>
            Gets or sets a value indicating whether a node should always stay
            in the boundaries of its group master node.
            </summary>
            <remarks>
            This property lets you restrict nodes attached to another node
            via the AttachTo method so that users cannot move the attached
            nodes out of the bounds of their parent.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.NodeConstraints.KeepRatio">
            <summary>
            Gets or sets a value indicating whether the initial width/height
            ratio of a node should be preserved.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.NodeConstraints.DisableMirroring">
            <summary>
            Gets or sets a value indicating whether the user can drag a side of the node
            past its opposite side, so that they switch positions.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.NodeConstraints.Count">
            <summary>
            Returns the current number of constraints.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.LineTemplate">
            <summary>
            Represents a line segment in a shape definition.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LineTemplate.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the LineTemplate class with
            the specified start and end point.
            </summary>
            <param name="x1">
            The x-coordinate of the first point, expressed in percents
            of a shape node's bounding rectangle.
            </param>
            <param name="y1">
            The y-coordinate of the first point, expressed in percents
            of a shape node's bounding rectangle.
            </param>
            <param name="x2">
            The x-coordinate of the second point, expressed in percents
            of a shape node's bounding rectangle.
            </param>
            <param name="y2">
            The y-coordinate of the second point, expressed in percents
            of a shape node's bounding rectangle.
            </param>
            <remarks>
            A line template is defined by two points whose coordinates
            are passed as arguments.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LineTemplate.#ctor(System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,System.Windows.Media.DashStyle,System.Double)">
            <summary>
            Initializes a new instance of the LineTemplate class with the
            specified start and end points, and the specified color and style.
            </summary>
            <param name="x1">
            The x-coordinate of the first point, expressed in percents of
            a shape node's bounding rectangle.
            </param>
            <param name="y1">
            The y-coordinate of the first point, expressed in percents of
            a shape node's bounding rectangle.
            </param>
            <param name="x2">
            The x-coordinate of the second point, expressed in percents of
            a shape node's bounding rectangle.
            </param>
            <param name="y2">
            The y-coordinate of the second point, expressed in percents of
            a shape node's bounding rectangle.
            </param>
            <param name="color">
            The color of this segment.
            </param>
            <param name="dashStyle">
            The dash style of this segment.
            </param>
            <param name="width">
            The width of this segment.
            </param>
            <remarks>
            A line template is defined by two points whose coordinates are
            passed as arguments.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LineTemplate.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            ElementTemplate.SaveToXml override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LineTemplate.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            ElementTemplate.LoadFromXml override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LineTemplate.Clone">
            <summary>
            Create an exact copy of this LineTemplate element.
            </summary>
            <remarks>
            An instance of the LineTemplate class.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LineTemplate.InitData(System.Windows.Rect,System.Double)">
            <summary>
            ElementTemplate.InitData override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LineTemplate.UpdateData(System.Windows.Rect,System.Double[],System.Double)">
            <summary>
            ElementTemplate.UpdateData override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LineTemplate.UpdatePath(System.Windows.Media.PathFigure,System.Double[])">
            <summary>
            ElementTemplate.UpdatePath override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LineTemplate.OutsideBounds">
            <summary>
            ElementTemplate.OutsideBounds.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LineTemplate.HitTest(System.Windows.Point,System.Double[],System.Double)">
            <summary>
            Determines whether a point lies near this line segment.
            </summary>
            <param name="point">A Point value specifying the point location, assuming the shape rotation angle is zero.</param>
            <param name="data">An array that contains the coordinates corresponding to the line template points.</param>
            <param name="maxDist">A threshold value allowing hitting the line from a point that does not lie exactly on it.</param>
            <returns>true if the point is on or near to this line segment.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LineTemplate.SameAs(MindFusion.Diagramming.Wpf.ElementTemplate)">
            <summary>
            ElementTemplate.SameAs override.
            </summary>
            <param name="obj">
            The ElementTemplate to compare to this template.
            </param>
            <returns>
            true if the specified object is a LineTemplate closely
            approximating this template; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LineTemplate.Draw(System.Windows.Media.DrawingContext,System.Windows.Media.Pen)">
            <summary>
            ElementTemplate.Draw override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.LineTemplate.Coordinates">
            <summary>
            Gets a double array containing the coordinates of the
            end points of this line segment.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.LineTemplate.XmlName">
            <summary>
            ElementTemplate.XmlName override.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Group">
            <summary>
            Represents a group of items in the diagram document.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the Group class with the
            specified Diagram as parent.
            </summary>
            <param name="parent">
            The Diagram the new group will belong to.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.#ctor(MindFusion.Diagramming.Wpf.Group)">
            <summary>
            Initializes a new instance of the Group class using the
            specified group as a prototype.
            </summary>
            <param name="prototype">
            The group to use as a prototype.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.AttachToLinkPoint(MindFusion.Diagramming.Wpf.DiagramNode,System.Int32)">
            <summary>
            Attaches a node to the specified control point of the link that is MainItem.
            </summary>
            <param name="node">
            The DiagramNode to be attached.
            </param>
            <param name="point">
            The link point to which the node should be attached.
            </param>
            <returns>
            false if the node could not be attached; otherwise, true.
            </returns>
            <remarks>
            You can use this method when the main item of the group is a link.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.AttachToLinkSegment(MindFusion.Diagramming.Wpf.DiagramNode,System.Int32)">
            <summary>
            Attaches a node to the specified segment of the link that is MainItem.
            </summary>
            <param name="node">
            The DiagramNode to be attached.
            </param>
            <param name="segment">
            The link segment to which the node should be attached.
            </param>
            <returns>
            false if the node could not be attached; otherwise, true.
            </returns>
            <remarks>
            Call this method when the main item of the group is a link.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.AttachToLongestHSegment(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Adds an item to the group, maintaining its relative position
            to the longest horizontal segment of the master link.
            </summary>
            <param name="node">
            The object to attach to the current group.
            </param>
            <returns>
            false if the node could not be attached; otherwise, true.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.AttachToCorner(MindFusion.Diagramming.Wpf.DiagramNode,System.Int32)">
            <summary>
            Attaches a node to the specified corner of the main node.
            </summary>
            <param name="node">
            The DiagramNode to be attached.
            </param>
            <param name="corner">
            The zero-based index of the main node's corner.
            </param>
            <returns>
            false if the node could not be attached; otherwise, true.
            </returns>
            <remarks>
            You can use this method if the main item of the group is a node.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.AttachToSideMiddle(MindFusion.Diagramming.Wpf.DiagramNode,System.Int32)">
            <summary>
            Adds an item to the group, attaching it to the middle point
            of a side of the master node.
            </summary>
            <param name="node">
            The object to attach to the current group.
            </param>
            <param name="side">
            The corner to attach to.
            </param>
            <returns>
            false if the node could not be attached; otherwise, true.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.AttachToEdges(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.GroupAnchorStyles)">
            <summary>
            Anchors a node to the specified edges of the master node.
            </summary>
            <param name="node">
            The DiagramNode to be attached.
            </param>
            <param name="anchorStyles">
            A member of the GroupAnchorStyles enumeration.
            </param>
            <returns>
            false if the node could not be attached; otherwise, true.
            </returns>
            <remarks>
            This method can be used only if the master item in the group is a node.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.AttachProportional(MindFusion.Diagramming.Wpf.DiagramNode,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Attaches a new node to the group, in such a way that its area
            is always occupying certain percentage of the main item's area.
            </summary>
            <param name="node">
            The DiagramNode to be attached.
            </param>
            <param name="left">
            The left side of the node's bounding rectangle, expressed as
            percent of the main node width.
            </param>
            <param name="top">
            The top side of the node's bounding rectangle, expressed as
            percent of the main node height.
            </param>
            <param name="right">
            The right side of the node's bounding rectangle, expressed as
            percent of the main node width.
            </param>
            <param name="bottom">
            The bottom side of the node's bounding rectangle, expressed as
            percent of the main node height.
            </param>
            <returns>
            false if the node could not be attached; otherwise, true.
            </returns>
            <remarks>
            You can use this method when the main item of the group is a node.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.Detach(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Detaches the specified item from this group.
            </summary>
            <param name="item">
            The DiagramItem to be detached.
            </param>
            <returns>
            false if the item could not be detached; otherwise, true.
            </returns>
            <remarks>
            Call this method to remove a item from this group. Note that
            this method does not delete the item, but just detaches it.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.OnDelete">
            <summary>
            Invoked  when the group is destroyed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.OnItemDeleted(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Called on the group when the specified object is deleted.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.OnSplitLink(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Invoked whenever the arrow is splitted.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.OnSegmentsChanged">
            <summary>
            Invoked whenever the arrow's segment count changes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.OnRestoreState">
            <summary>
            Invoked by the main object when its state is
            restored due to undo/redo.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.OnChildModified(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.AdjustmentHandles)">
            <summary>
            Called when a child node has been modified.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.SetMainItem(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Sets the main object of this group
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.UpdateObjects(MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Updates the objects attached in this group according
            to the specified interaction state.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.UpdateObjects(MindFusion.Diagramming.Wpf.InteractionState,System.Boolean)">
            <summary>
            Updates the objects attached in this group according
            to the specified interaction state.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.UpdateToCornerAttachment(MindFusion.Diagramming.Wpf.Group.Attachment,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Updates the subordinate object identified by the
            specified attachment.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.UpdateSideMiddleAttachment(MindFusion.Diagramming.Wpf.Group.Attachment,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Updates the subordinate object identified by the
            specified attachment.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.UpdatePropAttachment(MindFusion.Diagramming.Wpf.Group.Attachment)">
            <summary>
            Updates the subordinate object identified by the
            specified attachment.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.UpdateToPointAttachment(MindFusion.Diagramming.Wpf.Group.Attachment)">
            <summary>
            Updates the subordinate object identified by the
            specified attachment.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.UpdateToSegmentAttachment(MindFusion.Diagramming.Wpf.Group.Attachment)">
            <summary>
            Updates the subordinate object identified by the
            specified attachment.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.UpdateLongestSegmAttachment(MindFusion.Diagramming.Wpf.Group.Attachment)">
            <summary>
            Updates the subordinate object identified by the
            specified attachment.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.UpdateAnchorAttachment(MindFusion.Diagramming.Wpf.Group.Attachment)">
            <summary>
            Updates the subordinate object identified by the
            specified attachment.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.BeginModification(MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Begins a modification on this group by calling
            StartModify on all subordinate objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.BeginModification(MindFusion.Diagramming.Wpf.InteractionState,System.Boolean)">
            <summary>
            Begins a modification on this group by calling
            StartModify on all subordinate objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.EndModification">
            <summary>
            Ends the modification of this group by calling
            CompleteModify on all subordinate objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.EndModification(System.Boolean)">
            <summary>
            Ends the modification of this group by calling
            CompleteModify on all subordinate objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.CancelModification(MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Cancels the modification of this group by calling
            CancelModify on all subordinate objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.GetLinksToMove(MindFusion.Diagramming.Wpf.InteractionState,System.Boolean,System.Predicate{MindFusion.Diagramming.Wpf.Group.Attachment})">
            <summary>
            Gets the collection of arrows that should be
            translated when the group's is modified.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.MustTranslateLink(MindFusion.Diagramming.Wpf.DiagramLink,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Checks whether the specified link should be
            translated when the group is updated.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.ItemAttachable(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Checks whether the specified object can be attached to this group.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.GetRepaintRect">
            <summary>
            Gets a rectangle containing the repaint rectangle of
            the group's master and all attached objects.
            </summary>
            <returns>
            A .NET Rect instance that represents the smallest
            rectangle containing all diagram items related directly
            or indirectly to this group.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.GetContainmentBounds">
            <summary>
            Gets the group bounding rectangle that should be added to the bounds
            of a container when the main item is dropped into the container.
            </summary>
            <returns>A Rectangle object that specifies the group bounds.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.GetContainmentBounds(MindFusion.Diagramming.Wpf.GroupCollection)">
            <summary>
            Gets the group bounding rectangle that should be added to the bounds
            of a container when the main item is dropped into the container.
            </summary>
            <param name="visited">Contains the groups already visited by this method.</param>
            <returns>A Rectangle object that specifies the group bounds.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.GetContainmentItems">
            <summary>
            Gets the items that should be affected when a container is folded or unfolded.
            </summary>
            <returns>A DiagramItemCollection object containing the found items.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.GetContainmentItems(MindFusion.Diagramming.Wpf.DiagramItemCollection,MindFusion.Diagramming.Wpf.GroupCollection)">
            <summary>
            Gets the nodes that should be affected when a container is folded or unfolded.
            </summary>
            <param name="items">The found items are aggregated here.</param>
            <param name="visited">Contains the groups already visited by this method.</param>
            <returns>A DiagramItemCollection object containing the found items.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.Repaint">
            <summary>
            Repaints all underlying diagram items.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.DestroySelf(System.Boolean)">
            <summary>
            Destroys the group.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.VisitHierarchy(MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor)">
            <summary>
            Visits the diagramming hierarchy starting from this
            group's subordinates objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.VisitAttachedItems(MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor)">
            <summary>
            Visits the group hierarchy starting from this
            group's subordinates objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.UpdateAttachedNodes">
            <summary>
            Updates the internal objects collections.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.AddAttachment(MindFusion.Diagramming.Wpf.Group.Attachment,System.Boolean)">
            <summary>
            Used for undo/redo. Adds an existing Attachment instance
            to the internal list of attachments.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.RemoveAttachment(MindFusion.Diagramming.Wpf.Group.Attachment)">
            <summary>
            Used for undo/redo. Removes an Attachment instance from the
            internal list of attachments.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.Expand(System.Boolean)">
            <summary>
            Propagates a tree branch expansion through the groups' items.
            </summary>
            <param name="incoming">
            Specifies whether the tree is expanded in the direction of
            incoming arrows.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.Collapse(System.Boolean)">
            <summary>
            Propagates a tree branch collapse through the groups' items.
            </summary>
            <param name="incoming">
            Specifies whether the tree is collapsed in the direction of
            incoming arrows.
            </param>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Group.expandable">
            <summary>
            Specifies whether expanding or collapsing a tree branch
            should propagate through the group's subordinate items.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Group.followMasterRotation">
            <summary>
            Specifies whether the positions of subordinated items change
            when the group master item is rotated.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Group.followMasterContainment">
            <summary>
            Specifies whether the subordinated items should be considered
            by a ContainerNode when the master item is added to the container.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Group.MainItem">
            <summary>
            Gets or sets the main item of this group.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Group.Attachments">
            <summary>
            Gets the attachment information.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Group.AttachedNodes">
            <summary>
            Gets a collection of the nodes attached to this group.
            </summary>
            <remarks>
            The MainItem is not included in this collection.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Group.Visible">
            <summary>
            Gets or sets a value indicating whether the group is visible.
            </summary>
            <remarks>
            Assigning a value to this property sets the Visible property
            of all items in the group.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Group.AutoDeleteItems">
            <summary>
            Gets or sets a value indicating whether the subordinated items
            in a group are automatically deleted if the group is destroyed.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Group.Expandable">
            <summary>
            Gets or sets a value indicating whether expanding/collapsing
            a tree branch propagates through this group.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Group.FollowMasterRotation">
            <summary>
            Gets or sets a value indicating whether attached nodes position
            should follow the RotationAngle of a master ShapeNode node.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Group.FollowMasterContainment">
            <summary>
            Gets or sets a value indicating whether the subordinated items
            should be considered by a ContainerNode when the master item is
            added to the container.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Group.Tag">
            <summary>
            Gets or sets a custom data associated with the group.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Group.LinksToMove">
            <summary>
            Gets a collection with all arrows that will be
            translated in correspondence to group modifications.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Group.Parent">
            <summary>
            Gets or sets the Diagram instance this group belongs to.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Group.PrevPoints">
            <summary>
            Gets or sets the internal point collection.
            </summary>
            <remarks>
            Used during XML serialization.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Group.PrevRect">
            <summary>
            Gets or sets the internal rectangle.
            </summary>
            <remarks>
            Used during XML serialization.
            </remarks>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Group.Attachment">
            <summary>
            Encapsulates attachment information.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.Attachment.#ctor">
            <summary>
            Initializes a new instance of the Attachment class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Group.Attachment.Clone">
            <summary>
            Creates an exact copy of this attachment.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Group.Attachment.Node">
            <summary>
            Gets or sets the attached node.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Group.Attachment.Type">
            <summary>
            Gets or sets the attachment type.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Group.Attachment.Data">
            <summary>
            Gets or sets the attachment data.
            </summary>
            <remarks>
            The interpretation of this value depends on the
            type of the attachment.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Group.Attachment.Percents">
            <summary>
            Gets a sets percent information for proprtional
            attachments.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Group.Attachment.Traits">
            <summary>
            Contains additional data associated with the attachment.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.FoldContainerCmd">
            <summary>
            Undoable command that implements scrolling of table rows.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.FoldContainerCmd.#ctor(MindFusion.Diagramming.Wpf.ContainerNode)">
            <summary>
            Initializes a new instance of the ScrollTableCmd class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.FoldContainerCmd.Execute(System.Boolean)">
            <summary>
            Carries out the command action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.FoldContainerCmd.Undo">
            <summary>
            Undoes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.FoldContainerCmd.Redo">
            <summary>
            Redoes the command action.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.FoldContainerCmd.Container">
            <summary>
            Gets the table associated with the command.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DrawingVisitor">
            <summary>
            Iterates over the drawings and geometries of a visual object.
            Override Visit methods to add your own processing
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DrawingVisitor.Visit(System.Windows.Media.Visual,System.Windows.Media.TransformGroup)">
            <summary>
            Return true to continue iteration, false to stop it
            </summary>
            <param name="v"></param>
            <param name="tg">Transform that transforms from coordinates relative to the passed parameter to coordinates relative to the iteration root</param>
            <returns></returns>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.IntersectVisitor">
            <summary>
            Visitor which implements intersection of geometries with a line
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.IntersectVisitor.IntersectStatic(System.Windows.Media.Visual,System.Windows.Size,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Returns the crosspoint closest to endPoint
            Points are Relative to parameter v
            Works only after at least one render
            </summary>
            <param name="v"></param>
            <param name="s">Restrict point to size. If the found intersection is outside of size, return the intersection with size rectangle</param>
            <param name="startPoint"></param>
            <param name="endPoint"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.NearestOutlinePointVisitor">
            <summary>
            Visitor which implements intersection of geometries with a line
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.NearestOutlinePointVisitor.GetNearestOutlinePointStatic(System.Windows.Media.Visual,System.Windows.Point)">
            <summary>
            Returns the crosspoint closest to endPoint
            Points are Relative to parameter v
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DiagramLink">
            <summary>
            Represents a link between two diagram nodes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.#ctor">
            <summary>
            Initializes a new instance of the DiagramLink class.
            </summary>
            <remarks>
            For internal use only.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the DiagramLink class with
            default values supplied form the specified Diagram.
            </summary>
            <param name="parent">
            The Diagram from which to obtain default values for the link properties.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.OnAdd">
            <summary>
            DiagramItem.OnAdd override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.OnLoad">
            <summary>
            DiagramItem.OnLoad override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.#ctor(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Initializes a new instance of the DiagramLink class between
            the specified node with default values supplied form the specified Diagram.
            </summary>
            <param name="parent">
            The Diagram from which to obtain default values for the link properties.
            </param>
            <param name="origin">
            The origin node of the new link.
            </param>
            <param name="destination">
            The destination node of the new link.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.#ctor(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramNode,System.Windows.Point)">
            <summary>
            Initializes a new instance of the DiagramLink class between
            the specified node and the specified point with default values
            supplied form the specified Diagram.
            </summary>
            <param name="parent">
            The Diagram from which to obtain default values for the link properties.
            </param>
            <param name="origin">
            The origin node of the new link.
            </param>
            <param name="destination">
            The destination point of the new link.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.#ctor(MindFusion.Diagramming.Wpf.Diagram,System.Windows.Point,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Initializes a new instance of the DiagramLink class between
            the specified point and the specified node with default values
            supplied form the specified Diagram.
            </summary>
            <param name="parent">
            The Diagram from which to obtain default values for the link properties.
            </param>
            <param name="src">
            The origin point of the new link.
            </param>
            <param name="dest">
            The destination node of the new link.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.#ctor(MindFusion.Diagramming.Wpf.Diagram,System.Windows.Point,System.Windows.Point)">
            <summary>
            Initializes a new instance of the DiagramLink class between
            the specified points with default values supplied form the
            specified Diagram.
            </summary>
            <param name="parent">
            The Diagram from which to obtain default values for the link properties.
            </param>
            <param name="src">
            The origin point of the new link.
            </param>
            <param name="dest">
            The destination point of the new link.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.#ctor(MindFusion.Diagramming.Wpf.DiagramLink,MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Initializes a new instance of the DiagramLink class between
            the specified nodes using the specified diagram link as a prototype.
            </summary>
            <param name="prototype">
            The link to use as a prototype. The properties of the new link
            are initialized from the property values of this link.
            </param>
            <param name="src">
            The origin node of the new link.
            </param>
            <param name="dest">
            The destination node of the new link.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.Clone(System.Boolean)">
            <summary>
            Creates a copy of this link.
            </summary>
            <param name="clipboard">
            true if the copy will be stored in the Windows clipboard; otherwise, false.
            </param>
            <returns>
            An instance of the DiagramItem class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the link content into an XML element.
            </summary>
            <param name="xmlElement">
            An XmlElement the link's data should be stored into.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information
            about the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Loads the link content from an XML element.
            </summary>
            <param name="xmlElement">
            An XmlElement containing the item's data.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information about
            the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.CreateState">
            <summary>
            DiagramItem.CreateState override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.SaveState(MindFusion.Diagramming.Wpf.DiagramItemState)">
            <summary>
            DiagramItem.SaveState override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.RestoreState(MindFusion.Diagramming.Wpf.DiagramItemState)">
            <summary>
            DiagramItem.RestoreState override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.CreateProperties">
            <summary>
            DiagramItem.CreateProperties override.
            </summary>
            <returns>
            A DiagramItemProperties-derived object containing a
            snapshot of the item's properties.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.SaveProperties(MindFusion.Diagramming.Wpf.DiagramItemProperties)">
            <summary>
            DiagramItem.SaveProperties override.
            </summary>
            <param name="props">
            A DiagramItemProperties-derived object containing a
            snapshot of the item's properties.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.RestoreProperties(MindFusion.Diagramming.Wpf.DiagramItemProperties)">
            <summary>
            DiagramItem.RestoreProperties override.
            </summary>
            <param name="props">
            A DiagramItemProperties-derived object containing a snapshot
            of the item's properties.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.StartCreate(System.Windows.Point)">
            <summary>
            DiagramItem.StartCreate override.
            </summary>
            <param name="org">
            Position of the mouse pointer.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.UpdateCreate(System.Windows.Point)">
            <summary>
            DiagramItem.UpdateCreate override.
            </summary>
            <param name="current">
            Position of the mouse pointer.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.CompleteCreate(System.Windows.Point)">
            <summary>
            DiagramItem.CompleteCreate override.
            </summary>
            <param name="end">
            The mouse pointer position.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.AllowCreate(System.Windows.Point,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramItem.AllowCreate override.
            </summary>
            <param name="current">
            The current mouse pointer position.
            </param>
            <param name="ist">
            An InteractionState object containing more information about
            the current state of the operation.
            </param>
            <returns>
            true to allow the creation of this link; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.SetEndPoints(MindFusion.Diagramming.Wpf.ConnectionPoint,MindFusion.Diagramming.Wpf.ConnectionPoint,System.Windows.Point,System.Boolean)">
            <summary>
            Sets the specified ConnectionPoint objects as connection points for
            this link.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.GetTargetNode(System.Windows.Point)">
            <summary>
            Finds a node to which the link should connect.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.AllowModify(System.Windows.Point,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramItem.AllowModify override.
            </summary>
            <param name="current">
            The current mouse pointer position.
            </param>
            <param name="ist">
            An InteractionState object containing more information about
            the current state of the operation.
            </param>
            <returns>
            true to allow the modification of this link; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.StartModifyOrg(MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Invoked when the origin node of this link is
            begun to be modified.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.StartModifyEnd(MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Invoked when the destination node of this link is
            begun to be modified.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.StartModify(System.Windows.Point,System.Int32,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramItem.StartModify override.
            </summary>
            <param name="org">
            Position of the mouse pointer.
            </param>
            <param name="handle">
            Index of the adjustment handle used to modify the link.
            </param>
            <param name="ist">
            An InteractionState object containing more information about the
            current state of the operation.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.UpdateRelatedPoints(System.Windows.Point,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Updates the control points of this link that are
            related to the specified point according to the rules
            established by the relation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.AlignCascadingSegments(System.Int32)">
            <summary>
            Aligns the points of a cascading link adjacent
            to the point with the specified index.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.UpdateModify(System.Windows.Point,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramItem.UpdateModify override.
            </summary>
            <param name="current">
            Position of the mouse pointer.
            </param>
            <param name="ist">
            An InteractionState object containing more information about
            the current state of the operation.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.CompleteModify(System.Boolean)">
            <summary>
            DiagramItem.CompleteModify override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.CompleteModify(System.Windows.Point,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramItem.CompleteModify override.
            </summary>
            <param name="end">
            The mouse pointer position.
            </param>
            <param name="ist">
            An InteractionState object containing more information about
            the current state of the operation.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.ModifyTranslate(System.Double,System.Double,System.Boolean)">
            <summary>
            DiagramItem.ModifyTranslate override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.CancelModify(MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramItem.CancelModify override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.DrawLinkSegments(System.Windows.Media.DrawingContext,System.Windows.Media.Pen,System.Windows.Media.Brush,System.Windows.Media.Pen,System.Boolean)">
            <summary>
            Draws the link's segments.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.DrawArrowhead(System.Windows.Media.DrawingContext,System.Windows.Media.Pen,System.Windows.Media.Brush,MindFusion.Diagramming.Wpf.Shape,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Draws an arrowhead shape.
            </summary>
            <param name="drawingContext">The DrawingContext surface to draw the shape on.</param>
            <param name="pen">A Pen instance used to draw the shape outline.</param>
            <param name="brush">A Brush instance used to fill the shape.</param>
            <param name="shape">A Shape instance that defines the arrowhead geometry.</param>
            <param name="pivot">A Point specified in percents that corresponds to the arrowhead tip position within the Shape geometry.</param>
            <param name="position">A point on the drawing surface where the arrowhead tip should be located.</param>
            <param name="segmentStart">A point specifying the arrowhead direction.</param>
            <param name="size">A double value that specifies the arrowhead size.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.DrawRoundedPolyline(System.Windows.Media.DrawingContext,System.Windows.Media.Pen,System.Windows.Point[],System.Double,System.Boolean,System.Double,System.Windows.Media.PathGeometry)">
            <summary>
            Draws a rounded polyline.
            </summary>
            <remarks>
            The closeUp parameter indicates whether to draw the last segment.
            </remarks>
            <returns>
            Returns the end point of the drawn curve.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.Radians(System.Double)">
            <summary>
            Converts the values expressed in degrees to radians.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.Draw(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.RenderOptions)">
            <summary>
            Draws the link on the specified DrawingContext object.
            </summary>
            <param name="graphics">A DrawingContext object where the link should be rendered.</param>
            <param name="options">Provides options for the drawing operation.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.DrawText(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the link's text depending on the text style.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.DrawHandles(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.HandlesVisualStyle)">
            <summary>
            DiagramItem.DrawHandles override.
            </summary>
            <param name="graphics">
            The DrawingContext surface to draw the handles on.
            </param>
            <param name="hstyle">
            The style that should be used to render the handles.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.GetRepaintRect(System.Boolean)">
            <summary>
            DiagramItem.GetRepaintRect override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.ContainsPoint(System.Windows.Point)">
            <summary>
            DiagramItem.ContainsPoint override.
            </summary>
            <param name="point">
            The point to check.
            </param>
            <returns>
            true it this link contains the specified point; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.Intersects(System.Windows.Rect)">
            <summary>
            DiagramItem.Intersects override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.HitTestHandle(System.Windows.Point,System.Int32@)">
            <summary>
            DiagramItem.HitTestHandle override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.CanMoveStart">
            <summary>
            Determines whther the first arrow control point can be moved.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.CanMoveEnd">
            <summary>
            Determines whther the last link control point can be moved.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.GetHandleIdx(System.Windows.Point)">
            <summary>
            DiagramItem.GetHandleIdx override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.UpdateIntersections">
            <summary>
            Aligns the link ends to the contour of the nodes it connects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.GetBounds">
            <summary>
            DiagramItem.GetBounds override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.GetRotatedBounds">
            <summary>
            DiagramItem.GetRotatedBounds override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.GetCannotDropCursor">
            <summary>
            DiagramItem.GetCannotDropCursor override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.GetCanDropCursor">
            <summary>
            DiagramItem.GetCanDropCursor override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.Route">
            <summary>
            Routes this link, regardless of whether the link's AutoRoute flag is enabled.
            </summary>
            <returns>
            true is a route has been successfully found; otherwise, false.
            </returns>
            <remarks>
            Routing may fail if there is a large background node whose Obstacle
            property is enabled, or if the value of RoutingOptions.GridSize is
            too big for the average distance between adjacent nodes in the diagram.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.DoRoute">
            <summary>
            Routes the link if it is not reflexive.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.DoRoute(System.Boolean,System.Boolean,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Routes the link if it is not reflexive.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.DoRoute(System.Boolean,MindFusion.Diagramming.Wpf.ConnectionPoint,MindFusion.Diagramming.Wpf.ConnectionPoint,System.Boolean,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Runs the routing algorithm for this link.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.ResetCrossings(System.Windows.Rect)">
            <summary>
            Resets the associated crossing information causing it
            to be recalculated the next time it is required.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.ResetCrossings">
            <summary>
            Resets the associated crossing information causing it
            to be recalculated the next time it is required.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.GetCrossings">
            <summary>
            Returns the crossings data for this link. If there
            is no crossings data yet, the crossings are recalcualted
            and cached for subsequent calls to this method.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.SetOrgnAnchor(System.Int32)">
            <summary>
            Attaches the link's origin to the anchor point with the
            specified index.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.SetDestAnchor(System.Int32)">
            <summary>
            Attaches the link's destination to the anchor point with the
            specified index.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.ReassignAnchorPoints">
            <summary>
            Attaches the link end points to the anchor points
            defined for the link's origin and destination nodes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.MindFusion#Diagramming#Wpf#InplaceEditable#GetTextToEdit">
            <summary>
            InplaceEditable.GetTextToEdit implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.MindFusion#Diagramming#Wpf#InplaceEditable#SetEditedText(System.String)">
            <summary>
            InplaceEditable.SetEditedText implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.MindFusion#Diagramming#Wpf#InplaceEditable#GetEditRect(System.Windows.Point)">
            <summary>
            InplaceEditable.GetEditRect implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.InvalidateTextLayout">
            <summary>
            Updates the link's text when the text style is set to Follow.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.NewRect(System.Windows.Point,System.Windows.Size,System.Double)">
            <summary>
            Creates rectangle with specified center, size and rotation around center
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.GetTextLayout(System.Windows.Media.DrawingContext)">
            <summary>
            Gets a TextLayout object describing the layout of the label text
            along the link's segments.
            </summary>
            <returns>
            A DiagramLink.TextLayout instance.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.Expand(System.Boolean)">
            <summary>
            DiagramItem.Expand override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.Collapse(System.Boolean)">
            <summary>
            DiagramItem.Collapse override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.GetLongestHSegment">
            <summary>
            Returns the index of the longest horizontal segment
            of this link.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.GetSegmentLength(System.Int32)">
            <summary>
            Returns the length with the specified index.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.GetLongestSegment">
            <summary>
            Returns the index of the link segment that has
            the longest length.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.GetSegmentCenter(System.Int32)">
            <summary>
            Returns the center point of the segment with
            the specified index.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.SetSegments(System.Int16)">
            <summary>
            Sets the number of segments of this link.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.PutEndPointsAtNodeBorders(System.Boolean)">
            <summary>
            As the name suggests, puts the link's end points
            on the outline of its origin and destination nodes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.PutEndPointsAtNodeBorders(System.Boolean,MindFusion.Diagramming.Wpf.ConnectionPoint,MindFusion.Diagramming.Wpf.ConnectionPoint)">
            <summary>
            As the name suggests, puts the link's end points
            on the outline of its origin and destination nodes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.UpdatePosFromOrgAndDest(System.Boolean)">
            <summary>
            Updates the link end points in response to change
            of the link's origin or destination nodes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.UpdateFromPoints">
            <summary>
            Updates the link's internal state after the link's control
            points have been changed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.UpdateFromPoints(System.Boolean)">
            <summary>
            Updates the link's internal state after the link's control
            points have been changed.
            </summary>
            <param name="updateGroups">
            true to update the positions of nodes attached to the link; otherwise, false.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.UpdateFromPoints(System.Boolean,System.Boolean)">
            <summary>
            Updates the link's internal state after the link's control
            points have been changed.
            </summary>
            <param name="updateGroups">
            true to update the positions of nodes attached to the link; otherwise, false.
            </param>
            <param name="updateSegmentCount">
            true to update the SegmentCount property based on the number of points in the collection.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.GetStartPt">
            <summary>
            Returns the first control point of this link.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.GetEndPt">
            <summary>
            Returns the last control point of this link.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.TranslatePoints(System.Double,System.Double)">
            <summary>
            Translates all link points with the specified offset.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.ArrangePoints(MindFusion.Diagramming.Wpf.Anchoring)">
            <summary>
            Evenly arranges the link points along the length of the
            link according to the link's shape.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.ArrangePoints(MindFusion.Diagramming.Wpf.Anchoring,System.Boolean)">
            <summary>
            Evenly arranges the link points along the length of the
            link according to the link's shape.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.PlaceEndsAtCentralLine">
            <summary>
            Places the end points of the link at the
            intersection between the centers of the
            origin and destination nodes and their outlines.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.SetOrgAndDest(MindFusion.Diagramming.Wpf.ConnectionPoint,MindFusion.Diagramming.Wpf.ConnectionPoint)">
            <summary>
            Sets the origin and destination links of this link.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.SplitSegment(System.Int32,System.Windows.Point)">
            <summary>
            Splits the link segment with the specified index
            at the specified point.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.UpdatePoints(System.Windows.Point)">
            <summary>
            Updates the link's control points with the
            specified point as the new link end point.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.ArrangePrpSegments(System.Double,System.Double)">
            <summary>
            Arranges the segments of a cascading link.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.OnChangeZ">
            <summary>
            DiagramItem.OnChangeZ method.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.SaveSegments">
            <summary>
            Returns a snapshot of the current position of
            the link segments.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.RestoreSegments(MindFusion.Diagramming.Wpf.LinkSegmentsState)">
            <summary>
            Restores the segment positions that were previously
            saved by a call to SaveSegments.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.DistanceToPoint(System.Windows.Point)">
            <summary>
            Calculates the shortest distance from the
            specified point to the link's contour.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.DistanceToPoint(System.Windows.Point,System.Int32@)">
            <summary>
            Calculates the shortest distance from the
            specified point to the link's contour.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.Intersects(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Checks whether the link contour intersects with the outline
            of the specified node.
            </summary>
            TODO: Use GetOutlinePath
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.OnMeasureUnitChanged">
            <summary>
            Called when the Diagram's MeasureUnit changes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.MeasureOverride(System.Windows.Size)">
            <summary>
            FrameworkElement.MeasureOverride override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.GetDestLink">
            <summary>
            Returns the destination link of this link.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.GetOrgnLink">
            <summary>
            Returns the origin link of this link.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.SetReflexive">
            <summary>
            Marks the link as reflexive.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.IsReflexive">
            <summary>
            Gets a value indicating whether the link is reflexive.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.BothEndsSelected">
            <summary>
            Gets a value indicating whether both the link's origin
            and destination nodes are selected.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.UpdateNodeCollections">
            <summary>
            Adds the link to the link collections of its
            associated nodes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.OnTextAttributeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DiagramItem.OnTextAttributeChanged override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.IsConnectedTo(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Checks whether this link is connected to specified node - i.e the specified node is either origin or destination
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.Points">
            <summary>
            Gets or sets the link control points.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.ControlPoints">
            <summary>
            Gets a collection of the control points of this link.
            </summary>
            <remarks>
            You can specify new positions of a link's points via that property.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.Shape">
            <summary>
            Gets or sets the type of link segments and how they are positioned
            relatively to each other.
            </summary>
            <remarks>
            This property specifies whether the segments of a link are straight
            lines or curves.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.HeadPen">
            <summary>
            Gets or sets the pen to use when painting arrowheads lines.
            </summary>
            <remarks>
            This property refers to a pen used to paint arrowhead lines.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.TextStyle">
            <summary>
            Gets or sets the link's text placement and orientation.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.HeadShape">
            <summary>
            Gets or sets the shape of this link's arrowhead.
            </summary>
            <remarks>
            The property specifies what shape is displayed as an arrowhead.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.BaseShape">
            <summary>
            Gets or sets what shape to display at the beginning of a link.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.IntermediateShape">
            <summary>
            Gets or sets the shape displayed at the middle of each segment of the link.
            </summary>
            <remarks>
            The property specifies what shape to display at the middle of each
            segment of a link.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.HeadShapeSize">
            <summary>
            Gets or sets the size of the arrowhead shape.
            </summary>
            <remarks>
            The property specifies how big the shape of the arrowhead is.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.BaseShapeSize">
            <summary>
            Gets or sets the size of the BaseShape shape.
            </summary>
            <remarks>
            The property specifies how big is the shape that is displayed
            at the origin of a link.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.IntermediateShapeSize">
            <summary>
            Gets or sets the size of the IntermediateShape shape.
            </summary>
            <remarks>
            The property specifies how big are the shapes that are displayed
            in the middle of link segments.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.OriginAnchor">
            <summary>
            Gets or sets the index of the origin anchor point
            within the AnchorPattern that contains it.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.DestinationAnchor">
            <summary>
            Gets or sets the index of the destination anchor point
            within the AnchorPattern that contains it.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.SegmentCount">
            <summary>
            Gets or sets the number of segments of this link.
            </summary>
            <remarks>
            Use this property to make a link more indented, when necessary.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.InternalSegmentCount">
            <summary>
            Invoked internally to set the segment count
            unconditionally (i.e. when loading from XML).
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.DirectSegmentCount">
            <summary>
            Sets the number of segments of this link without
            reordering or in any other way modifying the points
            of the link or its state in general.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.IsConnected">
            <summary>
            Gets a value indicating whether the link is connected
            to nodes at both its ends.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.Origin">
            <summary>
            Gets or sets the origin node of the link.
            </summary>
            <remarks>
            The link's origin can be changed programmatically with this property.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.Destination">
            <summary>
            Gets or sets the destination node of this link.
            </summary>
            <remarks>
            The link's destination can be changed programmatically with this property.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.OriginConnection">
            <summary>
            Gets or sets the ConnectionPoint object representing the link connection
            to its origin node. This allows connecting the link to a constituent part
            of a node, such as a TableNode row or a TreeViewItem.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.DestinationConnection">
            <summary>
            Gets or sets the ConnectionPoint object representing the link connection
            to its destination node. This allows connecting the link to a constituent part
            of a node, such as a TableNode row or a TreeViewItem.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.OriginIndex">
            <summary>
            Gets or sets the index of link's origin anchor point or table row.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.DestinationIndex">
            <summary>
            Gets or sets the index of link's destination anchor point or table row.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.Dynamic">
            <summary>
            Gets or sets a value indicating whether a link automatically
            adjusts its end points positions in order to keep pointing to
            the centers of nodes that it connects.
            </summary>
            <remarks>
            Use the property to specify whether a link automatically
            repositions its end segments, so they keep pointing to
            the centers of nodes connected by that link.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.RetainForm">
            <summary>
            Gets or sets a value indicating whether a link should maintain
            its form if the nodes connected with that link are moved around.
            </summary>
            <remarks>
            RetainForm is useful for links that have more than two control points.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.AutoRoute">
            <summary>
            Gets or sets a value indicating whether a link should
            avoid nodes by going the shortest path from its origin
            to its destination without crossing any other nodes.
            </summary>
            <remarks>
            If AutoRoute is enabled, a link automatically finds the
            shortest possible path between its origin and destination
            that doesn't intersect Obstacle nodes.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.CascadeOrientation">
            <summary>
            Gets or sets the orientation of the first segment of a cascading link.
            </summary>
            <remarks>
            Use this property to specify the orientation of the first segment of
            a link whose Shape is set to Cascading.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.CascadeStartHorizontal">
            <summary>
            Gets or sets a flag indicating the orientation of the
            initial segment of a cascading link.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.CascadeEndHorizontal">
            <summary>
            Gets a flag indicating the orientation of the last
            segment of a cascading link.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.AllowMoveStart">
            <summary>
            Gets or sets a value indicating whether the user is allowed
            to move the first control point of a link.
            </summary>
            <remarks>
            Set the property to false to prevent the link origin to be
            changed interactively.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.AllowMoveEnd">
            <summary>
            Gets or sets a value indicating whether the user is allowed
            to move the end point of a link.
            </summary>
            <remarks>
            Set the property to false to prevent the link destination to
            be changed interactively.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.Visible">
            <summary>
            DiagramItem.Visible override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.DrawCrossings">
            <summary>
            Gets or sets a value indicating whether the points where this
            link crosses other links should be drawn as arcs or dashes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.CustomDraw">
            <summary>
            Gets or sets the type of custom drawing performed on this link.
            </summary>
            <remarks>
            This property allows invoking custom painting code for a link.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.AutoSnapToNode">
            <summary>
            Gets or sets a value indicating whether the link end points
            should automatically align to node borders while a user moves them.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.HandlesStyle">
            <summary>
            Gets or sets the appearance of the link's selection handles.
            </summary>
            <remarks>
            Specifies how link's selection status is indicated visually.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.Length">
            <summary>
            Gets the length of the link.
            </summary>
            <remarks>
            If the link's Shape is set to Bezier, an approximate length is calculated.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.Bounds">
            <summary>
            Gets the size of the rectangle that bounds this link.
            </summary>
            <remarks>
            Use the property to get the smallest rectangle that bounds
            all link points.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.NewDest">
            <summary>
            Gets the new destination of this link while the link's
            end point is being interactively modified.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramLink.SilentAutoRoute">
            <summary>
            Sets the AutoRoute flag without actually performing
            routing or any other actions on the link.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DiagramLink.CloserDistance">
            <summary>
            Closer distance comparer.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.CloserDistance.#ctor(System.Windows.Point)">
            <summary>
            Initializes a new instance of the CloserDistance class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.CloserDistance.Compare(System.Object,System.Object)">
            <summary>
            IComparer.Compare implementation.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DiagramLink.CrossingsData">
            <summary>
            Stores a collection of PointCollection, each PointCollection
            holding the crossing points detected for correspondent link segment.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.CrossingsData.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the CrossingsData class.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DiagramLink.TextLayout">
            <summary>
            Stores a list of rectangles and a list of angles,
            which contain the destination of the link text.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramLink.TextLayout.#ctor">
            <summary>
            Initializes a new instance of the TextLayout class.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.LinkTo">
            <summary>
            A helper class that provides attached properties for connecting a link
            to nodes from Xaml.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LinkTo.GetOriginNode(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the OriginNode attached property for a link.
            </summary>
            <param name="obj">The link from which the property value is read.</param>
            <returns>The Xaml id of the origin node.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LinkTo.SetOriginNode(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the value of the OriginNode attached property for a link.
            </summary>
            <param name="obj">The link to which the property value is written.</param>
            <param name="value">The Xaml id of the origin node.</param>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.LinkTo.OriginNodeProperty">
            <summary>
            Identifies the OriginNode attached property.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LinkTo.GetDestinationNode(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the DestinationNode attached property for a link.
            </summary>
            <param name="obj">The link from which the property value is read.</param>
            <returns>The Xaml id of the destination node.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LinkTo.SetDestinationNode(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the value of the DestinationNode attached property for a link.
            </summary>
            <param name="obj">The link to which the property value is written.</param>
            <param name="value">The Xaml id of the destination node.</param>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.LinkTo.DestinationNodeProperty">
            <summary>
            Identifies the DestinationNode attached property.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.AdornerVisual">
            <summary>
            Visual that contains the adjustment handles for a diagram item.
            It is separate from DiagramItem so that the adjustment handles do not interfere with item geometry
            during intersection with visual geometry.
            This is similar to WPF Adorner, but is not comforming.
            TODO: make it WPF Adorner comformant if apropriate
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AdornerVisual.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            UIElement.OnRender override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AdornerVisual.MeasureCore(System.Windows.Size)">
            <summary>
            UIElement.MeasureCore override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AdornerVisual.ArrangeCore(System.Windows.Rect)">
            <summary>
            UIElement.ArrangeCore override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AdornerVisual.GetVisualChild(System.Int32)">
            <summary>
            Visual.GetVisualChild override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AdornerVisual.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            UIElement.OnMouseDown override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AdornerVisual.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            UIElement.OnMouseUp override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AdornerVisual.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            UIElement.OnPreviewMouseDown override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AdornerVisual.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            UIElement.OnPreviewMouseUp override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AdornerVisual.OnDragOver(System.Windows.DragEventArgs)">
            <summary>
            UIElement.OnDragOver override
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AdornerVisual.OnDragEnter(System.Windows.DragEventArgs)">
            <summary>
            UIElement.OnDragEnter override
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AdornerVisual.OnDragLeave(System.Windows.DragEventArgs)">
            <summary>
            UIElement.OnDragLeave override
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AdornerVisual.OnDrop(System.Windows.DragEventArgs)">
            <summary>
            UIElement.OnDrop override
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AdornerVisual.VisualChildrenCount">
            <summary>
            Visual.VisualChildrenCount override.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.XmlConvert">
            <summary>
            Provides capabilities to convert various types to and from strings
            in a cutlure-independent way.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.ToBoolean(System.String)">
            <summary>
            Converts the specified string value to bool.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.FromBoolean(System.Boolean)">
            <summary>
            Converts the specified bool value to string.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.ToSingle(System.String)">
            <summary>
            Converts the specified string value to float.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.FromSingle(System.Single)">
            <summary>
            Converts the specified float value to string.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.ToDouble(System.String)">
            <summary>
            Converts the specifed string value to double.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.FromDouble(System.Double)">
            <summary>
            Converts the specified double value to string.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.ToInt16(System.String)">
            <summary>
            Converts the specified string value to 16-bit integer.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.FromInt16(System.Int16)">
            <summary>
            Converts the specified 16-bit integer value to string.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.ToInt32(System.String)">
            <summary>
            Converts the specified string value to 32-bit integer.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.ToInt32(System.String,System.Int32)">
            <summary>
            Converts the specified string value to 32-bit integer without throwing exceptions
            If an exception is thrown returns the defaultValue
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.FromInt32(System.Int32)">
            <summary>
            Converts the specified 32-bit integer value to string.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.ToInt64(System.String)">
            <summary>
            Converts the specified string value to 64-bit integer.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.FromInt64(System.Int64)">
            <summary>
            Converts the specified 64-bit integer to string.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.ToColor(System.String)">
            <summary>
            Converts the specified string value to Color.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.FromColor(System.Windows.Media.Color)">
            <summary>
            Converts the specified color value to string in the format #AARRGGBB.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.ImageFromString(System.String)">
            <summary>
            Converts the specified string value to image.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.ToImageV4(System.String)">
            <summary>
            Converts the specified string value to image.
            </summary>
            <remarks>
            This method is used in XML file format 4 and earlier.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.FromImageV4(System.Windows.Controls.Image)">
            <summary>
            Converts the specified image to string.
            </summary>
            <remarks>
            This method is used in XML file format 4 and earlier.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.ToImage(System.String)">
            <summary>
            Converts the specified string value to image.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.FromImage(System.Windows.Controls.Image)">
            <summary>
            Converts the specified image to string.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.ToStreamV4(System.String)">
            <summary>
            Converts the specified string value to stream.
            </summary>
            <remarks>
            This method is used in XML file format 4 and earlier.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.FromStreamV4(System.IO.MemoryStream)">
            <summary>
            Converts the specified memory stream to string.
            </summary>
            <remarks>
            This method is used in XML file format 4 and earlier.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.ToStream(System.String)">
            <summary>
            Converts the specified string value to stream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.FromStream(System.IO.Stream)">
            <summary>
            Converts the specified stream to string.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.FromEnum(System.Object)">
            <summary>
            Converts the specified enum value to a string.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.ToEnum(System.Type,System.String)">
            <summary>
            Converts the specified string value to its corresponding
            enumeration member of the specified type.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.XmlConvert.FromXmlElement(System.Xml.XmlElement)">
            <summary>
            Reads a Point value from the specified XML element.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Selection">
            <summary>
            Represents a set of items selected in the diagram document.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the Selection class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.FreeResources">
            <summary>
            DiagramItem.FreeResources override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.SaveState">
            <summary>
            Saves the state of the selection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.RestoreState(MindFusion.Diagramming.Wpf.SelectionState)">
            <summary>
            Restores the selection state.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.StartCreate(System.Windows.Point)">
            <summary>
            DiagramItem.StartCreate override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.CancelCreate">
            <summary>
            Cancels interactive selection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.UpdateCreate(System.Windows.Point)">
            <summary>
            DiagramItem.UpdateCreate override.
            </summary>
            <param name="current">
            Position of the mouse pointer.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.CompleteCreate(System.Windows.Point)">
            <summary>
            DiagramItem.CompleteCreate override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.AllowCreate(System.Windows.Point,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramItem.AllowCreate override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.StartModify(System.Windows.Point,System.Int32,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramItem.StartModify override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.UpdateModify(System.Windows.Point,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramItem.UpdateModify override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.CompleteModify(System.Windows.Point,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramItem.CompleteModify override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.AllowModify(System.Windows.Point,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramItem.AllowModify override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.CancelModify(MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            DiagramItem.CancelModify override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.ModifiedThroughGroup(MindFusion.Diagramming.Wpf.DiagramItem,MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Determines whether an item should be modified through its master group.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.Draw(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.RenderOptions)">
            <summary>
            DiagramItem.Draw override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.DrawHandles(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.HandlesVisualStyle)">
            <summary>
            DiagramItem.DrawHandles override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.GetRepaintRect(System.Boolean)">
            <summary>
            DiagramItem.GetRepaintRect override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.ContainsPoint(System.Windows.Point)">
            <summary>
            DiagramItem.ContainsPoint override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.HitTestHandle(System.Windows.Point,System.Int32@)">
            <summary>
            DiagramItem.HitTestHandle override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.GetCannotDropCursor">
            <summary>
            DiagramItem.GetCannotDropCursor override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.GetCanDropCursor">
            <summary>
            DiagramItem.GetCanDropCursor override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.Toggle(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Toggles the selection state of an item.
            </summary>
            <param name="item">
            The DiagramItem whose selection state should be changed.
            </param>
            <remarks>
            Call this method to toggle an item's selection state.
            The method selects the diagram item passed as argument
            if previously it was deselected. If the item was selected,
            the method deselects it.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.AddItem(System.Windows.UIElement)">
            <summary>
            Adds a new item to the current selection.
            </summary>
            <param name="item">
            The DiagramItem to be added to the selection.
            </param>
            <remarks>
            This method adds a new item to the selection. It also deactivates
            the ActiveItem, if any, and makes the newly added item the active one.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.AddItemInternal(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Adds the specified object to the selection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.Change(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Selects an item and deselects all others.
            </summary>
            <param name="item">
            The DiagramItem which should be made active.
            </param>
            <remarks>
            Call this method to select an item and make it the ActiveItem.
            The method doesn't let you select locked items.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.RemoveItem(System.Windows.UIElement)">
            <summary>
            Removes an item from the selection.
            </summary>
            <param name="item">
            The UIElement to be removed from the selection.
            </param>
            <returns>
            true if the item has been successfully removed; otherwise, false.
            </returns>
            <remarks>
            Call this method to deselect an item. Note that the item is
            not deleted, but just removed from the selection.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.RemoveItemInternal(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Removes the specified object from the selection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.ItemInSelection(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Checks whether the specified object is contained among the
            selected objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.Clear">
            <summary>
            Removes all items from the selection.
            </summary>
            <remarks>
            Call Clear to deselect all items. The items are not deleted.
            The method also sets the diagram's ActiveItem to null (Nothing
            in Visual Basic).
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.ClearInternal">
            <summary>
            Removes all items from the selection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.ClearCollections">
            <summary>
            Removes all items from the selection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.RecalcRect">
            <summary>
            Recalculates the bounding rectangle of all objects in the selection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.HideMaybe">
            <summary>
            Hide the rectangular frame which should be visible only if more than one item is selected and style is 
            SelectionStyle.Frame
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.GetSize">
            <summary>
            Gets the number of selected items.
            </summary>
            <returns>
            An integer value indicating the size of the collection.
            </returns>
            <remarks>
            Call this method to get the number of selected items, including
            both nodes and links.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.ParentSelected(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Checks whether the parent node of the specified item
            is selected, where the relation "child-parent" depends on
            the type of the object 'item'.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.Hv_TranslateLink(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Checks whether the specified object is an arrow
            and eventually adds it to the arrowsToMove collection
            for subsequent UpdateModify calls.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.VisitHierarchy(MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor)">
            <summary>
            DiagramItem.VisitHierarchy override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.UpdateNSARect(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Invokes the UpdatePosFromOrgAndDest method on the
            specified arrow.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Selection.IgnoreItem(MindFusion.Diagramming.Wpf.DiagramItem,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Checks whether the specified item shouldn't be moved
            by the Selection object itself, either because its group
            master moves it, or if it's an arrow whose origin or dest.
            Nodes aren't modified.
            </summary>
            <remarks>
            This method is intended to be called only from UpdateModify.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Selection.Items">
            <summary>
            Gets a collection of all selected items.
            </summary>
            <remarks>
            You can select items programmatically by adding them to this collection.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Selection.Links">
            <summary>
            Gets the collection of all links in the selection.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Selection.Nodes">
            <summary>
            Gets a collection of all selected nodes.
            </summary>
            <remarks>
            You can select nodes programmatically by adding them to this collection.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Selection.Style">
            <summary>
            Gets or sets a value indicating how to display multiple selection of items.
            </summary>
            <remarks>
            The property specifies how multiple-selection is presented visually
            to users - with manipulation handles painted around each item or
            with a rectangle painted around all items.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Selection.AllowMultipleSelection">
            <summary>
            Gets or sets a value indicating whether more than one items
            can be selected simultaneously.
            </summary>
            <remarks>
            The property controls whether multiple items can be selected
            interactively. If it is disabled, multiple items can still be
            selected programmatically.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Selection.Bounds">
            <summary>
            Gets the rectangle that bounds all selected items.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Selection.IncludeItemsIfIntersect">
            <summary>
            Gets or sets a value indicating which items are selected
            when drawing a selection rectangle.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.ScrollTableCmd">
            <summary>
            Implements scrolling of table's rows.
            </summary>
            <remarks>
            Instances of this class are implicitly created by WpfDiagram
            in response to scrolling table's rows, either interactively or
            programmatically. References to those instances are passed to
            handlers of the ActionRecorded, ActionUndone and ActionRedone events.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ScrollTableCmd.#ctor(MindFusion.Diagramming.Wpf.TableNode)">
            <summary>
            Initializes a new instance of the ScrollTableCmd class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ScrollTableCmd.Execute(System.Boolean)">
            <summary>
            Carries out the command action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ScrollTableCmd.Undo">
            <summary>
            Undoes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ScrollTableCmd.Redo">
            <summary>
            Redoes the command action.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.ScrollTableCmd.TableNode">
            <summary>
            Gets a reference to table affected by this operation.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.RoutingOptions">
            <summary>
            Allows customization of various aspects of the link routing algorithm.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.RoutingOptions.LengthCost">
            <summary>
            Gets or sets a value added to the total cost of a route
            for each piece of the routing grid occupied by the route.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.RoutingOptions.TurnCost">
            <summary>
            Gets or sets a value added to the total cost of a route if it makes a turn.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.RoutingOptions.GridSize">
            <summary>
            Gets or sets the size of the pieces of the routing grid.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.RoutingOptions.NodeVicinityCost">
            <summary>
            Gets or sets the size of a buffer zone around a node for
            which routes get a penalty cost if they pass through it.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.RoutingOptions.IgnoreAnchoring">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.PathNode">
            <summary>
            Represents a path node, used by the link routing algorithm.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.PathNode.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the PathNode class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.PathNode.CompareTo(System.Object)">
            <summary>
            IComparable.CompareTo implementation.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.PathNode.X">
            <summary>
            DiagramNode location.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.PathNode.Y">
            <summary>
            DiagramNode location.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.PathNode.F">
            <summary>
            DiagramNode evaluation.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.PathNode.G">
            <summary>
            DiagramNode evaluation.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.PathNode.H">
            <summary>
            DiagramNode evaluation.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.PathNode.Parent">
            <summary>
            Adjacent nodes.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.RouteHeuristics">
            <summary>
            The link routing algorithm uses a heuristic function of
            this type in its prediction steps.
            </summary>
            <param name="start">
            A Point specifying the first of the points, between which
            the distance is calculated.
            </param>
            <param name="end">
            A Point specifying the first of the points, between which
            the distance is calculated.
            </param>
            <returns>
            An integer value indicating the calculated distance between
            the specified points.
            </returns>
            <remarks>
            Functions of this type can be assigned to the RouteHeuristics
            property of the RoutingOptions class.
            </remarks>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Behaviors.ModifyBehavior">
            <summary>
            This class is used when the diagram behavior
            is set to Behavior.Modify.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.ModifyBehavior.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the ModifyBehavior class.
            </summary>
            <param name="diagram">
            The Diagram this behavior will be associated with.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.ModifyBehavior.StartDraw(System.Windows.Point)">
            <summary>
            BehaviorBase.StartDraw override.
            </summary>
            <param name="point">
            A Point structure, which specifies the current position of
            the mouse cursor, in document coordinates.
            </param>
            <returns>
            An instance of the InteractionState class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.ModifyBehavior.SetMouseCursor(System.Windows.Point,System.Boolean@)">
            <summary>
            BehaviorBase.SetMouseCursor override.
            </summary>
            <param name="point">
            A Point structure that specifies the position of the mouse cursor.
            </param>
            <param name="startInteraction">
            true if the user is going to create, delete, modify or select
            a DiagramItem; false if mouse behavior is not considered; in
            this case the mouse pointer is set to a default cursor according
            to the background LaneGrid.
            </param>
            <returns>
            A member of the CursorHint enumeration.
            </returns>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.ResizeType">
            <summary>
            Specifies how to resize child columns and rows in the lanes grid
            when their parent column or row is resized.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.ResizeType.Fixed">
            <summary>
            The header's size (width or height) is fixed and
            does not change when its parent header is being
            resized unless all its siblings have fixed size too.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.ResizeType.Proportional">
            <summary>
            The header resizes in proportion to its parent header.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.Style">
            <summary>
            Encapsulates the appearance properties of an element in a lane grid.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Style.#ctor">
            <summary>
            Initializes a new instance of the Style class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Style.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the style to the specified XmlElement
            using the specified context.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Style.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Loads the style from the specified XmlElement
            using the specified context.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Style.OnChanged(System.EventArgs)">
            <summary>
            Raises the Changed event.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Style.backgroundBrush">
            <summary>
            The background brush.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Style.leftBorderPen">
            <summary>
            The left border pen.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Style.topBorderPen">
            <summary>
            The top border pen.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Style.rightBorderPen">
            <summary>
            The right border pen.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Style.bottomBorderPen">
            <summary>
            The bottom border pen.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Style.BackgroundBrush">
            <summary>
            Gets or sets the background Brush of this style.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Style.LeftBorderPen">
            <summary>
            Gets or sets the Pen for drawing the left border for this style.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Style.TopBorderPen">
            <summary>
            Gets or sets the Pen for drawing the top border for this style.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Style.RightBorderPen">
            <summary>
            Gets or sets the Pen for drawing the right border for this style.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Style.BottomBorderPen">
            <summary>
            Gets or sets the Pen for drawing the bottom border for this style.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Lanes.Style.Changed">
            <summary>
            Raised when this style has been changed.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.CellClusterStyle">
            <summary>
            Represents the style of a cluster of cells.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.CellClusterStyle.#ctor(MindFusion.Diagramming.Wpf.Lanes.Grid,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the CellClusterStyle class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.CellClusterStyle.OnGridInvalidated(System.Object,System.EventArgs)">
            <summary>
            Handles the Grid.Invalidated event.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.CellClusterStyle.BackgroundBrush">
            <summary>
            Gets or sets the background brush of all cells in the cluster.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.CellClusterStyle.LeftBorderPen">
            <summary>
            Gets or sets the left border pen of all cells in the cluster.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.CellClusterStyle.TopBorderPen">
            <summary>
            Gets or sets the top border pen of all cells in the cluster.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.CellClusterStyle.RightBorderPen">
            <summary>
            Gets or sets the right border pen of all cells in the cluster.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.CellClusterStyle.BottomBorderPen">
            <summary>
            Gets or sets the bottom border pen of all cells in the cluster.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.Header">
            <summary>
            Represents a header in a grid view.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TextPresenter">
            <summary>
            Implements a container for text content and defines text attributes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TextPresenter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TextPresenter class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TextPresenter.CopyFrom(MindFusion.Diagramming.Wpf.ITextAttributes)">
            <summary>
            Copies all text attributes from the specified object.
            </summary>
            <param name="prototype">An object implementing the ITextAttributes interface.</param>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TextPresenter.TextProperty">
            <summary>
            Identifies the Text dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TextPresenter.TextBrushProperty">
            <summary>
            Identifies the TextBrush dependency property.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TextPresenter.OnTextAttributeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when any of the attributes defined in ITextAttributes changes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TextPresenter.SetDiagramDirty">
            <summary>
            Invoked when a value is assigned to a property and the diagram's Dirty flag must be set.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TextPresenter.TextPaddingProperty">
            <summary>
            Identifies the TextPadding dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TextPresenter.FontFamilyProperty">
            <summary>
            Identifies the FontFamily dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TextPresenter.FontSizeProperty">
            <summary>
            Identifies the FontSize dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TextPresenter.FontStyleProperty">
            <summary>
            Identifies the FontStyle dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TextPresenter.FontWeightProperty">
            <summary>
            Identifies the FontWeight dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TextPresenter.FontStretchProperty">
            <summary>
            Identifies the FontStretch dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TextPresenter.TextDecorationsProperty">
            <summary>
            Identifies the TextDecorations dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TextPresenter.TextAlignmentProperty">
            <summary>
            Identifies the TextAlignment dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TextPresenter.TextVerticalAlignmentProperty">
            <summary>
            Identifies the TextVerticalAlignment dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TextPresenter.TextTrimmingProperty">
            <summary>
            Identifies the TextTrimming dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.TextPresenter.TextWrappingProperty">
            <summary>
            Identifies the TextWrapping dependency property.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TextPresenter.SaveTextAttributes(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the text properties to the specified XML element.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TextPresenter.LoadTextAttributes(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Loads the text properties to the specified XML element.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextPresenter.Text">
            <summary>
            Gets or sets the text displayed inside this item.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextPresenter.TextBrush">
            <summary>
            Gets or sets the text displayed inside this item.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextPresenter.TextPadding">
            <summary>
            Gets or sets the thickness of padding space between the item boundaries and its text.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextPresenter.FontFamily">
            <summary>
            Gets or sets the preferred font family for this TextPresenter. 
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextPresenter.FontSize">
            <summary>
            Gets or sets the font size for this TextPresenter.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextPresenter.FontStyle">
            <summary>
            Gets or sets the font style for this TextPresenter.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextPresenter.FontWeight">
            <summary>
            Gets or sets the font weight for this TextPresenter.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextPresenter.FontStretch">
            <summary>
            Gets or sets the font-stretching characteristics for this TextPresenter.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextPresenter.TextDecorations">
            <summary>
            Gets or sets the effects to apply to the text of this TextPresenter.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextPresenter.TextAlignment">
            <summary>
            Gets or sets a value that indicates the horizontal alignment of text content.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextPresenter.TextVerticalAlignment">
            <summary>
            Gets or sets a value that indicates the vertical alignment of text content.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextPresenter.TextTrimming">
            <summary>
            Gets or sets the text trimming to employ when text overflows the item area.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextPresenter.TextWrapping">
            <summary>
            Gets or sets how this TextPresenter should wrap text.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.#ctor">
            <summary>
            Initializes a new instance of the Header class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Header class with the specified title.
            </summary>
            <param name="title">
            A string value that represents the title for this Header object.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.MindFusion#Diagramming#Wpf#InplaceEditable#GetTextToEdit">
            <summary>
            InplaceEditable.GetTextToEdit explicit implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.MindFusion#Diagramming#Wpf#InplaceEditable#SetEditedText(System.String)">
            <summary>
            InplaceEditable.SetEditedText explicit implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.MindFusion#Diagramming#Wpf#InplaceEditable#GetEditRect(System.Windows.Point)">
            <summary>
            InplaceEditable.GetEditRect explicit implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.MindFusion#Diagramming#Wpf#InplaceEditable#GetDiagramItem">
            <summary>
            InplaceEditable.GetDiagramItem explicit implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the header to the specified XmlElement using
            the specified context.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Loads the header from the specified XmlElement using
            the specified context.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.SetReference(System.Int32,System.Object)">
            <summary>
            Updates the reference to the specified object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.IsDescendantOf(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Checks whether this header is a descendant (either
            direct or indirect) of the specified header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.SetParent(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Invoked when the header is added to the child collection of
            another header in order to set its parent.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.SetWidth(System.Double)">
            <summary>
            Sets the width this header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.SetHeight(System.Double)">
            <summary>
            Sets the height this header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.SetChildrenWidths(System.Double,System.Double)">
            <summary>
            Sets the widths of the children of this header recursively.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.SetChildrenHeights(System.Double,System.Double)">
            <summary>
            Sets the heights of the children of this header recursively.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.EnsureWidth(System.Double)">
            <summary>
            Ensures that this header and its children have at least the
            specified width.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.EnsureHeight(System.Double)">
            <summary>
            Ensures that this header and its children have at least the
            specified height.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.ZeroWidth">
            <summary>
            Sets the width of this header and all its children to 0.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.ZeroHeight">
            <summary>
            Sets the height of this header and all its children to 0.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.NotifyHeaderAdded(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Called when somewhere down within this header's children
            a new header has been added.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.NotifyHeaderRemoved(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Called when somewhere down within this header's children
            a sub-header is about to be removed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.NotifySizeChanged(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Called when the width or height of the header has changed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.NotifyWidthChanged(MindFusion.Diagramming.Wpf.Lanes.Header,System.Double)">
            <summary>
            Called when the width of individual headers has changed. Only
            called for the leaf headers and never called for the group headers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.NotifyHeightChanged(MindFusion.Diagramming.Wpf.Lanes.Header,System.Double)">
            <summary>
            Called when the width of individual headers has changed. Only
            called for the leaf headers and never called for the group headers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.NotifyHeaderChanged(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Called when a header's visual appearance has changed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.OnStyleChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the Style.Changed event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.SetWidthNoNotify(System.Double)">
            <summary>
            Sets the width of this header without raising notifications about it.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Header.SetHeightNoNotify(System.Double)">
            <summary>
            Sets the width of this header without raising notifications about it.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Header.CenteredStringFormat">
            <summary>
            The default string format for the header caption.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Header.parent">
            <summary>
            The parent header of this header (if any).
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Header.subHeaders">
            <summary>
            The sub-headers of this header.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Header.width">
            <summary>
            The width of this header.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Header.height">
            <summary>
            The height of this header.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Header.resizeType">
            <summary>
            The header's resize type.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Header.title">
            <summary>
            The caption of this header.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Header.rotateTitle">
            <summary>
            A flag specifying whether to rotate the header caption.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Header.titleFormat">
            <summary>
            The alignment of the title.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Header.titleFont">
            <summary>
            The font of the title.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Header.titleColor">
            <summary>
            The color of the title.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Header.style">
            <summary>
            The style of the header.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Header.InplaceEditBounds">
            <summary>
            Gets or sets the in-place editing bounds of ths header.
            </summary>
            <remarks>
            A temporary variable set externally before an in-place editing is about to occur.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Header.Parent">
            <summary>
            Gets the parent header.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Header.SubHeaders">
            <summary>
            Gets a collection of the subheaders of this header.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Header.DeepChildCount">
            <summary>
            Gets the number of subheaders this header has, counting
            only the children at the bottommost level.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Header.Width">
            <summary>
            Gets or sets the width of this header.
            </summary>
            <remarks>
            If this is a column header, the property specifies
            the width of the whole column.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Header.Height">
            <summary>
            Gets or sets the height of this header.
            </summary>
            <remarks>
            If this is a row header, the property specifies the height of
            the whole row.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Header.ResizeType">
            <summary>
            Gets or sets how a row or a column is resized relatively to its parent.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Header.Title">
            <summary>
            Gets or sets the header caption.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Header.RotateTitle">
            <summary>
            Gets or sets a value indicating whether to rotate the header caption
            at 90 degree.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Header.TitleFormat">
            <summary>
            Gets or sets the alignment of the header caption.
            </summary>
            <remarks>
            Set this property to null to use the default (centered) alignment.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Header.TitleFont">
            <summary>
            Gets or sets the font of the header caption.
            </summary>
            <remarks>
            If this property is set to null, the header text
            will be rendered using the diagram's Font.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Header.DefaultTitleFont">
            <summary>
            Gets the default font for this header.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Header.TitleColor">
            <summary>
            Gets or sets the color of the header caption.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Header.Style">
            <summary>
            Gets or sets the style of this header.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Header.IsColumnHeader">
            <summary>
            Gets a value indicating whether this header is a column header.
            </summary>
            <remarks>
            Both IsColumnHeader and IsRowHeader return false if the
            header is not attached to a lane grid.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Header.IsRowHeader">
            <summary>
            Gets a value indicating whether this header is a row header.
            </summary>
            <remarks>
            Both IsColumnHeader and IsRowHeader return false if the
            header is not attached to a lane grid.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Header.MinSize">
            <summary>
            Gets the minimum size for this header.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.HeaderCollection">
            <summary>
            Represents a strongly-typed collection of Header objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.HeaderCollection.#ctor">
            <summary>
            Initializes a new instance of the HeaderCollection class.
            </summary>
            <remarks>
            This constructor is only used during deserialization.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.HeaderCollection.#ctor(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Initializes a new instance of the HeaderCollection class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.HeaderCollection.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the header collection to the specified element
            using the specified context.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.HeaderCollection.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Loads the header collection from the specified element
            using the specified context.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.HeaderCollection.SetReference(System.Int32,System.Object)">
            <summary>
            Updates the reference to the specified object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.HeaderCollection.OnHeaderAdded(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Notifies the underlying header about a new child being added.
            </summary>
            <param name="header">
            The new header.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.HeaderCollection.OnHeaderRemoved(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Notifies the underlying header about a child which is about to be removed.
            </summary>
            <param name="header">
            The header being removed.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.HeaderCollection.Add(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Adds the specified header to the collection.
            </summary>
            <param name="header">
            The Header object to add.
            </param>
            <returns>
            The index at which the header was added in the collection.
            </returns>
            <remarks>
            The method adds a Header object to the end of the collection.
            If you need to place the Header at a certain position, you should
            use Insert method instead.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.HeaderCollection.Insert(System.Int32,MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Inserts the specified Header at the specified position within
            the HeaderCollection.
            </summary>
            <param name="index">
            The zero-based index at which the Header should be inserted. 
            </param>
            <param name="header">
            The Header object to insert.
            </param>
            <remarks>
            Use this method to insert Header objects at a specific position
            in the collection. If you do not need to specify header's position,
            use the Add method instead, which adds new headers to the end of the list.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.HeaderCollection.Remove(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Removes the first occurrence of the specified Header from
            the collection.
            </summary>
            <param name="header">
            The Header object to remove.
            </param>
            <remarks>
            Use this method to remove headers from the collection. Headers
            can be added to the collection with the Add or Insert methods.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.HeaderCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the Header at the specified position within the collection.
            </summary>
            <param name="index">
            The index at which the Header object should be removed.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.HeaderCollection.Clear">
            <summary>
            Removes all headers from the collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.HeaderCollection.IndexOf(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Gets the index of the specified header within this collection.
            </summary>
            <param name="header">
            The Header to locate in the HeaderCollection. The value can be
            a null reference (Nothing in Visual Basic). 
            </param>
            <returns>
            The zero-based index of the first occurrence of value within the
            entire HeaderCollection, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.HeaderCollection.Contains(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Checks whether a Header is in the collection.
            </summary>
            <param name="header">
            The Header to locate in the collection.
            </param>
            <returns>
            true if the header was found in the collection; otherwise, false.
            </returns>
            <remarks>
            Call the method to determine whether a Header is contained
            within the collection. If not, you can add it with the Add
            method. Otherwise, if it is there, you can remove it with Remove.
            </remarks>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.HeaderCollection.parent">
            <summary>
            The parent of the Header objects in the collection.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.HeaderCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Header at the specified position.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.ICell">
            <summary>
            Defines a base for cells in a lane list.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.ICell.Style">
            <summary>
            Gets or sets the Style of the cell or group of cells.
            </summary>
            <remarks>
            The Item property of the Grid class lets you access a group
            of cells through a single ICell reference, which lets you set
            the style of all cells in the group with a single assignment. 
            </remarks>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.Cell">
            <summary>
            Represents a single cell in a lane grid.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Cell.#ctor">
            <summary>
            Initializes a new instance of the cell class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Cell.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Serializes the cell to the specified XmlElement using
            the specified context.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Cell.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Deserializes the cell from the specified XmlElement using
            the specified context.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Cell.OnStyleChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the Style.Changed event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Cell.OnChanged(System.EventArgs)">
            <summary>
            Raises the Changed event.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Cell.style">
            <summary>
            The visual style.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Cell.Style">
            <summary>
            Gets or sets the style of the cell.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Lanes.Cell.Changed">
            <summary>
            Raised when the visual appearance of the cell has changed.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.CellCluster">
            <summary>
            Represents a cell or a cluster of cells in a lane grid.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.CellCluster.#ctor(MindFusion.Diagramming.Wpf.Lanes.Grid,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the CellCluster class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.CellCluster.OnGridInvalidated(System.Object,System.EventArgs)">
            <summary>
            Handles the Grid.Invalidated event.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.CellCluster.Style">
            <summary>
            Gets or sets the style of each cell in the cell cluster.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.CellCluster.ColumnStart">
            <summary>
            Gets the start column of this cell cluster.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.CellCluster.ColumnEnd">
            <summary>
            Gets the end column of this cell cluster.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.CellCluster.RowStart">
            <summary>
            Gets the start row of this cell cluster.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.CellCluster.RowEnd">
            <summary>
            Gets the end row of this cell cluster.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.CellMatrix">
            <summary>
            A 2-dimensional matrix of cells.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.CellMatrix.#ctor">
            <summary>
            Initializes a new instance of the CellMatrix class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.CellMatrix.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Serializes the cell matrix to the specified XmlElement
            using the specified context.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.CellMatrix.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Deserializes the cell matrix to the specified XmlElement
            using the specified context.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.CellMatrix.InsertColumns(System.Int32,System.Int32)">
            <summary>
            Inserts new empty columns at the specified position.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.CellMatrix.InsertRows(System.Int32,System.Int32)">
            <summary>
            Inserts new empty rows at the specified position.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.CellMatrix.RemoveColumns(System.Int32,System.Int32)">
            <summary>
            Removes the specified number of column starting with the column
            at the specified position.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.CellMatrix.RemoveRows(System.Int32,System.Int32)">
            <summary>
            Removes the specified number of rows starting with the row
            at the specified position.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.CellMatrix.OnCellChanged(System.EventArgs)">
            <summary>
            Raises the CellChanged event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.CellMatrix.OnCellChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the Changed event of all underlying cells.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.CellMatrix.data">
            <summary>
            The cell data.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.CellMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the cell at the specified position.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.CellMatrix.ColumnCount">
            <summary>
            Gets the number of columns in the matrix.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.CellMatrix.RowCount">
            <summary>
            Gets the number of rows in the matrix.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Lanes.CellMatrix.CellChanged">
            <summary>
            Raised when any of the underlying cells changes its
            visual appearance.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.Grid">
            <summary>
            Represents a lane grid.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the Lanes class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Serializes the lane grid to the specified XmlElement
            using the specified context.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Deserializes the lane grid from the specified XmlElement
            using the specified context.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.ProcessColumnHeaders(MindFusion.Diagramming.Wpf.Lanes.Grid.ProcessHeaderCallback,System.Double,System.Double,System.Object)">
            <summary>
            Processes all column headers and invokes the specified
            delegate for each one.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.ProcessRowHeaders(MindFusion.Diagramming.Wpf.Lanes.Grid.ProcessHeaderCallback,System.Double,System.Double,System.Object)">
            <summary>
            Processes all row headers and invokes the specified
            delegate for each one.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.RenderFirst(System.Windows.Media.DrawingContext)">
            <summary>
            Invoked in order to render the grid before any other diagram
            items are drawn.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.RenderLast(System.Windows.Media.DrawingContext)">
            <summary>
            Invoked in order to render the grid after all other diagram
            items are drawn.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.RenderHeaders(System.Windows.Media.DrawingContext)">
            <summary>
            Renders the grid headers to the specified target.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.RenderTopLeftArea(System.Windows.Media.DrawingContext,System.Double,System.Double)">
            <summary>
            Renders the top-left area of the lane grid.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.RenderRectangle(System.Windows.Media.DrawingContext,System.Windows.Rect,MindFusion.Diagramming.Wpf.Lanes.Style)">
            <summary>
            Renders the specified rectangle to the specified target
            using the brush and pens from the specified style.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.RenderHeader(MindFusion.Diagramming.Wpf.Lanes.Header,System.Windows.Rect,System.Object)">
            <summary>
            A callback invoked during header rendering to
            carry out the rendering of an individual header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.RenderCells(System.Windows.Media.DrawingContext)">
            <summary>
            Renders all cells to the specified target.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.Insert(MindFusion.Diagramming.Wpf.Lanes.Header,System.Boolean)">
            <summary>
            Inserts a new header after the specified header and returns a reference to it.
            </summary>
            <param name="header">
            The header after which to insert the new header.
            </param>
            <param name="after">
            The relative position of the new header
            </param>
            <returns>
            A reference to the newly created header.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.InsertAfter(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Inserts a new header after the specified header and returns a reference to it.
            </summary>
            <param name="header">
            The header after which to insert the new header.
            </param>
            <returns>
            A reference to the newly created header.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.InsertBefore(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Inserts a new header before the specified header and returns a reference to it.
            </summary>
            <param name="header">
            The header before which to insert the new header.
            </param>
            <returns>
            A reference to the newly created header.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.FindColumn(System.String)">
            <summary>
            Returns the first column header matching the specified caption.
            </summary>
            <param name="title">
            A string containing the header title to look for.
            </param>
            <returns>
            Returns the first column Header that has the specified caption.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.FindRow(System.String)">
            <summary>
            Finds the first row whose header caption matches the specified string.
            </summary>
            <param name="title">
            A string containing the header title to look for.
            </param>
            <returns>
            Returns the first row Header that has the specified caption.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetColumn(System.Int32)">
            <summary>
            Returns the column header with the specified index from the
            bottommost column header level.
            </summary>
            <param name="index">
            An integer value specifying the column index.
            </param>
            <returns>
            A Header object representing the column at the specified index.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetRow(System.Int32)">
            <summary>
            Returns the row header with the specified index from the
            bottommost row header level.
            </summary>
            <param name="index">
            An integer value specifying the row index.
            </param>
            <returns>
            A Header object representing the row at the specified index.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.HitTestHeader(MindFusion.Diagramming.Wpf.Lanes.Header,System.Windows.Rect,System.Object)">
            <summary>
            A callback invoked during header hit-testing to
            carry out the testing of an individual header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetHeaderFromPoint(System.Windows.Point,System.Windows.Rect@)">
            <summary>
            Gets the Header that is located at the specified point.
            </summary>
            <param name="point">
            A Point instance specifying a point within the grid.
            </param>
            <param name="headerBounds">
            A Rect instance that receives the coordinates of the found header.
            </param>
            <returns>
            The found Header object, or null (Nothing in Visual Basic) if
            there is no header located at the specified point.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetCellFromPoint(System.Windows.Point,System.Windows.Rect@)">
            <summary>
            Gets the cell located at the specified point.
            </summary>
            <param name="point">
            A Point instance specifying a point within the grid.
            </param>
            <param name="cellBounds">
            A Rect instance that receives the coordinates of the found cell.
            </param>
            <returns>
            An ICell reference to the found cell, or null (Nothing in
            Visual Basic) if there is no cell located at the specified point.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetCellColumn(MindFusion.Diagramming.Wpf.Lanes.ICell)">
            <summary>
            Returns the column index of the specified cell.
            </summary>
            <param name="cell">
            An ICell object representing a single cell in the grid.
            </param>
            <returns>
            The index of the column that contains cell; -1 if cell
            is not found or refers to a group of cells.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetCellRow(MindFusion.Diagramming.Wpf.Lanes.ICell)">
            <summary>
            Returns the row index of the specified cell.
            </summary>
            <param name="cell">
            An ICell object representing a single cell in the grid.
            </param>
            <returns>
            The index of the row that contains cell; -1 if cell is not
            found or refers to a group of cells.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetColumnIndex(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Returns the 0-based index of the specified column.
            </summary>
            <param name="column">
            A Header instance that represents a grid column.
            </param>
            <returns>
            The index of column, or -1 if the specified header
            represents a row or a group of child columns.
            </returns>
            <remarks>
            Only works for bottommost headers. If the specified
            column is a group header, returns -1.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetRowIndex(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Returns the 0-based index of the specified row.
            </summary>
            <param name="row">
            A Header instance that represents a grid row.
            </param>
            <returns>
            The index of row, or -1 if the specified header represents
            a column or a group of child rows.
            </returns>
            <remarks>
            Only works for bottommost headers. If the specified
            row is a group header, returns -1;
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.OnColumnHeaderAdded(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Handles the HeaderAdded event on the master column header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.OnColumnHeaderRemoved(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Handles the HeaderRemoved event on the master column header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.OnRowHeaderAdded(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Handles the HeaderAdded event on the master row header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.OnRowHeaderRemoved(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Handles the HeaderRemoved event on the master row header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.OnHeaderSizeChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the HeaderSizeChanged event on the master headers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.OnColumnHeaderWidthChanged(MindFusion.Diagramming.Wpf.Lanes.Header,System.Double)">
            <summary>
            Handles the HeaderWidthChanged event on the master column header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.OnColumnHeaderHeightChanged(MindFusion.Diagramming.Wpf.Lanes.Header,System.Double)">
            <summary>
            Handles the HeaderHeightChanged event on the master column header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.OnRowHeaderWidthChanged(MindFusion.Diagramming.Wpf.Lanes.Header,System.Double)">
            <summary>
            Handles the HeaderWidthChanged event on the master row header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.OnRowHeaderHeightChanged(MindFusion.Diagramming.Wpf.Lanes.Header,System.Double)">
            <summary>
            Handles the HeaderHeightChanged event on the master row header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.FindHeader(MindFusion.Diagramming.Wpf.Lanes.HeaderCollection,System.String)">
            <summary>
            Finds the header with the specified title within the
            specified collection by performing deep search.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetHeader(MindFusion.Diagramming.Wpf.Lanes.HeaderCollection,System.Int32)">
            <summary>
            Finds the header with the specified index withing the bottommost
            level of headers in the specified collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.CollectLeaves(MindFusion.Diagramming.Wpf.Lanes.HeaderCollection,System.Collections.Generic.List{MindFusion.Diagramming.Wpf.Lanes.Header})">
            <summary>
            Collects the bottommost headers in the specified collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetIndex(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Gets the global index of the specified header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetLocalIndex(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Returns the index of the specified header within its parent.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetRowLevelCount(System.Int32)">
            <summary>
            Returns the number of row headers in the specified level.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetColumnLevelCount(System.Int32)">
            <summary>
            Returns the number of row headers in the specified level.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetLevelCount(MindFusion.Diagramming.Wpf.Lanes.HeaderCollection,System.Int32,System.Int32)">
            <summary>
            Returns the number of headers at the specified level.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetRowDepth(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Returns the depth of the row headers, optionally excluding the
            sub-tree, defined by the specified header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetColumnDepth(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Returns the depth of the column headers, optionally excluding the
            sub-tree, defined by the specified header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetDepth(MindFusion.Diagramming.Wpf.Lanes.HeaderCollection,MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Returns the depth of the specified tree, optionally excluding
            the sub-tree, defined by the specified header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.CollectHeights(MindFusion.Diagramming.Wpf.Lanes.HeaderCollection,System.Collections.ArrayList,System.Int32)">
            <summary>
            Collects the max heights of the headers in the specified collection
            for each level.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetTotalColumnHeightIf(MindFusion.Diagramming.Wpf.Lanes.Header,System.Double)">
            <summary>
            Returns the total height of all column headers, substituting
            the height of the specified header with the specified value.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.CollectHeightsIf(MindFusion.Diagramming.Wpf.Lanes.HeaderCollection,MindFusion.Diagramming.Wpf.Lanes.Header,System.Double,System.Collections.ArrayList,System.Int32)">
            <summary>
            Collects the max heights of the headers in the specified collection
            for each level, substituting the height of the specified header with
            the specified value.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.CollectWidths(MindFusion.Diagramming.Wpf.Lanes.HeaderCollection,System.Collections.ArrayList,System.Int32)">
            <summary>
            Collects the max widths of the headers in the specified collection
            for each level.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetTotalRowWidthIf(MindFusion.Diagramming.Wpf.Lanes.Header,System.Double)">
            <summary>
            Returns the total width of all row headers, substituting
            the width of the specified header with the specified value.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.CollectWidthsIf(MindFusion.Diagramming.Wpf.Lanes.HeaderCollection,MindFusion.Diagramming.Wpf.Lanes.Header,System.Double,System.Collections.ArrayList,System.Int32)">
            <summary>
            Collects the max widths of the headers in the specified collection
            for each level, substituting the width of the specified header with
            the specified value.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetDepth(MindFusion.Diagramming.Wpf.Lanes.HeaderCollection)">
            <summary>
            Returns the depth of the specified collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetColumnLevelHeight(System.Int32)">
            <summary>
            Returns the height of the specified column header level.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetColumnLevelHeight(System.Int32,MindFusion.Diagramming.Wpf.Lanes.HeaderCollection,System.Int32)">
            <summary>
            Recursively traverses the specified collection to find
            the maximum header height from the columns in the specified level.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetRowLevelWidth(System.Int32)">
            <summary>
            Returns the width of the specified row header level.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetRowLevelWidth(System.Int32,MindFusion.Diagramming.Wpf.Lanes.HeaderCollection,System.Int32)">
            <summary>
            Recursively traverses the specified collection to find
            the maximum header width from the rows in the specified level.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.CollectHeaderBounds(MindFusion.Diagramming.Wpf.Lanes.Header,System.Windows.Rect,System.Object)">
            <summary>
            A callback invoked during header hit-testing to
            carry out the testing of an individual header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.RemoveLastChildDeep(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Removes the last leaf-child of the specified header.
            </summary>
            <remarks>
            The function performs a deep search until a child with no
            children is found.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.EnsureNonEmpty(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Ensures that the specified header has children. Removes the
            header from its parent if it is a leaf, then checks the
            parent.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetHeaderBounds(MindFusion.Diagramming.Wpf.Lanes.Header,System.Boolean)">
            <summary>
            Returns the bounding rectangle of the specified header.
            </summary>
            <param name="header">
            The Header object whose coordinates to return.
            </param>
            <param name="includeSubHeaders">
            true to include the coordinates of the child headers in
            the returned rectangle; otherwise, false.
            </param>
            <returns>
            A Rect that bounds the specified header, and optionally its child headers.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetColumnHeaderBounds">
            <summary>
            Returns the bounding rectangle of all column headers.
            </summary>
            <returns>
            A Rect that bounds all column headers.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetRowHeaderBounds">
            <summary>
            Returns the bounding rectangle of all row headers.
            </summary>
            <returns>
            A Rect that bounds all row headers.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetCellBounds(System.Int32,System.Int32)">
            <summary>
            Returns the bounding rectangle of the cell with the specified row and column.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.GetCellBounds(MindFusion.Diagramming.Wpf.Lanes.ICell)">
            <summary>
            Returns the bounding rectangle of the specified cell.
            </summary>
            <param name="cell">
            An ICell object representing a cell or a group of cells in the grid.
            </param>
            <returns>
            A Rect instance representing the rectangle that bounds the specified
            cell or group of cells.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.ShouldRaiseCellBoundsChanged">
            <summary>
            Returns whether the CellBoundsChanged event should be raised.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.OnCellBoundsChanged(MindFusion.Diagramming.Wpf.Lanes.CellBoundsEventArgs)">
            <summary>
            Raises the CellBoundsChanged event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.OnInvalidated(System.EventArgs)">
            <summary>
            Raises the Invalidated event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.OnAppearanceChanged(System.EventArgs)">
            <summary>
            Raises the AppearanceChanged event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.OnCellChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the CellMatrix.CellChanged event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.OnTopLeftAreaStyleChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the Changed event of the top-left area style.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.OnHeaderAdded(MindFusion.Diagramming.Wpf.Lanes.HeaderEventArgs)">
            <summary>
            Raises the HeaderAdded event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.RaiseHeaderAdded(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Raises the HeaderAdded event from outside the lane grid.
            </summary>
            <remarks>
            This method is for internal use only.
            </remarks>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Grid.columnHeader">
            <summary>
            A fictive column header master.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Grid.rowHeader">
            <summary>
            A fictive row header master.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Grid.cells">
            <summary>
            The collection with all cells in the grid.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Grid.leftMargin">
            <summary>
            The left margin of the grid.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Grid.topMargin">
            <summary>
            The top margin of the grid.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Grid.minHeaderSize">
            <summary>
            The minimum size of a header.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Grid.parent">
            <summary>
            The diagram that contins this lane grid.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Grid.defaultFont">
            <summary>
            The default font.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Grid.topLeftAreaStyle">
            <summary>
            The style of the top left area between row and column headers.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Grid.hookHeaders">
            <summary>
            A flag indicating whether to anchor the headers.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Grid.headersOnTop">
            <summary>
            A flag specifying whether headers are on top of the Z-order.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Grid.alignCells">
            <summary>
            A flag specifying whether to align cells or whether cells would
            overlap their borders with one pixel.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Grid.allowResizeHeaders">
            <summary>
            A flag indicating whether users can resize headers interactively.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Grid.rowWidths">
            <summary>
            The widths of all row levels.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Grid.columnHeights">
            <summary>
            The heights of all column levels;
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Grid.allowInplaceEdit">
            <summary>
            A flag indicating whether header titles can be in-place edited.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.ColumnHeaders">
            <summary>
            Gets the collection with the topmost column headers.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.RowHeaders">
            <summary>
            Gets the collection with the leftmost row headers.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.ColumnCount">
            <summary>
            Gets or sets the number of columns in the grid.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.RowCount">
            <summary>
            Gets or sets the number of rows in the grid.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.Item(MindFusion.Diagramming.Wpf.Lanes.Header,MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Gets the cell or the cluster of cells corresponding
            to the specified row and column.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.Item(System.Int32,System.Int32)">
            <summary>
            Gets the cell at the specified position.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.LeftMargin">
            <summary>
            Gets or sets the offset of the lane grid from the left
            side of the document bounds.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.TopMargin">
            <summary>
            Gets or sets the offset of the lane grid from the top
            side of the document bounds.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.MinHeaderSize">
            <summary>
            Gets or sets the minimum size of a header.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.TotalColumnHeight">
            <summary>
            Gets the total height of all column headers.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.TotalRowWidth">
            <summary>
            Gets the total width of all row headers.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.ColumnDepth">
            <summary>
            Gets the number of levels of the column headers.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.RowDepth">
            <summary>
            Gets the number of levels of the row headers.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.DefaultFont">
            <summary>
            Gets the default font for header titles.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.TopLeftAreaStyle">
            <summary>
            Gets or sets the style of the area above all row headers
            and to the left of all column headers.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.HookHeaders">
            <summary>
            Gets or sets a value indicating whether headers will be
            anchored to the corresponding side (that is, the column
            header anchored to the top side and the row header anchored
            to the left side).
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.HeadersOnTop">
            <summary>
            Gets or sets a value indicating whether lane headers
            appear at the top of the z-order above all other items.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.AlignCells">
            <summary>
            Gets or sets a value indicating whether cells are aligned
            one next to another so that their borders don't overlap.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.AllowResizeHeaders">
            <summary>
            Gets or sets a value indicating whether users can
            resize the headers of the grid interactively.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.RowHeadersWidths">
            <summary>
            Gets or sets an array with double values specifying
            the widths of individual row levels. If a value is
            non-positive or does not exist because the array has
            less arguments than the number of rows, then the
            width is calculated as the maximum width of the rows in
            that level.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.ColumnHeadersHeights">
            <summary>
            Gets or sets an array with double values specifying
            the heights of individual column levels. If a value is
            non-positive or does not exist because the array has
            less arguments than the number of rows, then the
            height is calculated as the maximum height of the columns
            in that level.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.AllowInplaceEdit">
            <summary>
            Gets or sets a value indicating whether header titles can be in-place edited.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Lanes.Grid.CellBoundsChanged">
            <summary>
            Raised when the bounding rectangle of a cell has been changed.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Lanes.Grid.Invalidated">
            <summary>
            Raised when a new row or column has been added or an
            existing row or column has been removed from the grid.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Lanes.Grid.HeaderAdded">
            <summary>
            Raised when a header has been inserted to the grid either interactively
            or through a call to the InsertBefore or InsertAfter methods.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Lanes.Grid.AppearanceChanged">
            <summary>
            Raised when the appearance of any of the underlying
            cells or headers has changed (including when the
            size of the underlying headers or cells has changed).
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.Grid.NotifyHeaderHandler">
            <summary>
            Represents methods that will handle header
            change notifications.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.Grid.NotifyHeaderDimentionHandler">
            <summary>
            Represents methods that will handle header width
            and height change notifications.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.Grid.ProcessHeaderCallback">
            <summary>
            A callback invoked for each header during processing.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.Grid.HitTestCallbackData">
            <summary>
            Represents the data object passed to hit-testing processors.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.HitTestCallbackData.#ctor(System.Windows.Point)">
            <summary>
            Initializes a new instance of the HitTestCallbackData class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.HitTestCallbackData.TestPoint">
            <summary>
            Gets the point to be tested.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.HitTestCallbackData.HitHeader">
            <summary>
            Gets or sets the header that has been hit.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.HitTestCallbackData.HeaderBounds">
            <summary>
            Gets or sets the bounding rectangle of the header
            that has been hit.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.Grid.HeaderBoundsCallbackData">
            <summary>
            Represents the data object passed to header bounds collecting processors.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.HeaderBoundsCallbackData.#ctor(MindFusion.Diagramming.Wpf.Lanes.Header,System.Boolean)">
            <summary>
            Initializes a new instance of the HeaderBoundsCallbackData class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.HeaderBoundsCallbackData.Header">
            <summary>
            Gets the header of interest.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.HeaderBoundsCallbackData.IncludeSubHeaders">
            <summary>
            Gets whether to include sub-headers bounds.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.HeaderBoundsCallbackData.Bounds">
            <summary>
            Gets or sets the collected bounds.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.Grid.RenderCallbackData">
            <summary>
            Represents the data object passed to rendering processors.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.RenderCallbackData.#ctor(System.Windows.Media.DrawingContext)">
            <summary>
            Initializes a new instance of the RenderCallbackData class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.RenderCallbackData.Target">
            <summary>
            Gets the rendering target.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader">
            <summary>
            An abstract header in a lane grid serving as a parent
            to all row or column headers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader.#ctor">
            <summary>
            Initializes a new instance of the MasterHeader class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader.#ctor(MindFusion.Diagramming.Wpf.Lanes.Grid,System.Boolean)">
            <summary>
            Initializes a new instance of the MasterHeader class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader.SetGrid(MindFusion.Diagramming.Wpf.Lanes.Grid)">
            <summary>
            Sets the incorporating grid.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader.NotifyHeaderAdded(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Invoked when a new item has been added somewhere in this header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader.NotifyHeaderRemoved(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Invoked when an item is about to be removed somewhere in this header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader.NotifySizeChanged(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Invoked when the size of an underlying sub-header has been changed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader.NotifyWidthChanged(MindFusion.Diagramming.Wpf.Lanes.Header,System.Double)">
            <summary>
            Invoked when the width of an underlying leaf sub-header
            has been changed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader.NotifyHeightChanged(MindFusion.Diagramming.Wpf.Lanes.Header,System.Double)">
            <summary>
            Invoked when the height of an underlying leaf sub-header
            has been changed.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader.grid">
            <summary>
            The size of the grid header.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader.isRowHeader">
            <summary>
            A flag indicating whether this header is a row or column header.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader.IsColumnHeader">
            <summary>
            Header.IsColumnHeader override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader.IsRowHeader">
            <summary>
            Header.IsRowHeader override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader.MinSize">
            <summary>
            Header.MinSize override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader.DefaultTitleFont">
            <summary>
            Header.DefaultTitleFont override.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader.HeaderAdded">
            <summary>
            Invoked when a new header has been added to this header.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader.HeaderRemoved">
            <summary>
            Invoked when a header is about to be removed from this header.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader.HeaderSizeChanged">
            <summary>
            Invoked when the size of a subheader has changed.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader.HeaderWidthChanged">
            <summary>
            Invoked when the width of a subheader has changed.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader.HeaderHeightChanged">
            <summary>
            Invoked when the height of a subheader has changed.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Lanes.Grid.MasterHeader.HeaderChanged">
            <summary>
            Invoked when the visual appearance of the header has changed.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.HeaderEventArgs">
            <summary>
            Contains the arguments passed to handlers of header-related events.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.HeaderEventArgs.#ctor(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Initializes a new instance of the HeaderEventArgs class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.HeaderEventArgs.Header">
            <summary>
            Gets or sets the header related to the event.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.HeaderValidationEventArgs">
            <summary>
            Contains the arguments passed to event handlers, such as LaneGridHeaderTextEditing.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.HeaderValidationEventArgs.#ctor(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Initializes a new instance of the HeaderValidationEventArgs class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.HeaderValidationEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the current operation.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.EditHeaderTextEventArgs">
            <summary>
            Contains the arguments passed to the LaneGridHeaderTextEdited event handlers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.EditHeaderTextEventArgs.#ctor(MindFusion.Diagramming.Wpf.Lanes.Header,System.String,System.String)">
            <summary>
            Initializes a new instance of the EditHeaderTextEventArgs class.
            </summary>
            <param name="header">
            The Header related to the event.
            </param>
            <param name="oldText">
            The old text of the header.
            </param>
            <param name="newText">
            The new text of the header.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.EditHeaderTextEventArgs.OldText">
            <summary>
            Gets the text that had been displayed in the cell before the
            user edited it.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.EditHeaderTextEventArgs.NewText">
            <summary>
            Gets the text that has just been entered by the user.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.CellBoundsEventArgs">
            <summary>
            Contains the arguments passed to handlers of the CellBoundsChanged event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.CellBoundsEventArgs.#ctor(MindFusion.Diagramming.Wpf.Lanes.ICell,System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Initializes a new instance of the CellBoundsEventArgs class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.CellBoundsEventArgs.Cell">
            <summary>
            Gets the cell which has been resized.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.CellBoundsEventArgs.OldBounds">
            <summary>
            Gets the old bounding rectangle of the cell.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.CellBoundsEventArgs.NewBounds">
            <summary>
            Gets the new bounding rectangle of the cell.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.CellBoundsEventHandler">
            <summary>
            Represents methods that will handle the CellBoundsChanged event.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A CellBoundsEventArgs that contains the event data.
            </param>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Lanes.DrawHeaderEventArgs">
            <summary>
            Contains the arguments passed to the handlers of the DrawHeader event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Lanes.DrawHeaderEventArgs.#ctor(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.Lanes.Header,System.Windows.Rect)">
            <summary>
            Initializes a new instance of the DrawHeaderEventArgs class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.DrawHeaderEventArgs.Target">
            <summary>
            Gets a DrawingContext object whose methods should be used to draw the header.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.DrawHeaderEventArgs.Header">
            <summary>
            Gets a reference to the header being drawn.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Lanes.DrawHeaderEventArgs.Bounds">
            <summary>
            Gets the bounding rectangle of the header being drawn.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.FlowchartLayoutInfo">
            <summary>
            Contains settings for the FlowchartLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.FlowchartLayoutInfo.#ctor">
            <summary>
            Initializes a new instance of the FlowchartLayoutInfo class.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.FlowchartLayoutInfo.Orientation">
            <summary>
            Gets or sets the overall orientation of the arranged diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.FlowchartLayoutInfo.BranchPadding">
            <summary>
            Gets or sets how much space to leave between adjacent decision branches in the flowchart.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.FlowchartLayoutInfo.LinkPadding">
            <summary>
            Gets or sets how much space to leave between adjacent back links designating nested loops.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.FlowchartLayoutInfo.NodeDistance">
            <summary>
            Gets or sets the distance between consecutive nodes in the flowchart.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.FlowchartLayout">
            <summary>
            Performs layouts on flowchart diagrams.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.FlowchartLayout.#ctor">
            <summary>
            Initializes a new instance of the FlowchartLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.FlowchartBranching.CenterOfOriginNodes(System.Collections.Generic.List{MindFusion.Layout.GraphLink},MindFusion.Layout.Orientation)">
            <summary>
            Returns the breadth center of the union rect of the origin nodes of the specified links.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.FlowchartBranching.FarOfOriginNodes(System.Collections.Generic.List{MindFusion.Layout.GraphLink},MindFusion.Layout.Orientation)">
            <summary>
            Returns the far side of the union rect of the origin nodes of the specified links.
            </summary>
            <remarks>
            The far side is the rect's bottom in vertical orientation and its right
            in horizontal orientation.
            </remarks>
        </member>
        <member name="M:MindFusion.Layout.Tools.GetLinkPoints(MindFusion.Layout.GraphLink)">
            <summary>
            Retrieves the calculated points of the specified link. When the
            link points are accessed for the first time, they are obtained
            from the underlyin ILink.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Tools.GetBreadth(MindFusion.Layout.GraphNode,MindFusion.Layout.Orientation)">
            <summary>
            Returns the breadth of the node. The breadth of a node is its width
            in vertical orientation and its height in horizontal orientation.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Tools.GetBCenter(MindFusion.Layout.GraphNode,MindFusion.Layout.Orientation)">
            <summary>
            Gets the center of the node's breadth. The breadth of a node is its width
            in vertical orientation and its height in horizontal orientation.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Tools.GetLength(MindFusion.Layout.GraphNode,MindFusion.Layout.Orientation)">
            <summary>
            Returns the length of the node. The length of a node is its height
            in vertical orientation and its width in horizontal orientation.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Tools.GetLCenter(MindFusion.Layout.GraphNode,MindFusion.Layout.Orientation)">
            <summary>
            Gets the center of the node's length. The length of a node is its height
            in vertical orientation and its width in horizontal orientation.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Tools.GetBNear(MindFusion.Layout.GraphNode,MindFusion.Layout.Orientation)">
            <summary>
            Returns the near side of the node's rect along its breadth. This is its left side
            in vertical orientation and its top side in horizontal orientation.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Tools.GetBFar(MindFusion.Layout.GraphNode,MindFusion.Layout.Orientation)">
            <summary>
            Returns the far side of the node's rect along its breadth. This is its right side
            in vertical orientation and its bottom side in horizontal orientation.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Tools.GetLNear(MindFusion.Layout.GraphNode,MindFusion.Layout.Orientation)">
            <summary>
            Returns the near side of the node's rect along its length. This is its top side
            in vertical orientation and its left side in horizontal orientation.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Tools.GetLFar(MindFusion.Layout.GraphNode,MindFusion.Layout.Orientation)">
            <summary>
            Returns the far side of the node's rect along its length. This is its bottom side
            in vertical orientation and its right side in horizontal orientation.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.IFactory">
            <summary>
            The interface for adapter factories.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.IFactory.CreateNode(MindFusion.Diagramming.Wpf.DiagramNode,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates new node adapter object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.IFactory.CreateLink(MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new link adapter object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.IFactory.FinalizeCreation(System.Boolean)">
            <summary>
            Invoked after the factory has done working in order to complete
            the creation of all newly created objects.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.IFactory.Nodes">
            <summary>
            Collects all nodes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.IFactory.Links">
            <summary>
            Collects all links.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.IFactory.Items">
            <summary>
            Gets a list of the items that should be considered when
            the factory operates.
            </summary>
            <remarks>
            Items outside this collection will be ignored.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.IFactory.IgnoredLinks">
            <summary>
            Gets a list with repeating links that have been rejected due to the IgnoreRepeatingLinks flag.
            </summary>
            <remarks>
            The Origin and Destination of each link are supposed to be set, but the respective link
            collections of both nodes would not contain the ignored link.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.IFactory.IgnoredLinksMap">
            <summary>
            Gets a dictionary representing a mapping between a link and all repeating links (related
            to this link) that have been rejected due to the IgnoreRepeatingLinks flag.
            </summary>
            <remarks>
            The Origin and Destination of each repeating link are supposed to be set, but the respective link
            collections of both nodes would not contain the ignored link.
            </remarks>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.StraightFactory">
            <summary>
            Factory used to create ordinary adapter objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.StraightFactory.#ctor(MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Initializes a new instance of the StraightFactory class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.StraightFactory.CreateNode(MindFusion.Diagramming.Wpf.DiagramNode,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            IFactory.CreateNode implementation that creates node
            adapters of type FCNode.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.StraightFactory.CreateLink(MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            IFactory.CreateLink implementation that creates link
            adapters of type FCLink.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.StraightFactory.CreateNode">
            <summary>
            Create a node of the appropriate for the factory type.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.StraightFactory.CreateLink">
            <summary>
            Create a link of the appropriate for the factory type.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.StraightFactory.FinalizeCreation(System.Boolean)">
            <summary>
            Invoke Create on all newly created links and nodes in order to
            recursively create other links and nodes related with them.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.StraightFactory._objects">
            <summary>
            A collection with the objects that should be processed.
            Objects outside this collection will be ignored.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.StraightFactory._ignoredLinks">
            <summary>
            A list with repeating links that have been rejected due to the IgnoreRepeatingLinks flag.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.StraightFactory._ignoredLinksMap">
            <summary>
            A map with repeating links that have been rejected due to the IgnoreRepeatingLinks flag.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.StraightFactory.Nodes">
            <summary>
            IFactory.Nodes implementation.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.StraightFactory.Links">
            <summary>
            IFactory.Links implementation.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.StraightFactory.Items">
            <summary>
            IFactory.Items implementation.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.StraightFactory.IgnoredLinks">
            <summary>
            Gets a list with repeating links that have been rejected due to the IgnoreRepeatingLinks flag.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.StraightFactory.IgnoredLinksMap">
            <summary>
            Gets a map with repeating links that have been rejected due to the IgnoreRepeatingLinks flag.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.ReversedFactory">
            <summary>
            Factory used to create reversed adapter objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ReversedFactory.#ctor(MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Initializes a new instance of the ReversedFactory class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ReversedFactory.CreateNode">
            <summary>
            Creates a reversed FCNode.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ReversedFactory.CreateLink">
            <summary>
            Creates a reversed FCLink.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.FCNode">
            <summary>
            An ordinary adapter of the INode interface.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCNode.#ctor">
            <summary>
            Initializes a new instance of the FCNode class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCNode.GetAbsoluteNodeMaster(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Returns the highest-in-hierarchy group master of the specified node.
            In case of recursive grouping, the same node is returned. If the
            absolute master is an arrow, null is returned.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCNode.GetAbsoluteNodeMaster(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.DiagramItemCollection,System.Collections.Generic.Dictionary{MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Layout.INode})">
            <summary>
            Returns the highest-in-hierarchy group master of the specified node.
            In case of recursive grouping, returns the node in the group chain
            that is contained in the specified list or the node passed as argument
            if no node is contained in the list.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCNode.Create(MindFusion.Diagramming.Wpf.DiagramNode,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,MindFusion.Diagramming.Wpf.Layout.IFactory)">
            <summary>
            Initializes this node with the specified diagram node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCNode.Create(MindFusion.Diagramming.Wpf.DiagramLink,System.Int32)">
            <summary>
            Initializes this node with the specified MindFusion.Diagramming link.
            The node represents the pointIndex-th point in the link.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCNode.Finalize(MindFusion.Diagramming.Wpf.Layout.IFactory)">
            <summary>
            Finalize the creation of this node, recursively creating
            all links and nodes, related to it.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCNode.GetBounds">
            <summary>
            IElement.GetBounds implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCNode.GetOutLinks(MindFusion.Diagramming.Wpf.Layout.IFactory)">
            <summary>
            Returns a collection of all outgoing links.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCNode.GetInLinks(MindFusion.Diagramming.Wpf.Layout.IFactory)">
            <summary>
            Returns a collection with all incoming links.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCNode.Bounds">
            <summary>
            Gets or sets the node's bounding rectangle.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCNode.OutLinks">
            <summary>
            Get the node's outgoing links. In case of IgnoreLinkDirection - 
            returns all links.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCNode.InLinks">
            <summary>
            Get the node's incoming arrows.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCNode.Traits">
            <summary>
            Contains properties specific to each layout algorithm.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCNode.Weight">
            <summary>
            Gets the weight value associated with the node.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCNode.Node">
            <summary>
            Returns the underlying diagram node.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCNode.RuntimeData">
            <summary>
            Gets or sets custom data associated with this node.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCNode.Center">
            <summary>
            Gets or sets the geometric center of this node.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCNode.IsVirtual">
            <summary>
            Gets or sets a value indicating whether this node is virtual.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.FCLink">
            <summary>
            An ordinary adapter of the ILink interface.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCLink.#ctor">
            <summary>
            Initializes a new instance of the FCLink class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCLink.Create(MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,MindFusion.Diagramming.Wpf.Layout.IFactory)">
            <summary>
            Initializes this link with the specified diagram link.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCLink.Create(MindFusion.Diagramming.Wpf.DiagramLink,System.Int32,System.Double,MindFusion.Diagramming.Wpf.Layout.FCNode,MindFusion.Diagramming.Wpf.Layout.FCNode)">
            <summary>
            Initializes this link directly with the specified origin and destination nodes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCLink.Finalize(MindFusion.Diagramming.Wpf.Layout.IFactory)">
            <summary>
            Finalize the creation of this link, recursively creating
            all links and nodes, related to it.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCLink.SetPoints(System.Collections.ArrayList)">
            <summary>
            Sets the control points of this link.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCLink.UpdatePoints">
            <summary>
            Updates the link's internal state after its points have
            been changed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCLink.GetOppositeNode(MindFusion.Layout.INode)">
            <summary>
            Returns the node at the opposite end of the link.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCLink.Origin">
            <summary>
            Gets the origin node of this link.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCLink.Destination">
            <summary>
            Gets the destination node of this link.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCLink.Points">
            <summary>
            Gets or sets the points defining the link.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCLink.Traits">
            <summary>
            Contains properties specific to each layout algorithm.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCLink.RuntimeData">
            <summary>
            Gets or sets custom data associated with this link.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCLink.Weight">
            <summary>
            Gets the weight of this link.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCLink.Link">
            <summary>
            Gets the underlying DiagramLink object.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCLink.IsVirtual">
            <summary>
            Gets or sets a value indicating whether this node is virtual.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.FCGraph">
            <summary>
            An ordinary adapter of the IGraph interface.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCGraph.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the FCGraph class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCGraph.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FCGraph class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCGraph.#ctor(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection,System.Boolean)">
            <summary>
            Initializes a new instance of the FCGraph class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCGraph.#ctor(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FCGraph class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCGraph.#ctor(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FCGraph class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCGraph.#ctor(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FCGraph class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCGraph.#ctor(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FCGraph class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCGraph.#ctor(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FCGraph class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCGraph.Build(MindFusion.Diagramming.Wpf.DiagramItemCollection,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Builds the graph corresponding to the underlying diagram.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCGraph.Add(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Adds the specified node to the current graph according
            to the initial settings. All nodes and links connected
            to this node and not in the graph will be added as well.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCGraph.Add(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Adds the specified node to the current graph according
            to the initial settings. All nodes and links connected
            to this link and not in the graph will be added as well.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCGraph.GetBounds(System.Boolean)">
            <summary>
            Gets the smallest rectangle containing all graph nodes
            and optionally the graph links.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCGraph.CreateFactory(MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Creates the required factory for building graph elements.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Layout.FCGraph._factory">
            <summary>
            The factory, which can be used to create adapting
            objects out of the original diagram items.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCGraph.Nodes">
            <summary>
            Gets a collection with all nodes in the graph.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCGraph.Links">
            <summary>
            Gets a collection with all links in the graph.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCGraph.IgnoredLinks">
            <summary>
            Gets a list with repeating links that have been rejected due to the IgnoreRepeatingLinks flag.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCGraph.IgnoredLinksMap">
            <summary>
            Gets a map with repeating links that have been rejected due to the IgnoreRepeatingLinks flag.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCGraph.DocRect">
            <summary>
            Gets the bounding rectangle of the Diagram document.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCGraph.Directed">
            <summary>
            Gets a value indicating whether the graph is directed.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.FCGraph.Root">
            <summary>
            Gets the root node of this graph (assuming that the graph is tree).
            If there is no root node, returns null.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.ReversedFCNode">
            <summary>
            A reversed adapter of the INode interface.
            </summary>
            <remarks>
            'Reversed' means that this node's outgoing and incoming
            arrows are swapped.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ReversedFCNode.#ctor">
            <summary>
            Initializes a new instance of the ReversedFCNode class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.ReversedFCNode.OutLinks">
            <summary>
            Gets a collection with all outgoing links of this node.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.ReversedFCNode.InLinks">
            <summary>
            Gets a collection with all incoming links of this node.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.ReversedFCLink">
            <summary>
            A reversed adapter of the ILink interface.
            </summary>
            <remarks>
            'Reversed' means that this link's origin and destination
            are swapped, i.e. the link's direction is reversed.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ReversedFCLink.#ctor">
            <summary>
            Initializes a new instance of the ReversedFCLink class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.ReversedFCLink.Origin">
            <summary>
            Gets the origin node of this link.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Layout.ReversedFCLink.Destination">
            <summary>
            Gets the destination node of this link.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.ReversedFCGraph">
            <summary>
            A reversed adapter of the ILink interface.
            </summary>
            <remarks>
            Reversed means that the direction of this graph is reversed, i.e.
            it is composed of reversed nodes and links.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ReversedFCGraph.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the ReversedFCGraph class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ReversedFCGraph.#ctor(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection,System.Boolean)">
            <summary>
            Initializes a new instance of the ReversedFCGraph class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ReversedFCGraph.#ctor(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ReversedFCGraph class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ReversedFCGraph.#ctor(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ReversedFCGraph class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ReversedFCGraph.#ctor(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ReversedFCGraph class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ReversedFCGraph.#ctor(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ReversedFCGraph class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ReversedFCGraph.#ctor(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.DiagramItemCollection,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ReversedFCGraph class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.ReversedFCGraph.CreateFactory(MindFusion.Diagramming.Wpf.DiagramItemCollection)">
            <summary>
            Returns a new ReversedFactory object.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Layout.FCGraphBuilder">
            <summary>
            An implementation of the IGraphBuilder.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCGraphBuilder.#ctor(MindFusion.Diagramming.Wpf.Diagram,System.Boolean)">
            <summary>
            Initializes a new instance of the FCGraphBuilder class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Layout.FCGraphBuilder.Create">
            <summary>
            Creates a new empty graph.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Factory">
            <summary>
            Provides shortcut methods for creating and adding instances of
            the standard WpfDiagram item types. Call the class methods
            through the Factory property of the Diagram class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the Factory class over
            the specified Diagram.
            </summary>
            <param name="diagram">
            The Diagram object for which to create the new factory.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateShapeNode(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new ShapeNode instance at the specified position with
            the specified size and adds it to the Nodes collection of the
            underlying diagram.
            </summary>
            <param name="x">
            The x-coordinate of the upper-left corner of the new node.
            </param>
            <param name="y">
            The y-coordinate of the upper-left corner of the new node.
            </param>
            <param name="width">
            The width of the new node.
            </param>
            <param name="height">
            The height of the new node.
            </param>
            <returns>
            The newly created ShapeNode instance.
            </returns>
            <remarks>
            The method creates a shape node at the position specified by x and y.
            The size of the node is set by width and height.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateShapeNode(System.Windows.Point,System.Windows.Size)">
            <summary>
            Creates a new ShapeNode instance at the specified position with
            the specified size and adds it to the Nodes collection of the
            underlying diagram.
            </summary>
            <param name="location">
            The position of the new node.
            </param>
            <param name="size">
            The size of the new node.
            </param>
            <returns>
            The newly created ShapeNode instance.
            </returns>
            <remarks>
            The method creates a shape node at the position specified by location.
            The size of the node is set by size.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateShapeNode(System.Windows.Rect)">
            <summary>
            Creates a new ShapeNode instance with the specified dimensions
            and adds it to the Nodes collection of the underlying diagram.
            </summary>
            <param name="bounds">
            The bounding rectangle of the new node.
            </param>
            <returns>
            The newly created ShapeNode instance.
            </returns>
            <remarks>
            The method creates a shape node with dimensions specified by bounds.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateShapeNode(System.Double,System.Double,System.Double,System.Double,MindFusion.Diagramming.Wpf.Shape)">
            <summary>
            Creates a new ShapeNode instance at the specified position with
            the specified size and shape, and adds it to the Nodes collection
            of the underlying diagram.
            </summary>
            <param name="x">
            The x-coordinate of the upper-left corner of the new node.
            </param>
            <param name="y">
            The y-coordinate of the upper-left corner of the new node.
            </param>
            <param name="width">
            The width of the new node.
            </param>
            <param name="height">
            The height of the new node.
            </param>
            <param name="shape">
            The shape of the new node.
            </param>
            <returns>
            The newly created ShapeNode instance.
            </returns>
            <remarks>
            The method creates a shape node at the position specified by x and y.
            The size of the node is set by width and height. The shape of the
            new node is specified by shape.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateShapeNode(System.Windows.Point,System.Windows.Size,MindFusion.Diagramming.Wpf.Shape)">
            <summary>
            Creates a new ShapeNode instance at the specified position with
            the specified size and shape, and adds it to the Nodes collection
            of the underlying diagram.
            </summary>
            <param name="location">
            The position of the new node.
            </param>
            <param name="size">
            The size of the new node.
            </param>
            <param name="shape">
            The shape of the new node.
            </param>
            <returns>
            The newly created ShapeNode instance.
            </returns>
            <remarks>
            The method creates a shape node at the position specified by location.
            The size of the node is set by size. The shape of the new node is
            specified by shape.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateShapeNode(System.Windows.Rect,MindFusion.Diagramming.Wpf.Shape)">
            <summary>
            Creates a new ShapeNode instance with the specified dimensions and
            shape, and adds it to the Nodes collection of the underlying diagram.
            </summary>
            <param name="bounds">
            The bounding rectangle of the new node.
            </param>
            <param name="shape">
            The shape of the new node.
            </param>
            <returns>
            The newly created ShapeNode instance.
            </returns>
            <remarks>
            The method creates a shape node with dimensions specified by bounds.
            The shape of the new node is specified by shape.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateTableNode(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new TableNode instance at the specified position
            with the specified size and adds it to the Nodes collection
            of the underlying diagram.
            </summary>
            <param name="x">
            The x-coordinate of the upper-left corner of the new table.
            </param>
            <param name="y">
            The y-coordinate of the upper-left corner of the new table.
            </param>
            <param name="width">
            The width of the new table.
            </param>
            <param name="height">
            The height of the new table.
            </param>
            <returns>
            The newly created TableNode instance.
            </returns>
            <remarks>
            The method creates a table node at the position specified by x and y.
            The size of the node is set by width and height.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateTableNode(System.Windows.Point,System.Windows.Size)">
            <summary>
            Creates a new TableNode instance at the specified position with
            the specified size and adds it to the Nodes collection of the
            underlying diagram.
            </summary>
            <param name="location">
            The position of the new table.
            </param>
            <param name="size">
            The size of the new table.
            </param>
            <returns>
            The newly created TableNode instance.
            </returns>
            <remarks>
            The method creates a table node at the position specified by location.
            The size of the node is set by size.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateTableNode(System.Windows.Rect)">
            <summary>
            Creates a new TableNode instance with the specified dimensions
            and adds it to the Nodes collection of the underlying diagram.
            </summary>
            <param name="bounds">
            The bounding rectangle of the new table.
            </param>
            <returns>
            The newly created TableNode instance.
            </returns>
            <remarks>
            The method creates a table node with dimensions specified by bounds.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateTableNode(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Creates a new TableNode instance at the specified position with
            the specified size and the specified number of columns and rows,
            and adds it to the Nodes collection of the underlying diagram.
            </summary>
            <param name="x">
            The x-coordinate of the upper-left corner of the new table.
            </param>
            <param name="y">
            The y-coordinate of the upper-left corner of the new table.
            </param>
            <param name="width">
            The width if the new table.
            </param>
            <param name="height">
            The height of the new table.
            </param>
            <param name="columns">
            The initial number of columns in the table.
            </param>
            <param name="rows">
            The initial number of rows in the table.
            </param>
            <returns>
            The newly created TableNode instance.
            </returns>
            <remarks>
            The method creates a table node at the position specified by x and y.
            The size of the node is set by width and height. The initial number
            of columns and rows in the table is specified by columns and rows
            respectively.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateTableNode(System.Windows.Point,System.Windows.Size,System.Int32,System.Int32)">
            <summary>
            Creates a new TableNode instance at the specified position with
            the specified size and with the specified number of columns and
            rows, and adds it to the Nodes collection of the underlying diagram.
            </summary>
            <param name="location">
            The position of the new table.
            </param>
            <param name="size">
            The size of the new table.
            </param>
            <param name="columns">
            The initial number of columns in the table.
            </param>
            <param name="rows">
            The initial number of rows in the table.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateTableNode(System.Windows.Rect,System.Int32,System.Int32)">
            <summary>
            Creates a new TableNode instance with the specified dimensions
            and with the specified number of columns and rows, and adds it
            to the Nodes collection of the underlying diagram.
            </summary>
            <param name="bounds">
            The bounding rectangle of the new table.
            </param>
            <param name="columns">
            The initial number of columns in the table.
            </param>
            <param name="rows">
            The initial number of rows in the table.
            </param>
            <returns>
            The newly created TableNode instance.
            </returns>
            <remarks>
            The method creates a table node with dimensions specified by
            bounds. The initial number of columns and rows in the table is
            specified by columns and rows respectively.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateContainerNode(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new ContainerNode instance at the specified location
            with the specified size and adds it to the Nodes collection of
            the underlying diagram.
            </summary>
            <param name="x">
            The x-coordinate of the upper-left corner of the new node.
            </param>
            <param name="y">
            The y-coordinate of the upper-left corner of the new node.
            </param>
            <param name="width">
            The width of the new node.
            </param>
            <param name="height">
            The height of the new node.
            </param>
            <returns>
            The newly created ContainerNode instance.
            </returns>
            <remarks>
            The method creates a container node at the position specified
            by x and y. The size of the container is set by width and height.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateContainerNode(System.Windows.Point,System.Windows.Size)">
            <summary>
            Creates a new ContainerNode instance at the specified location with
            the specified size and adds it to the Nodes collection of the
            underlying diagram.
            </summary>
            <param name="location">
            The location of the ContainerNode object.
            </param>
            <param name="size">
            The size of the ContainerNode object.
            </param>
            <returns>
            The newly created ContainerNode instance.
            </returns>
            <remarks>
            The method creates a container node at the position specified
            by location. The size of the container is set by size.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateContainerNode(System.Windows.Rect)">
            <summary>
            Creates a new ContainerNode instance with the specified dimensions
            and adds it to the Nodes collection of the underlying diagram.
            </summary>
            <param name="bounds">
            The initial bounding rectangle of the new node.
            </param>
            <returns>
            The newly created ContainerNode instance.
            </returns>
            <remarks>
            The method creates a container node with the position and size
            specified by bounds.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateContainerNode(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Creates a new ContainerNode instance at the specified location with
            the specified size, optionally foldable, and adds it to the Nodes
            collection of the underlying diagram.
            </summary>
            <param name="x">
            The x-coordinate of the upper-left corner of the new node.
            </param>
            <param name="y">
            The y-coordinate of the upper-left corner of the new node.
            </param>
            <param name="width">
            The width of the new node.
            </param>
            <param name="height">
            The height of the new node.
            </param>
            <param name="foldable">
            true if the container can be folded; otherwise, false.
            </param>
            <returns>
            The newly created ContainerNode instance.
            </returns>
            <remarks>
            The method creates a container node at the position specified by
            x and y. The size of the container is set by width and height.
            The parameter foldable specifies whether the container node is
            initially foldable.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateContainerNode(System.Windows.Point,System.Windows.Size,System.Boolean)">
            <summary>
            Creates a new ContainerNode instance at the specified location with
            the specified size, optionally foldable, and adds it to the Nodes
            collection of the underlying diagram.
            </summary>
            <param name="location">
            The location of the ContainerNode object.
            </param>
            <param name="size">
            The newly created ContainerNode instance.
            </param>
            <param name="foldable">
            true if the container can be folded; otherwise, false.
            </param>
            <returns>
            The newly created ContainerNode instance.
            </returns>
            <remarks>
            The method creates a container node at the position specified
            by location. The size of the container is set by size. The
            parameter foldable specifies whether the container node is
            initially foldable.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateContainerNode(System.Windows.Rect,System.Boolean)">
            <summary>
            Creates a new ContainerNode instance with the specified dimensions,
            optionally foldable, and adds it to the Nodes collection of the
            underlying diagram.
            </summary>
            <param name="bounds">
            The initial bounding rectangle of the new node.
            </param>
            <param name="foldable">
            true if the container can be folded; otherwise, false.
            </param>
            <returns>
            The newly created ContainerNode instance.
            </returns>
            <remarks>
            The method creates a container node with the position and size
            specified by bounds. The parameter foldable specifies whether
            the container node is initially foldable.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateTreeViewNode(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new TreeViewNode instance at the specified position with
            the specified size and adds it to the Nodes collection of the
            underlying diagram.
            </summary>
            <param name="x">
            The x-coordinate of the upper-left corner of the new node.
            </param>
            <param name="y">
            The y-coordinate of the upper-left corner of the new node.
            </param>
            <param name="width">
            The width of the new node.
            </param>
            <param name="height">
            The height of the new node.
            </param>
            <returns>
            The newly created TreeViewNode instance.
            </returns>
            <remarks>
            The method creates a treeview node at the position specified by x and y.
            The size of the node is set by width and height.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateTreeViewNode(System.Windows.Point,System.Windows.Size)">
            <summary>
            Creates a new TreeViewNode instance at the specified position with
            the specified size and adds it to the Nodes collection of the
            underlying diagram.
            </summary>
            <param name="location">
            The position of the new node.
            </param>
            <param name="size">
            The size of the new node.
            </param>
            <returns>
            The newly created TreeViewNode instance.
            </returns>
            <remarks>
            The method creates a treeview node at the position specified by location.
            The size of the node is set by size.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateTreeViewNode(System.Windows.Rect)">
            <summary>
            Creates a new TreeViewNode instance with the specified dimensions
            and adds it to the Nodes collection of the underlying diagram.
            </summary>
            <param name="bounds">
            The bounding rectangle of the new node.
            </param>
            <returns>
            The newly created TreeViewNode instance.
            </returns>
            <remarks>
            The method creates a treeview node with dimensions specified by bounds.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateTemplatedNode(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new TemplatedNode instance at the specified position with
            the specified size and adds it to the Nodes collection of the
            underlying diagram.
            </summary>
            <param name="x">
            The x-coordinate of the upper-left corner of the new node.
            </param>
            <param name="y">
            The y-coordinate of the upper-left corner of the new node.
            </param>
            <param name="width">
            The width of the new node.
            </param>
            <param name="height">
            The height of the new node.
            </param>
            <returns>
            The newly created TemplatedNode instance.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateTemplatedNode(System.Windows.Point,System.Windows.Size)">
            <summary>
            Creates a new TemplatedNode instance at the specified position with
            the specified size and adds it to the Nodes collection of the
            underlying diagram.
            </summary>
            <param name="location">
            The position of the new node.
            </param>
            <param name="size">
            The size of the new node.
            </param>
            <returns>
            The newly created TemplatedNode instance.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateTemplatedNode(System.Windows.Rect)">
            <summary>
            Creates a new TemplatedNode instance with the specified dimensions
            and adds it to the Nodes collection of the underlying diagram.
            </summary>
            <param name="bounds">
            The bounding rectangle of the new node.
            </param>
            <returns>
            The newly created TemplatedNode instance.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateDiagramLink(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Creates a new DiagramLink instance between the specified nodes
            and adds it to the Links collection of the underlying diagram.
            </summary>
            <param name="origin">
            The origin node.
            </param>
            <param name="destination">
            The destination node.
            </param>
            <returns>
            The newly created DiagramLink instance.
            </returns>
            <remarks>
            The method creates a link connecting the nodes specified by
            origin and destination.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateDiagramLink(MindFusion.Diagramming.Wpf.ShapeNode,System.Int32,MindFusion.Diagramming.Wpf.ShapeNode,System.Int32)">
            <summary>
            Creates a new DiagramLink instance between the specified nodes
            and adds it to the Links collection of the underlying diagram.
            </summary>
            <param name="origin">
            The origin node.
            </param>
            <param name="originAnchor">
            The index of an anchor point within the origin node's AnchorPattern.
            </param>
            <param name="destination">
            The destination node.
            </param>
            <param name="destAnchor">
            The index of an anchor point within the destination node's AnchorPattern.
            </param>
            <returns>
            The newly created DiagramLink instance.
            </returns>
            <remarks>
            The method creates a link connecting the shape nodes specified by
            origin and destination.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateDiagramLink(MindFusion.Diagramming.Wpf.TableNode,MindFusion.Diagramming.Wpf.TableNode)">
            <summary>
            Creates a new DiagramLink instance between the specified tables
            and adds it to the Links collection of the underlying diagram.
            </summary>
            <param name="origin">
            The origin node.
            </param>
            <param name="destination">
            The destination node.
            </param>
            <returns>
            The newly created DiagramLink instance.
            </returns>
            <remarks>
            The method creates a link connecting the tables specified by
            origin and destination.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateDiagramLink(MindFusion.Diagramming.Wpf.TableNode,System.Int32,MindFusion.Diagramming.Wpf.TableNode,System.Int32)">
            <summary>
            Creates a new DiagramLink instance between the specified tables
            and adds it to the Links collection of the underlying diagram.
            </summary>
            <param name="origin">
            The origin node.
            </param>
            <param name="originRow">
            The zero-based index of the origin table row of the new link.
            </param>
            <param name="destination">
            The destination node.
            </param>
            <param name="destRow">
            The zero-based index of the destination table row of the new link.
            </param>
            <returns>
            The newly created DiagramLink instance.
            </returns>
            <remarks>
            The method creates a link connecting the tables specified by
            origin and destination.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateDiagramLink(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.TableNode,System.Int32)">
            <summary>
            Creates a new DiagramLink instance between the specified nodes
            and the specified table, and adds it to the Links collection
            of the underlying diagram.
            </summary>
            <param name="origin">
            The origin node.
            </param>
            <param name="destination">
            The destination node.
            </param>
            <param name="destRow">
            The zero-based index of the destination table row of the new link.
            </param>
            <returns>
            The newly created DiagramLink instance.
            </returns>
            <remarks>
            The method creates a link connecting the node specified by origin
            and the table specified by destination.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateDiagramLink(MindFusion.Diagramming.Wpf.TableNode,System.Int32,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Creates a new DiagramLink instance between the specified table
            and the specified node, and adds it to the Links collection of
            the underlying diagram.
            </summary>
            <param name="origin">
            The origin node.
            </param>
            <param name="originRow">
            The zero-based index of the destination table row of the new link.
            </param>
            <param name="destination">
            The destination node.
            </param>
            <returns>
            The newly created DiagramLink instance.
            </returns>
            <remarks>
            The method creates a link connecting the table specified by origin
            and the node specified by destination.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateDiagramLink(MindFusion.Diagramming.Wpf.DiagramNode,System.Windows.Point)">
            <summary>
            Creates a new DiagramLink instance between the specified node
            and the specified point, and adds it to the Links collection
            of the underlying diagram.
            </summary>
            <param name="origin">
            The origin node.
            </param>
            <param name="destination">
            The destination point.
            </param>
            <returns>
            The newly created DiagramLink instance.
            </returns>
            <remarks>
            The method creates a link connecting the node specified by origin
            and the point specified by destination.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateDiagramLink(System.Windows.Point,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Creates a new DiagramLink instance between the specified point
            and the specified node, and adds it to the Links collection of
            the underlying diagram.
            </summary>
            <param name="origin">
            The origin point.
            </param>
            <param name="destination">
            The destination node.
            </param>
            <returns>
            The newly created DiagramLink instance.
            </returns>
            <remarks>
            The method creates a link connecting the point specified by origin
            and the node specified by destination.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateDiagramLink(System.Windows.Point,System.Windows.Point)">
            <summary>
            Creates a new DiagramLink instance between the specified points
            and adds it to the Links collection of the underlying diagram.
            </summary>
            <param name="origin">
            The origin point.
            </param>
            <param name="destination">
            The destination point.
            </param>
            <returns>
            The newly created DiagramLink instance.
            </returns>
            <remarks>
            The method creates a link connecting the points specified by
            origin and destination.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Factory.CreateGroup(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Creates a new hierarchical Group with the specified main item.
            </summary>
            <param name="mainItem">
            The DiagramItem around which the group would be built.
            </param>
            <returns>
            The newly crated Group instance if successfully created;
            otherwise null (Nothing in Visual Basic).
            </returns>
            <remarks>
            Use this method to create an hierarchical group of items. Attach
            subordinated items via the various Group members.
            </remarks>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DiagramPaginator">
            <summary>
            Implements pagination of a Diagram document.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramPaginator.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Contructs new instance
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramPaginator.#ctor(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.PrintOptions)">
            <summary>
            Contructs new instance
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramPaginator.GetPage(System.Int32)">
            <summary>
            Override DocumentPaginator.GetPage(int pageNumber)
            </summary>
            <param name="pageNumber"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramPaginator.GetPageRect(System.Int32)">
            <summary>
            Returns the coordinates of the diagram region that is contained within a page.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramPaginator.PrintHeader(System.Windows.Media.DrawingContext,System.Int32)">
            <summary>
            Renders the print page header during printing and previewing.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramPaginator.IsPageCountValid">
            <summary>
            Override DocumentPaginator.IsPageCountValid
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramPaginator.PageCount">
            <summary>
            Override DocumentPaginator.PageCount
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramPaginator.PageSize">
            <summary>
            Override DocumentPaginator.PageSize
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramPaginator.Source">
            <summary>
            Override DocumentPaginator.Source
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Constants">
            <summary>
            Contains various global constants, also provides
            measure unit independent constants.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Constants.E">
            <summary>
            A very small positive real number (0.01).
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Constants.GetFitTextStep(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets a value used when fitting the size of a node
            to its contained text.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Constants.GetInflation(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets a relax value used when testing object intersections.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Constants.GetTableHeaderOffset(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets the width of a header row icon.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Constants.GetRouteGridSize(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets the default size of the link routing grid.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Constants.GetScrollerWdt(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets the width of the scroller manipulator icon.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Constants.GetMinItemSize(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets the minimum size for a diagram node that can
            be achieved interactively.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Constants.GetRoundRectArc(MindFusion.Diagramming.Wpf.GraphicsUnit,System.Double)">
            <summary>
            Gets the radius of the arc of the rounded rectangle node shape.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Constants.GetMillimeter(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets the size of one millimeter.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Constants.GetExpandIconSize(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets the size of the expand/collapse manipulator icon.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Constants.GetMinArrowheadSize(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets the minimum allowed size of an arrowhead.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Constants.GetContainerFolderPadding(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets the padding around the folding button of a container node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Constants.GetAutoScroll(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets the number of units to scroll the control during
            autoscrolling operation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Constants.GetReflWth2(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets the initial distance between adjacent control points
            of a reflexive link along the X-axis.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Constants.GetReflHth(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets the initial distance between adjacent control points
            of a reflexive arrow along the Y-axis.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Constants.GetInch(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets the size of one inch.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Constants.GetHalfInch(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets the size of a half inch.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Constants.GetLineHitTest(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets a value specifying relative distance from an
            arrow used during hit-testing operations.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Constants.GetSelPtTest(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets a relax value used during selection handles
            hit-testing.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Constants.GetPixel(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets the size of one pixel.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Constants.GetMarkSize(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets the size of an anchor point mark.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Constants.IdentityMatrix">
            <summary>
            The identity matrix.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Constants.NoAnchorPattern">
            <summary>
            A constant indicating no anchor pattern during
            binary serialization.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.HandlesVisualStyle">
            <summary>
            Defines the Pen and Brush objects used to draw items' adjustment handles.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.HandlesVisualStyle.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the HandlesVisualStyle class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.HandlesVisualStyle.SaveToXml(System.String,System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the style to XML.
            </summary>
            <param name="elementName">The name of the element that describes the style.</param>
            <param name="parentElement">The parent XML element.</param>
            <param name="context">
            An XmlPersistContext object providing contextual information
            about the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.HandlesVisualStyle.LoadFromXml(System.String,System.String,System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Loads the style from XML.
            </summary>
            <param name="elementName">The name of the element that describes the style.</param>
            <param name="colorElementName">The name of an element that contains a fallback color.</param>
            <param name="parentElement">The parent XML element.</param>
            <param name="context">
            An XmlPersistContext object providing contextual information
            about the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.HandlesVisualStyle.HandlePen">
            <summary>
            Gets or sets a Pen used to draw the border of selection handles.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.HandlesVisualStyle.HandleBrush">
            <summary>
            Gets or sets a Brush used to fill the interior of selection handles.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.HandlesVisualStyle.DashPen">
            <summary>
            Gets or sets a Pen used to draw dashed selection frames.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.HandlesVisualStyle.HatchBrush">
            <summary>
            Gets or sets a Brush used to draw hatch frames.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.HandlesVisualStyle.PatternBrush">
            <summary>
            Gets or sets a Brush used to draw selection frames for the MoveOnly style.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.PartitionMethod">
            <summary>
            Identifies graph partitioning methods supported by CompositeLayout.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.PartitionMethod.BiconnectedComponents">
            <summary>
            Partition graphs by their biconnected components.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.PartitionMethod.ShortestPath">
            <summary>
            Partition graphs by node paths distance.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.PartitionMethod.Custom">
            <summary>
            Custom partitioning.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.CompositeLayoutInfo">
            <summary>
            Contains settings for the CompositeLayoutInfo class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CompositeLayoutInfo.#ctor">
            <summary>
            Initializes a new instance of the CompositeLayoutInfo class.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.CompositeLayoutInfo.PartitionMethod">
            <summary>
            Gets or sets the method to use when finding partitions within the source graph.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.CompositeLayoutInfo.DesiredSubgraphSize">
            <summary>
            Gets or sets the preferred number of vertices in the partitions allocated by the layout.
            </summary>
            <remarks>
            Setting this property to 0 or less will cause an exception.
            </remarks>
        </member>
        <member name="P:MindFusion.Layout.CompositeLayoutInfo.Tolerance">
            <summary>
            Gets or sets a multiplier to be applied to the DesiredGraphSize.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.CompositeLayoutInfo.EmphasizeTrees">
            <summary>
            Gets or sets a value indicating whether the cut-vertices of tree subgraphs are included
            to the corresponding trees.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.CompositeLayoutInfo.MasterLayout">
            <summary>
            Gets or sets a method that will be invoked to apply a layout globally on the graph.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.CompositeLayoutInfo.SubtreeLayout">
            <summary>
            Gets or sets a method that will be invoked to apply a layout to subgraphs representing trees.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.CompositeLayoutInfo.SubgraphLayout">
            <summary>
            Gets or sets a method that will be invoked to apply a layout to general subgraphs.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.CompositeLayoutInfo.CustomLayout">
            <summary>
            Gets or sets a method that will be invoked to apply a custom layout to subgraphs.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.CompositeLayoutInfo.RotateSubgraphs">
            <summary>
            Gets or sets a value indicating whether subgraphs are rotated to minimize
            intersections with cross-partition links.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CompositeLayout.#ctor">
            <summary>
            Initializes a new instance of the CompositeLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CompositeLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.CompositeLayoutInfo)">
            <summary>
            Applies the layout to the specified graph using the specified settings.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CompositeLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.CompositeLayoutInfo,MindFusion.Layout.LayoutProgress)">
            <summary>
            Applies the layout to the specified graph using the specified settings
            and progress callback delegate.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CompositeLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.CompositeLayoutInfo,System.Collections.Generic.List{MindFusion.Layout.NodeCollection},MindFusion.Layout.LayoutProgress)">
            <summary>
            Applies the layout to the specified graph using the specified settings,
            custom partition and progress callback delegate.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CompositeLayout.GraphFromNodes(MindFusion.Layout.IGraph,System.Collections.CollectionBase,System.Collections.Generic.Dictionary{MindFusion.Graphs.Vertex,MindFusion.Layout.INode},System.Collections.Generic.Dictionary{MindFusion.Graphs.Edge,MindFusion.Layout.ILink})">
            <summary>
            Creates a MindFusion.Graphs.Graph from the specified node subset of the specified IGraph.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CompositeLayout.OffsetSubgraph(MindFusion.Layout.ElementCollection,MindFusion.Layout.INode)">
            <summary>
            Offset the subgraph so that its center coincides with the specified node center.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.CircularLayoutInfo">
            <summary>
            Contains settings for the CircularLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CircularLayoutInfo.#ctor">
            <summary>
            Initializes a new instance of the CircularLayoutInfo class.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.CircularLayoutInfo.Margins">
            <summary>
            Gets or sets the distance between the top-left corner
            of the smallest rectangle containing the arranged tree
            and the top-left point of the document bounds.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.CircularLayoutInfo.Radius">
            <summary>
            Gets or sets tha radius of the layout circle.
            </summary>
            <remarks>
            If this property is set to 0, the layout will try to find an
            appropriate radius depending on the number and size of the participating nodes.
            </remarks>
        </member>
        <member name="P:MindFusion.Layout.CircularLayoutInfo.SiftingRounds">
            <summary>
            Gets or sets the number of sifts to perform during the layout.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.CircularLayout">
            <summary>
            Performs circular layout on a graph.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CircularLayout.#ctor">
            <summary>
            Initializes a new instance of the CircularLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CircularLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.CircularLayoutInfo)">
            <summary>
            Applies the layout to the specified graph using the specified settings.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CircularLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.CircularLayoutInfo,MindFusion.Layout.LayoutProgress)">
            <summary>
            Applies the layout to the specified graph using the specified settings
            and progress callback delegate.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.CircularLayout.graph">
            <summary>
            The GraphLib representation of the graph to be arranged.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.CircularLayout.graphToDiagMapNodes">
            <summary>
            Maps GraphLib vertices to INode objects.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.CircularLayout.graphToDiagMapLinks">
            <summary>
            Maps GraphLib edges to ILink objects.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.AddItemCmd">
            <summary>
            Implements creation of new diagram items.
            </summary>
            <remarks>
            Instances of this class are implicitly created by WpfDiagram
            in response to users drawing new items or to programmatically
            calling the Add method of the diagram's Nodes or Links collections.
            References to those instances are passed to handlers of the
            ActionRecorded, ActionUndone and ActionRedone events.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.AddItemCmd.#ctor(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Initializes a new instance of the AddItemCmd class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.AddItemCmd.Execute(System.Boolean)">
            <summary>
            Carries out the command action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.AddItemCmd.Undo">
            <summary>
            Undoes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.AddItemCmd.Redo">
            <summary>
            Redoes the command action.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.AddItemCmd.Item">
            <summary>
            Gets a reference to the newly added item.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Behaviors.DrawTreeViewsBehavior">
            <summary>
            This class is used when the diagram behavior is set to Behavior.DrawContainers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.DrawTreeViewsBehavior.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the DrawContainersBehavior class.
            </summary>
            <param name="diagram">
            The Diagram this behavior will be associated with.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.DrawTreeViewsBehavior.CreateNode">
            <summary>
            DrawNodesBehavior.CreateNode override.
            </summary>
            <returns>
            An instance of the TreeViewNode class.
            </returns>
        </member>
        <member name="T:MindFusion.Text.Styles">
            <summary>
            Defines styles that can be applied to styled text.
            </summary>
        </member>
        <member name="F:MindFusion.Text.Styles.Regular">
            <summary>
            Indicates regular text.
            </summary>
        </member>
        <member name="F:MindFusion.Text.Styles.Bold">
            <summary>
            Indicates bold text.
            </summary>
        </member>
        <member name="F:MindFusion.Text.Styles.Italic">
            <summary>
            Indicates italic text.
            </summary>
        </member>
        <member name="F:MindFusion.Text.Styles.Underline">
            <summary>
            Indicates underlined text.
            </summary>
        </member>
        <member name="F:MindFusion.Text.Styles.Sup">
            <summary>
            Indicates superscript.
            </summary>
        </member>
        <member name="F:MindFusion.Text.Styles.Sub">
            <summary>
            Indicates subscript.
            </summary>
        </member>
        <member name="F:MindFusion.Text.Styles.Color">
            <summary>
            Indicates colored text.
            </summary>
        </member>
        <member name="T:MindFusion.Text.Word">
            <summary>
            Represents succession of either printable characters,
            whitespaces or linebreaks.
            </summary>
        </member>
        <member name="M:MindFusion.Text.Word.#cctor">
            <summary>
            Static initialization.
            </summary>
        </member>
        <member name="M:MindFusion.Text.Word.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Word class.
            </summary>
        </member>
        <member name="M:MindFusion.Text.Word.UpdateMeasures(MindFusion.Diagramming.Wpf.ITextAttributes)">
            <summary>
            Updates the width of the word as it would be
            when drawn with the specified font.
            </summary>
        </member>
        <member name="M:MindFusion.Text.Word.CreateFont(MindFusion.Diagramming.Wpf.ITextAttributes)">
            <summary>
            Applies the style of the word to the specified font.
            </summary>
        </member>
        <member name="P:MindFusion.Text.Word.IsWhitespace">
            <summary>
            Gets a value, indicating whether the word
            contains only whitespace characters.
            </summary>
        </member>
        <member name="P:MindFusion.Text.Word.IsLineBreak">
            <summary>
            Gets a value, indicating whether the word
            contains linebreaking characters.
            </summary>
        </member>
        <member name="P:MindFusion.Text.Word.Value">
            <summary>
            Gets the text representation of the word.
            </summary>
        </member>
        <member name="P:MindFusion.Text.Word.Width">
            <summary>
            Gets the width of the word.
            </summary>
        </member>
        <member name="P:MindFusion.Text.Word.SRect">
            <summary>
            Gets a static rectangle, large enough to wrap any contents.
            </summary>
        </member>
        <member name="T:MindFusion.Text.WordList">
            <summary>
            Represents a read-only list of word objects.
            </summary>
        </member>
        <member name="M:MindFusion.Text.WordList.#ctor(System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the WordList class
            with the specified Word collection.
            </summary>
        </member>
        <member name="M:MindFusion.Text.WordList.Contains(MindFusion.Text.Word)">
            <summary>
            Checks whether the specified word is contained in the collection.
            </summary>
        </member>
        <member name="P:MindFusion.Text.WordList.Item(System.Int32)">
            <summary>
            Gets the word at the specified index.
            </summary>
        </member>
        <member name="T:MindFusion.Text.Text">
            <summary>
            Defines base implementation for immutable text objects.
            </summary>
        </member>
        <member name="M:MindFusion.Text.Text.#ctor">
            <summary>
            Initializes a new instance of the Text class.
            </summary>
        </member>
        <member name="M:MindFusion.Text.Text.Setup(System.String,MindFusion.Diagramming.Wpf.ITextAttributes)">
            <summary>
            Assigns new text to the object. The text is formatted
            according to the specified text attributes.
            </summary>
        </member>
        <member name="M:MindFusion.Text.Text.ProcessText">
            <summary>
            Invoked after new text has been assigned to the object to
            allow clients to perform custom text processing.
            </summary>
        </member>
        <member name="M:MindFusion.Text.Text.Split(System.String)">
            <summary>
            Subdivides the specified string to whitespaces and text.
            </summary>
        </member>
        <member name="P:MindFusion.Text.Text.Words">
            <summary>
            Gets a read-only list containing the words in the text.
            </summary>
        </member>
        <member name="P:MindFusion.Text.Text.RawText">
            <summary>
            Gets the raw text.
            </summary>
        </member>
        <member name="P:MindFusion.Text.Text.PlainText">
            <summary>
            Gets the text stripped of any formatting tags.
            </summary>
        </member>
        <member name="P:MindFusion.Text.Text.InnerWords">
            <summary>
            Gets the list containing the words of the text.
            </summary>
        </member>
        <member name="P:MindFusion.Text.Text.Height">
            <summary>
            Gets the height of the text as it is
            specified in the last Setup operation.
            </summary>
        </member>
        <member name="T:MindFusion.Text.PlainText">
            <summary>
            Represents text with no formatting.
            </summary>
        </member>
        <member name="M:MindFusion.Text.PlainText.#ctor">
            <summary>
            Initializes a new instance of the PlainText class.
            </summary>
        </member>
        <member name="M:MindFusion.Text.PlainText.ProcessText">
            <summary>
            Performs simple parsing of the text.
            </summary>
        </member>
        <member name="T:MindFusion.Text.StyledText">
            <summary>
            Represents a text which can, but not necessarily would,
            contain formatting tags.
            </summary>
        </member>
        <member name="M:MindFusion.Text.StyledText.#ctor">
            <summary>
            Initializes a new instance of the StyledText class.
            </summary>
        </member>
        <member name="M:MindFusion.Text.StyledText.ProcessText">
            <summary>
            Processes formatting text.
            </summary>
        </member>
        <member name="F:MindFusion.Text.StyledText._recognizer">
            <summary>
            Regular expression recognizer object used
            internally in the parsing process.
            </summary>
        </member>
        <member name="P:MindFusion.Text.StyledText.PlainText">
            <summary>
            Gets the text stripped of any formatting tags.
            </summary>
        </member>
        <member name="T:MindFusion.Text.StyledText.FormatToken">
            <summary>
            Represents single formatting tag.
            </summary>
        </member>
        <member name="M:MindFusion.Text.StyledText.FormatToken.#ctor(MindFusion.Text.Styles,System.Object)">
            <summary>
            Initializes a new instance of the FormatToken class.
            </summary>
        </member>
        <member name="T:MindFusion.Text.StyledText.StyledWord">
            <summary>
            Represents word with uniform formatting.
            </summary>
        </member>
        <member name="M:MindFusion.Text.StyledText.StyledWord.#ctor(System.String,MindFusion.Text.Styles,System.Windows.Media.Color)">
            <summary>
            Initializes a new instance of the StyledWord class.
            </summary>
        </member>
        <member name="M:MindFusion.Text.StyledText.StyledWord.UpdateMeasures(MindFusion.Diagramming.Wpf.ITextAttributes)">
            <summary>
            Updates the measures of the word as it would be
            when drawn with the specified font,
            making sure word style is taken into account.
            </summary>
        </member>
        <member name="M:MindFusion.Text.StyledText.StyledWord.CreateBrush(System.Windows.Media.Brush)">
            <summary>
            Applies the word style to the given brush.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Text.StyledText.StyledWord.DisposeBrush(System.Windows.Media.Brush)">
            <summary>
            Disposes the specified brush.
            </summary>
        </member>
        <member name="M:MindFusion.Text.StyledText.StyledWord.CreateFont(MindFusion.Diagramming.Wpf.ITextAttributes)">
            <summary>
            Applies the word style to the given font.
            </summary>
        </member>
        <member name="P:MindFusion.Text.StyledText.StyledWord.Format">
            <summary>
            Gets the word formatting.
            </summary>
        </member>
        <member name="P:MindFusion.Text.StyledText.StyledWord.Color">
            <summary>
            Gets the word color or empty color if no
            color is associated with the word.
            </summary>
        </member>
        <member name="P:MindFusion.Text.StyledText.StyledWord.YOffset">
            <summary>
            Gets the y-offset of this word in graphics units.
            In most cases this is 0, except when
            the text is sub- or sup- ed.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TableConnectionPoint">
            <summary>
            Represents a connection between a link and a table node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableConnectionPoint.#ctor(MindFusion.Diagramming.Wpf.TableNode,MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the TableConnectionPoint class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableConnectionPoint.#ctor">
            <summary>
            Initializes a new instance of the TableConnectionPoint class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableConnectionPoint.LinkChanges(MindFusion.Diagramming.Wpf.DiagramItem,System.Windows.Point)">
            <summary>
            ConnectionPoint.LinkChanges override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableConnectionPoint.UpdateFromPoint(System.Windows.Point)">
            <summary>
            Updates the connection stated according to the specified point,
            without changing the related node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableConnectionPoint.GetIntersection(System.Windows.Point,System.Windows.Point)">
            <summary>
            ConnectionPoint.GetIntersection override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableConnectionPoint.GetInitialPoint">
            <summary>
            ConnectionPoint.GetInitialPoint override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableConnectionPoint.AddLinkToNode">
            <summary>
            ConnectionPoint.AddLinkToNode override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableConnectionPoint.RemoveLinkFromNode">
            <summary>
            ConnectionPoint.RemoveLinkFromNode override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableConnectionPoint.SaveEndRelative">
            <summary>
            ConnectionPoint.SaveEndRelative override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableConnectionPoint.GetEndPoint">
            <summary>
            ConnectionPoint.GetEndPoint override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableConnectionPoint.GetAnchoredPoint(MindFusion.Diagramming.Wpf.AnchorPosition,System.Boolean)">
            <summary>
            ConnectionPoint.GetAnchoredPt override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableConnectionPoint.CalculateIntersections">
            <summary>
            ConnectionPoint.CalcIntrs override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableConnectionPoint.GetAnchor(System.Windows.Point,System.Boolean,System.Int32@)">
            <summary>
            ConnectionPoint.GetAnchor override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableConnectionPoint.GetAnchorPos(System.Int32)">
            <summary>
            ConnectionPoint.GetAnchorPos override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableConnectionPoint.GetAnchorPos(System.Int32,System.Windows.Point@)">
            <summary>
            ConnectionPoint.GetAnchorPos override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableConnectionPoint.AnchorPointFromIndex(System.Int32)">
            <summary>
            ConnectionPoint.AnchorPointFromIndex override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableConnectionPoint.GetNearestAnchorPoint(System.Windows.Point)">
            <summary>
            ConnectionPoint.GetNearestAnchorPoint override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableConnectionPoint.GetNearestBorderPoint(System.Windows.Point)">
            <summary>
            ConnectionPoint.GetNearestBorderPoint override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableConnectionPoint.Table">
            <summary>
            Gets the tableNode associated with the connection point.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableConnectionPoint.Row">
            <summary>
            ConnectionPoint.Row override.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Shape">
            <summary>
            An instance of this class represents a shape defined through
            a series of arc, line and Bezier segments. The segments can be
            a part of the shape outline, in which case they define the part
            of the shape is filled, used for hit-testing and for aligning
            arrows to the node edges. Segments can also be added as decoration
            elements, in which case they only affect the appearance of a ShapeNode.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.#cctor">
            <summary>
            Initializes the predefined static shapes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.#ctor(MindFusion.Diagramming.Wpf.ElementTemplate[],System.Windows.Media.FillRule)">
            <summary>
            Initializes a new instance of the Shape class with the specified outline.
            </summary>
            <param name="elements">
            An array of shape template elements that define the outline of
            a shape. Can contain lines, arcs and Bézier curves.
            </param>
            <param name="fillRule">
            Specifies how areas are filled if the outline path intersects itself.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.#ctor(MindFusion.Diagramming.Wpf.ElementTemplate[],System.Windows.Media.FillRule,System.String)">
            <summary>
            Initializes a new instance of the Shape class with the specified outline and id.
            </summary>
            <param name="elements">
            Refers to an array of shape template elements that define the outline
            of a shape. Can contain lines, arcs and Bézier curves.
            </param>
            <param name="fillRule">
            Specifies how areas are filled if the outline path intersects itself.
            </param>
            <param name="id">
            The string identifier of the new shape.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the Shape class with the specified outline.
            </summary>
            <param name="outline">
            An array containing even number of coordinate values, which define
            the points of the shape outline.
            </param>
            <remarks>
            The specified array should contain even number of values. Each odd
            value represents the x-coordinate and each even value represents
            the y-coordinate of the corresponding point in the shape outline.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the Shape class with the
            specified outline and id.
            </summary>
            <param name="outline">
            An array containing even number of coordinate values,
            which define the points of the shape outline.
            </param>
            <param name="id">
            The string identifier of the new shape.
            </param>
            <remarks>
            The specified array should contain even number of values.
            </remarks>
            <remarks>
            The specified array should contain even number of values. Each odd
            value represents the x-coordinate and each even value represents
            the y-coordinate of the corresponding point in the shape outline.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.#ctor(MindFusion.Diagramming.Wpf.ElementTemplate[],MindFusion.Diagramming.Wpf.ElementTemplate[],MindFusion.Diagramming.Wpf.ElementTemplate[],System.Windows.Media.FillRule)">
            <summary>
            Initializes a new instance of the Shape class with the
            specified outline, decorations and text area.
            </summary>
            <param name="elements">
            An array of shape template elements that define the outline of
            a shape. Can contain lines, arcs and Bézier curves.
            </param>
            <param name="decorations">
            An array of shape template elements that define shape decorations.
            Can contain lines, arcs and Bézier curves. Decorations are visual
            elements that do not take part in hit testing and clipping.
            </param>
            <param name="textArea">
            An array of shape template elements that define the region of a
            node in which text is laid out and rendered. Can contain lines,
            arcs and Bézier curves. Latter two are approximated to polygons
            by the text-formatting algorithm.
            </param>
            <param name="fillRule">
            Specifies how areas are filled if the outline path intersects itself.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.#ctor(MindFusion.Diagramming.Wpf.ElementTemplate[],MindFusion.Diagramming.Wpf.ElementTemplate[],MindFusion.Diagramming.Wpf.ElementTemplate[],System.Windows.Media.FillRule,System.String,MindFusion.Diagramming.Wpf.ShapeDecoration[])">
            <summary>
            Initializes a new instance of the Shape class with
            the specified outline, decorations, text area and id.
            </summary>
            <param name="elements">
            An array of shape template elements that define the outline
            of a shape. Can contain lines, arcs and Bézier curves.
            </param>
            <param name="decorations">
            An array of shape template elements that define shape decorations.
            Can contain lines, arcs and Bézier curves. Decorations are visual
            elements that do not take part in hit testing and clipping.
            </param>
            <param name="textArea">
            An array of shape template elements that define the region of a
            node in which text is laid out and rendered. Can contain lines,
            arcs and Bézier curves. Latter two are approximated to polygons
            by the text-formatting algorithm.
            </param>
            <param name="fillRule">
            Specifies how areas are filled if the outline path intersects itself.
            </param>
            <param name="id">
            The string identifier of the new shape.
            </param>
            <param name="closedDecorations">
            An array of ShapeDecoration objects.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.#ctor(MindFusion.Diagramming.Wpf.ElementTemplate[],MindFusion.Diagramming.Wpf.ElementTemplate[],MindFusion.Diagramming.Wpf.ElementTemplate[],System.Windows.Media.FillRule,System.String)">
            <summary>
            Initializes a new instance of the Shape class with
            the specified outline, decorations, text area and id.
            </summary>
            <param name="elements">
            An array of shape template elements that define the outline
            of a shape. Can contain lines, arcs and Bézier curves.
            </param>
            <param name="decorations">
            An array of shape template elements that define shape decorations.
            Can contain lines, arcs and Bézier curves. Decorations are visual
            elements that do not take part in hit testing and clipping.
            </param>
            <param name="textArea">
            An array of shape template elements that define the region of a
            node in which text is laid out and rendered. Can contain lines,
            arcs and Bézier curves. Latter two are approximated to polygons
            by the text-formatting algorithm.
            </param>
            <param name="fillRule">
            Specifies how areas are filled if the outline path intersects itself.
            </param>
            <param name="id">
            The string identifier of the new shape.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Shape class with the
            specified outline formula and id.
            </summary>
            <param name="outlineFormula">
            A string containing the formula that defines the shape outline.
            </param>
            <param name="id">
            The string identifier of the new shape.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the Shape class with the
            specified outline and decorations formulas and id.
            </summary>
            <param name="outlineFormula">
            A string containing the formula that defines the shape outline.
            </param>
            <param name="decorationsFormula">
            A string containing the formula that defines the shape decorations.
            </param>
            <param name="id">
            The string identifier of the new shape.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.#ctor(MindFusion.Diagramming.Wpf.CreatePathDelegate,System.String)">
            <summary>
            Initializes a new instance of the Shape class with the
            specified outline formula and id.
            </summary>
            <param name="outlineDelegate">
            A delegate called to generate PathGeometry objects representing the shape outline.
            </param>
            <param name="id">
            The string identifier of the new shape.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.#ctor(MindFusion.Diagramming.Wpf.CreatePathDelegate,MindFusion.Diagramming.Wpf.CreatePathDelegate,System.String)">
            <summary>
            Initializes a new instance of the Shape class with the
            specified outline and decorations formulas and id.
            </summary>
            <param name="outlineDelegate">
            A delegate called to generate PathGeometry objects representing the shape outline.
            </param>
            <param name="decorationsDelegate">
            A delegate called to generate PathGeometry objects representing the shape decorations.
            </param>
            <param name="id">
            The string identifier of the new shape.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Loads the shape content from an XML element.
            </summary>
            <param name="xmlElement">
            The XmlElement containing the shape's data.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information about
            the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.LoadTemplateElements(System.Xml.XmlElement,System.String,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Loads the template elements from the specified XML element.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.RegisterDefaultShape(MindFusion.Diagramming.Wpf.Shape)">
            <summary>
            Adds the specified shape to the list with default shapes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.SetReference(System.Int32,System.Object)">
            <summary>
            Updates the reference to the specified object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the shape content into an XML element.
            </summary>
            <param name="xmlElement">
            The XmlElement the shape's data should be stored into.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information
            about the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.SaveTemplateElements(MindFusion.Diagramming.Wpf.ElementTemplate[],System.Xml.XmlElement,System.String,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the specified template elements within the specified XML
            element under a parent with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.MakeImageRelative(System.String)">
            <summary>
            Convert image location to relative path before serialization.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.CheckVaryingOutline(System.Windows.Rect,System.Double)">
            <summary>
            Initializes a new ShapeData object from the current
            template according to the specified destination
            rectangle and rotation angle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.GetRenderingPath(System.Windows.Size,System.Double)">
            <summary>
            Returns a PathGeometry object corresponding to the outline of
            this shape when when applied to node of the specified size.
            This GraphicsPath can be used when drawing the shape's outline.
            </summary>
            <remarks>
            This method returns null when EnableOutline is set
            to false regardless of the contents of the Outline property.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.GetHitPath(System.Windows.Size,System.Double)">
            <summary>
            Returns a GraphicsPath object corresponding to the outline of
            the specified shape when rotated at the specified angle. This
            GraphicsPath can be used for hit-testing and intersection checks.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.GetDecorationPath(System.Windows.Size)">
            <summary>
            Returns a Geometry object corresponding to the
            decoration of the specified shape in percent coordinates
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.OnParseObject(System.Object,MindFusion.Scripting.ParseObjectEventArgs)">
            <summary>
            Handles the ParseObject event of the EvaluationContext class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.Normalize(System.String)">
            <summary>
            Wraps the specified string in square brackets if it is not wrapped already.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.Draw(System.Windows.Media.DrawingContext,System.Windows.Media.Brush,System.Windows.Media.Pen,System.Double)">
            <summary>
            Draws this shape on the specified DrawingContext surface.
            </summary>
            <param name="drawingContext">The DrawingContext surface to draw the shape on.</param>
            <param name="brush">A Brush used to fill the shape.</param>
            <param name="pen">A Pen used to draw the shape outline.</param>
            <param name="orientation">Orientation angle to apply to the shape geometry.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.DrawOutline(System.Windows.Media.DrawingContext,System.Windows.Media.Pen)">
            <summary>
            Renders the outline of the shape.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.DrawDecorations(System.Windows.Media.DrawingContext,System.Windows.Media.Pen)">
            <summary>
            Renders the decorations of the shape.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.HasVaryingOutline">
            <summary>
            Returns whether the outline of this shape contains
            fragments with varying pen styles.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.HasVaryingDecorations">
            <summary>
            Returns whether the decorations of this shape contain
            fragments with varying pen styles.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.GetTextRect(System.Windows.Size)">
            <summary>
            Returns the bounding rectangle of the specified shape.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.HasTextArea">
            <summary>
            Returns a value indicating whether this shape has explicitely
            defined text area.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.IsTextOutside">
            <summary>
            Returns a value indicating whether the text area of this shape
            expands outside of the bounding rectangle of the shape outline.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.FromId(System.String)">
            <summary>
            Returns a reference to the shape with the specified string identifier.
            </summary>
            <param name="id">
            The identifier of the shape of interest.
            </param>
            <returns>
            A reference to the Shape with the specified identifier or a null
            reference (Nothing in Visual Basic) if there is no such shape.
            </returns>
            <remarks>
            The id argument should match an identifier passed to a constructor
            of the existing shape templates.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.ToString">
            <summary>
            Returns the identifier of this shape template.
            </summary>
            <returns>
            A string value representing the shape identifier.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.Clone">
            <summary>
            Creates an exact copy of this shape.
            </summary>
            <returns>
            An instance of the Shape class representing the newly created clone.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.Equals(MindFusion.Diagramming.Wpf.Shape)">
            <summary>
            Checks whether this shape template is equivalent to the
            specified shape.
            </summary>
            <param name="shape">
            The shape to check for equality with the current shape.
            </param>
            <returns>
            true if the current shape is equivalent to the specified shape;
            otherwise, false.
            </returns>
            <remarks>
            Two shapes are considered equivalent if they have the same
            fill type, the same number and type of segments and if the
            points of those segments are close enough to each other.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.LoadImage(System.String)">
            <summary>
            Returns safely an image. If the loading of the specified path fails
            creates a default image with error message
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Shape.InitializeDefault">
            <summary>
            Initializes the default shapes.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Shape.ShapeAdded">
            <summary>
            Raised when a new shape with a non-empty id is created.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shape.Shapes">
            <summary>
            Gets a read-only collection of all named shapes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shape.ShapeDecorations">
            <summary>
            Gets or sets the ShapeDecoration objects associated with this shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shape.Outline">
            <summary>
            Gets or sets the outline of this shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shape.Decorations">
            <summary>
            Gets or sets a list with all decorations of this shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shape.TextArea">
            <summary>
            Gets or sets the outline of the text area of this shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shape.FillRule">
            <summary>
            Gets or sets a value indicating how areas are filled
            if the outline path of the shape intersects itself.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shape.Image">
            <summary>
            Gets or sets the image displayed in all instances of this shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shape.ImageLocation">
            <summary>
            Gets or sets the path to the file that contains the image
            displayed in this shape.
            </summary>
            <remarks>
            Assigning a valid file path to this property will automatically
            load the image.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shape.ImageRectangle">
            <summary>
            Gets or sets the position of the images displayed in instances
            of this shape.
            </summary>
            <remarks>
            The coordinates of the image location are specified in percent,
            relatively to the rectangular bounds of shape nodes. The default
            value (0, 0, 100, 100) makes the image displayed in the whole area
            of that node.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shape.Id">
            <summary>
            Gets or sets the shape identifier.
            </summary>
            <remarks>
            Once assigned via the constructor, the shape identifier should
            not be changed, that is, do not use the set accessor of this property.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shape.DecorationHitTesting">
            <summary>
            Gets or sets a value indicating whether decoration lines
            should be considered when hit-testing.
            </summary>
            <remarks>
            If this property is enabled, users are able to select shape
            nodes of such shape by clicking near a decoration line or
            curve, even if it lies outside the shape outlines.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shape.DisplayName">
            <summary>
            Specifies the name that should be displayed for this shape in
            user interface objects, for example the ShapeListBox or ShapeToolBar.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shape.IsArrowhead">
            <summary>
            Specifies if this shape is used as arrowhead.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shape.OutlineFormula">
            <summary>
            Gets or sets a formula describing the shape outline depending
            on the current width and height of the node.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Shape.DecorationsFormula">
            <summary>
            Gets or sets a formula describing the shape decorations depending
            on the current width and height of the node.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ShapeDecoration">
            <summary>
            Defines decoration elements that are displayed as filled shapes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeDecoration.#ctor(MindFusion.Diagramming.Wpf.ElementTemplate[],System.Windows.Media.Brush,System.Windows.Media.FillRule,System.Windows.Media.Pen)">
            <summary>
            Initializes a new instance of the ShapeDecoration class.
            </summary>
            <param name="elements">An array of ElementTemplate objects that define the decoration shape outline.</param>
            <param name="brush">A Brush object used to fill the decoration shape interior.</param>
            <param name="fillMode">Specifies how areas are filled if the outline path intersects itself.</param>
            <param name="pen">A Pen object used to draw the decoration shape outline.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeDecoration.GetHitPath(System.Windows.Size)">
            <summary>
            Returns a GraphicsPath object corresponding to the outline of
            the specified shape when rotated at the specified angle. This
            GraphicsPath can be used for hit-testing and intersection checks.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeDecoration.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the ShapeDecoration definition in an XML document.
            </summary>
            <param name="xmlElement">The parent XmlElement object.</param>
            <param name="context">
            An XmlPersistContext object providing contextual information
            about the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeDecoration.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Loads the ShapeDecoration definition from an XML document.
            </summary>
            <param name="xmlElement">The parent XmlElement object.</param>
            <param name="context">
            An XmlPersistContext object providing contextual information
            about the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeDecoration.LoadTemplateElements(System.Xml.XmlElement,System.String,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Loads the template elements from the specified XML element.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeDecoration.SaveTemplateElements(MindFusion.Diagramming.Wpf.ElementTemplate[],System.Xml.XmlElement,System.String,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the specified template elements within the specified XML
            element under a parent with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeDecoration.Clone">
            <summary>
            Clones this ShapeDecoration object.
            </summary>
            <returns>A copy of the ShapeDecoration.</returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeDecoration.Brush">
            <summary>
            Gets or sets the brush used to fill the decoration shape interior.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeDecoration.FillRule">
            <summary>
            Gets or sets how areas are filled if the outline path intersects itself.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeDecoration.Pen">
            <summary>
            Gets or sets the brush used to draw the decoration shape outline.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.CreatePathDelegate">
            <summary>
            Specifies the signature of callback functions used to generate dynamic node shapes.
            </summary>
            <param name="shapeData">An instance of the ShapeData class.</param>
            <returns>A GraphicsPath specifying the shape outline or decorations.</returns>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ShapeData">
            <summary>
            Contains the cached coordinates of the key points of a shape when the shape is applied
            to a specific ShapeNode. This class also stores additional data passed to custom
            shape-generation callbacks and to shape formula scripts.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeData.Width">
            <summary>
            Gets the width of the node that displays this shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ShapeData.Height">
            <summary>
            Gets the height of the node that displays this shape.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.RulerResx">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RulerResx.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RulerResx.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.RedimTableCmd">
            <summary>
            Implements changes to the number of table's rows and coolumns.
            </summary>
            <remarks>
            Instances of this class are implicitly created by WpfDiagram
            in response to method calls and property changes that alter the
            number of table's rows or columns. References to those instances
            are passed to handlers of the ActionRecorded, ActionUndone and
            ActionRedone events.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RedimTableCmd.#ctor(MindFusion.Diagramming.Wpf.TableNode,System.String)">
            <summary>
            Initializes a new instance of the RedimTableCmd class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RedimTableCmd.Execute(System.Boolean)">
            <summary>
            Carries out the command action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RedimTableCmd.Undo">
            <summary>
            Undoes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RedimTableCmd.Redo">
            <summary>
            Redoes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RedimTableCmd.GetItem">
            <summary>
            Gets the table associated with the command.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.RedimTableCmd.TableNode">
            <summary>
            Gets a reference to the modified table.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Overview">
            <summary>
            Provides a scaled-down view of a Diagram contents and allows
            scrolling and zooming the diagram with the mouse.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Overview.#ctor">
            <summary>
            Initializes a new instance of the Overview class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Overview.ScrollTo(System.Windows.Point)">
            <summary>
            Scrolls the overview control, so that diagramPoint is displayed at the top left corner of the overview.
            </summary>
            <param name="diagramPoint">A point in diagram document coordinates</param>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Overview.DocumentProperty">
            <summary>
            Identifies the Document dependency property.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Overview.ShowScrollbars">
            <summary>
            Shows or hides the scrollbars of the overview control.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Overview.FitAll">
            <summary>
            Gets or sets a value indicating whether to fit the whole
            diagram inside the overview window control.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Overview.Document">
            <summary>
            Gets or sets the Diagram instance whose contents
            to display in the overview control.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Overview.ScaleFactor">
            <summary>
            Gets or sets a fixed scale factor to be used when FitAll is disabled.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Overview.TrackingRectPen">
            <summary>
            Gets or stes the Pen object used to draw the tracking rectangle border.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Overview.DimBrush">
            <summary>
            Gets or sets a color used to blend with the part of the diagram
            that is not visible in the DiagramView‘s client rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Overview.OverviewControl.OverviewControl_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Control.SizeChanged override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Overview.OverviewControl.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Control.OnLoaded override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Overview.OverviewControl.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Control.OnMouseDown override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Overview.OverviewControl.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Control.OnMouseUp override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Overview.OverviewControl.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Control.OnMouseWheel override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Overview.OverviewControl.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Control.OnMouseMove override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Overview.OverviewControl.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Control.OnRender override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Overview.OverviewControl.CalcCenteringOffsets">
            <summary>
            Calculates the offsets which would center the overview
            within the client area if the client area is bigger
            than the diagram.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Overview.OverviewControl.CalcViewport">
            <summary>
            Calculates the current document viewport.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Overview.OverviewControl.ScrollTo(System.Double,System.Double)">
            <summary>
            Scrolls the view to the specified point.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Overview.OverviewControl.ScrollViewer">
            <summary>
            
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Overview.OverviewControl.ScaleFactor">
            <summary>
            Gets or sets a fixed scale factor to be used when FitAll is disabled.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Overview.OverviewControl.Background">
            <summary>
            Gets or sets the background brush of the overview control.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Overview.OverviewControl.DimBrush">
            <summary>
            Gets or sets a brush used to blend with the part of the diagram
            that is not visible in the DiagramView‘s client rectangle.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Overview.OverviewControl.Viewport">
            <summary>
            Gets or sets the viewport rectangle.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Overview.OverviewControl.IDragTool">
            <summary>
            Base for all drag tools.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Overview.OverviewControl.IDragTool.Update(System.Double,System.Double)">
            <summary>
            Invoked to notify the drag tool of any mouse changes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Overview.OverviewControl.IDragTool.Complete(System.Double,System.Double)">
            <summary>
            Invoked when the drag operation is about to be completed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Overview.OverviewControl.IDragTool.Cancel">
            <summary>
            Causes the drag operation to be cancelled.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Overview.OverviewControl.IDragTool.Cursor">
            <summary>
            Gets the mouse cursor to be displayed while the dragging.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Overview.OverviewControl.ViewDrag">
            <summary>
            Handles the dragging of the viewport rectangle within the control.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Folder">
            <summary>
            Allows users to interactively fold or unfold containers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Folder.#ctor(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Initializes a new instance of the Scroller class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Folder.Draw(System.Windows.Media.DrawingContext)">
            <summary>
            Manipulator.Draw override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Folder.AddToRepaintRect(System.Windows.Rect@)">
            <summary>
            Manipulator.AddToRepaintRect override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Folder.HitTest(System.Windows.Point)">
            <summary>
            Manipulator.HitTest override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Folder.PtInManipulator(System.Windows.Point)">
            <summary>
            Manipulator.PtInManipulator override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Folder.SupportClipping">
            <summary>
            Manipulator.SupportClipping override.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Visitors.EndModifyVisitor">
            <summary>
            Invokes CompleteModify on the object being visited.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Visitors.EndModifyVisitor.Accept(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            CollectionVisitor.Accept override.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.FractalLayout">
            <summary>
            A tree drawing algorithm that places child nodes symmetrically around their parent node.
            </summary>
            <remarks>
            Nodes at the lowest level are arranged directly in a circle around their parent. At the upper level,
            the already arranged nodes form branches that are arranged in a circle around the new parent node.
            The algorithm is recursively repeated till the highest level is reached.
            </remarks>
        </member>
        <member name="M:MindFusion.Layout.FractalLayout.#ctor">
            <summary>
            Initializes a new instance of the FractalLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.FractalLayout.Arrange(MindFusion.Layout.IGraph)">
            <summary>
            Applies the layout to the specified graph using the specified settings.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.FractalLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.LayoutProgress)">
            <summary>
            Applies the layout to the specified graph using the specified settings
            and progress callback delegate.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FractalLayout.graph">
            <summary>
            The GraphLib representation of the graph to be arranged.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FractalLayout.graphToDiagMapNodes">
            <summary>
            Maps GraphLib vertices to INode objects.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FractalLayout.graphToDiagMapLinks">
            <summary>
            Maps GraphLib edges to ILink objects.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ControlNodeEventArgs">
            <summary>
            Contains the arguments passes to handlers of the control host serialization events.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ControlNodeEventArgs.#ctor(MindFusion.Diagramming.Wpf.DiagramNodeAdapter)">
            <summary>
            Initializes a new instance of the ControlNodeEventArgs class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ControlNodeEventArgs.#ctor(MindFusion.Diagramming.Wpf.DiagramNodeAdapter,System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Initializes a new instance of the ControlNodeEventArgs class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ControlNodeEventArgs.XmlElement">
            <summary>
            Gets a stream object where you can store or retrieve
            any custom information.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ControlNodeEventArgs.Node">
            <summary>
            Gets a reference to the ControlNode being serialized or
            deserialized.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ControlNodeEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the event is handled.
            </summary>
            <remarks>
            Always set this flag to true if you perform custom tag serialization.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ControlNodeEventArgs.Context">
            <summary>
            Gets a context object that can help you write and read
            various values.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ControlNodeEventHandler">
            <summary>
            Represents methods that will handle control host serialization and deserialization events.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.AnchorPoint">
            <summary>
            Represents a location in a node, to which links are allowed to connect.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the AnchorPoint class with the
            specified coordinates.
            </summary>
            <param name="x">
            The horizontal position of the anchor expressed as percent of
            the width of a node.
            </param>
            <param name="y">
            The vertical position of the anchor expressed as percent of
            the height of a node.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPoint.#ctor(System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AnchorPoint class with the
            specified coordinates and restrictions.
            </summary>
            <param name="x">
            The horizontal position of the anchor expressed as percent of
            the width of a node.
            </param>
            <param name="y">
            The vertical position of the anchor expressed as percent of
            the height of a node.
            </param>
            <param name="allowIncoming">
            Specifies whether incoming links can connect to this anchor.
            </param>
            <param name="allowOutgoing">
            Specifies whether outgoing links can connect to this anchor.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPoint.#ctor(System.Double,System.Double,System.Boolean,System.Boolean,MindFusion.Diagramming.Wpf.MarkStyle)">
            <summary>
            Initializes a new instance of the AnchorPoint class with the specified
            coordinates, restrictions and style.
            </summary>
            <param name="x">
            The horizontal position of the anchor expressed as percent of
            the width of a node.
            </param>
            <param name="y">
            The vertical position of the anchor expressed as percent of
            the height of a node.
            </param>
            <param name="allowIncoming">
            Specifies whether incoming links can connect to this anchor.
            </param>
            <param name="allowOutgoing">
            Specifies whether outgoing links can connect to this anchor.
            </param>
            <param name="markStyle">
            Defines how the anchor point is marked visually.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPoint.#ctor(System.Double,System.Double,System.Boolean,System.Boolean,MindFusion.Diagramming.Wpf.MarkStyle,System.Windows.Media.Brush)">
            <summary>
            Initializes a new instance of the AnchorPoint class with the specified
            coordinates, restrictions, style and brush.
            </summary>
            <param name="x">
            The horizontal position of the anchor expressed as percent of
            the width of a node.
            </param>
            <param name="y">
            The vertical position of the anchor expressed as percent of
            the height of a node.
            </param>
            <param name="allowIncoming">
            Specifies whether incoming links can connect to this anchor.
            </param>
            <param name="allowOutgoing">
            Specifies whether outgoing links can connect to this anchor.
            </param>
            <param name="markStyle">
            Defines how the anchor point is marked visually.
            </param>
            <param name="brush">
            The brush with which the anchor mark is painted.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPoint.#ctor(System.Double,System.Double,System.Boolean,System.Boolean,System.Windows.Media.Brush,System.Int32)">
            <summary>
            Initializes a new instance of the AnchorPoint class with the
            specified coordinates, restrictions and brush.
            </summary>
            <param name="x">
            The horizontal position of the anchor expressed as percent of
            the width of a node.
            </param>
            <param name="y">
            The vertical position of the anchor expressed as percent of
            the height of a node.
            </param>
            <param name="allowIncoming">
            Specifies whether incoming links can connect to this anchor.
            </param>
            <param name="allowOutgoing">
            Specifies whether outgoing links can connect to this anchor.
            </param>
            <param name="brush">
            The brush with which the anchor mark is painted.
            </param>
            <param name="col">
            Specifies a table's column, with which an anchor point is associated.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPoint.#ctor(System.Double,System.Double,System.Boolean,System.Boolean,System.Windows.Media.Brush,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the AnchorPoint class with the
            specified coordinates, restrictions, brush and tag.
            </summary>
            <param name="x">
            The horizontal position of the anchor expressed as percent of
            the width of a node.
            </param>
            <param name="y">
            The vertical position of the anchor expressed as percent of
            the height of a node.
            </param>
            <param name="allowIncoming">
            Specifies whether incoming links can connect to this anchor.
            </param>
            <param name="allowOutgoing">
            Specifies whether outgoing links can connect to this anchor.
            </param>
            <param name="brush">
            The brush with which the anchor mark is painted.
            </param>
            <param name="col">
            The table's column, with which an anchor point is associated.
            </param>
            <param name="tag">
            User-defined data associated with the anchor point.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPoint.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            UIElement.OnRender override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPoint.Draw(System.Windows.Media.DrawingContext)">
            <summary>
            Renders the anchor point.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.AnchorPoint.Clone">
            <summary>
            Creates an exact clone of this AnchorPoint object.
            </summary>
            <returns>
            An instance of the AnchorPoint class.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPoint.X">
            <summary>
            Gets or sets the horizontal position of the anchor point
            expressed as percent of a node's width.
            </summary>
            <remarks>
            Set the property value to a number from 0 to 100, otherwise
            you might get unexpected behavior.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPoint.Y">
            <summary>
            Gets or sets the vertical position of the anchor point
            expressed as percent of a node's height.
            </summary>
            <remarks>
            Set the property value to a number from 0 to 100, otherwise
            you might get unexpected behavior.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPoint.Column">
            <summary>
            Gets or sets the column index of a cell with which the anchor
            point is associated.
            </summary>
            <remarks>
            If Column is set to -1, the point relative coordinates specify
            percents of row's extents. Otherwise the point coordinates
            specify percents of cell's extents.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPoint.AllowIncoming">
            <summary>
            Gets or sets a value indicating whether incoming links can be
            connected to this anchor.
            </summary>
            <remarks>
            If no incoming anchors are defined for a node, links end points
            can be placed anywhere inside that node, unless AllowUnanchoredLinks
            is disabled.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPoint.AllowOutgoing">
            <summary>
            Gets or sets a value indicating whether the anchor point accepts
            outgoing connections.
            </summary>
            <remarks>
            If no outgoing anchors are defined for a node, links start points
            can be placed anywhere inside that node, unless AllowUnanchoredLinks
            is disabled.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPoint.MarkStyle">
            <summary>
            Gets or sets the appearance of the anchor point mark.
            </summary>
            <remarks>
            Specifies how anchor points are marked visually on the display.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPoint.Brush">
            <summary>
            Gets or sets the brush of the anchor point mark.
            </summary>
            <remarks>
            The anchor mark shape specified via MarkStyle is painted with this brush.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPoint.Tag">
            <summary>
            Gets or sets a user-defined data associated with the anchor point.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPoint.ToolTip">
            <summary>
            Gets or sets a tooltip text that should be displayed
            when the mouse hovers over an anchor point mark.
            </summary>
            <remarks>
            When the mouse rests for a while over an anchor point,
            the tool-tip text is displayed in a small popup window
            near the mouse cursor.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.AnchorPoint.LinkOrientation">
            <summary>
            Gets or sets the desired orientation of link segments that connect to this point.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ShapeConverter">
            <summary>
            Converts from Shape to other data types.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            TypeConverter.CanConvertFrom override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            TypeConverter.CanConvertTo override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            TypeConverter.ConvertFrom override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            TypeConverter.ConvertTo override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            TypeConverter.GetStandardValuesSupported override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            TypeConverter.GetStandardValues override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ShapeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            TypeConverter.GetStandardValuesExclusive override.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Alignment">
            <summary>
            Generalized alignment enum.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Alignment.Near">
            <summary>
            Specifies that the object is aligned at the opposite side
            of the origin position of the layout rectangle.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Alignment.Far">
            <summary>
            Specifies that the object is aligned at the origin position of the layout rectangle.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.RulerUnit">
            <summary>
            Specifies a measurement unit for the Ruler.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.RulerUnit.Point">
            <summary>
            Indicates a point.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.RulerUnit.Pixel">
            <summary>
            Indicates a pixel.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.RulerUnit.Millimeter">
            <summary>
            Indicates a millimeter.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.RulerUnit.Inch">
            <summary>
            Indicates an inch.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.RulerUnit.Percent">
            <summary>
            Indicates percent.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.RulerUnit.WpfPoint">
            <summary>
            Indicates WPF device-independent pixel.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Ruler">
            <summary>
            Interaction logic for Ruler.xaml
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Ruler.#ctor">
            <summary>
            Initializes a new instance of the Ruler class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Ruler.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Control.OnMouseMove override.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Ruler.OnNodesAligned(MindFusion.Diagramming.Wpf.NodesAlignedEventArgs)">
            <summary>
            Raises the NodesAligned event.
            </summary>
            <param name="e">
            An NodesAlignedEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Ruler.RefreshScales(MindFusion.Diagramming.Wpf.Ruler.RefreshScaleElement)">
            <summary>
            Refreshes the scales of the ruler either
            unconditionally (if always is set to true)
            or only if the document is being modified
            by the user (if set to false).
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Ruler.RefreshScales">
            <summary>
            Refreshes the scales of the ruler unconditionally.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Ruler.DocumentProperty">
            <summary>
            Identifies the Document dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Ruler.IgnoredItemProperty">
            <summary>
            Identifies the IgnoredItem attached property.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Ruler.SetIgnoredItem(System.Windows.UIElement,System.Boolean)">
            <summary>
            Sets the value of the IgnoredItem attached property for an object.
            </summary>
            <param name="element">A diagram element that should be ignored by the ruler alignment guides.</param>
            <param name="value">true to ignore the element, otherwise false.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Ruler.GetIgnoredItem(System.Windows.UIElement)">
            <summary>
            Gets the value of the IgnoredItem attached property for an object.
            </summary>
            <param name="element">The diagram element from which the property value is read.</param>
            <returns>true if the alignment guides ignore the element, otherwise false.</returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Ruler.HorizontalScaleHeight">
            <summary>
            Gets or sets the height of the horizontal scale.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Ruler.VerticalScaleWidth">
            <summary>
            Gets or sets the width of the vertical scale.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Ruler.NodesAligned">
            <summary>
            Raised when the user aligns nodes using the ruler's alignment guide.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Ruler.VerticalScaleVisible">
            <summary>
            Specifies whether the vertical ruler scale is visible.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Ruler.HorizontalScaleVisible">
            <summary>
            Specifies whether the horizontal ruler scale is visible.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Ruler.HorizontalScaleAlignment">
            <summary>
            Gets or sets the alignment of the horizontal scale.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Ruler.VerticalScaleAlignment">
            <summary>
            Gets or sets the alignment of the vertical scale.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Ruler.ContextMenu">
            <summary>
            Specifies the context menu associated with the ruler.
            We supply our own implementation of the context menu to
            avoid popping it up when the right button is pressed over
            the document area.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Ruler.Unit">
            <summary>
            Gets or sets the measure unit used by the ruler.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Ruler.ProjectionColor">
            <summary>
            Gets or sets the color used to paint
            the projection of the active node.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Ruler.ScaleColor">
            <summary>
            Gets or sets the color used to paint
            the color of the ruler scales.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Ruler.EnableGuides">
            <summary>
            Gets or sets a value indicating whether
            alignment guides are active.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Ruler.GuideColor">
            <summary>
            Gets or sets the color used to paint guides.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Ruler.ShowIcon">
            <summary>
            Gets or sets a value indicating whether to show the icon
            between the horizontal and vertical scales.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Ruler.TextColor">
            <summary>
            Gets or sets the color used to paint texts in the ruler.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Ruler.PointerColor">
            <summary>
            Gets or sets the color used to paint cursor projections.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Ruler.Document">
            <summary>
            Gets or sets the DiagramView document this
            ruler is associated with.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Ruler.InchDivisions">
            <summary>
            Gets or sets the number of minor divisions to show when Unit is set to Inch.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Ruler.CompositeScale.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Control.OnMouseDown override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Ruler.CompositeScale.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Control.OnMouseMove override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Ruler.CompositeScale.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Control.OnMouseUp override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Ruler.CompositeScale.OnDocumentPaint(System.Windows.Shapes.Line)">
            <summary>
            Invoked by the container when the document raises its Paint event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Ruler.CompositeScale.GetThresh">
            <summary>
            Gets a threshold value.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Ruler.CompositeScale.NormalizeRect(System.Windows.Rect)">
            <summary>
            Normalizes the specified rectangle ensuring its height
            and width are non-negative numbers.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Ruler.CompositeScale.EnableGuides">
            <summary>
            Gets or sets a value indicating whether
            alignment guides are active.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Ruler.CompositeScale.GuideColor">
            <summary>
            Gets or sets the color used to paint guides.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Ruler.CursorProjectionPanel.DrawCursorProjection(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the projection of the cursor over this scale.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Ruler.NodeProjectionPanel.DrawProjection(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the projection of the active node (if any).
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Ruler.Scale">
            <summary>
            Represents either horizontal or vertical scale in a ruler control.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Ruler.Scale.#ctor(MindFusion.Diagramming.Wpf.Ruler,MindFusion.Diagramming.Wpf.Orientation)">
            <summary>
            Scales are instantiated only by the ruler.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Ruler.Scale.Draw(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the scale in the specified target.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Ruler.Scale.DrawMarks(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the division marks and numbers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Ruler.Scale.CalcUnitInterval(System.Double)">
            <summary>
            Calculates the interval (in units) between
            two consecutively displayed numbers on the scale,
            ensuring perspicuity.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Ruler.Scale.TextColor">
            <summary>
            Gets or sets the color used to paint texts.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ModifierKeyActions">
            <summary>
            Maps keyboard modifier keys to special actions in
            WpfDiagram such as panning and drawing selection rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ModifierKeyActions.#ctor">
            <summary>
            Initializes a new instance of the ModifierKeyActions class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ModifierKeyActions.GetKeys(MindFusion.Diagramming.Wpf.ModifierKeyAction)">
            <summary>
            Gets the modifier keys which trigger the specified action.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ModifierKeyActions.Control">
            <summary>
            Gets or sets what action is triggered by the CTRL key.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ModifierKeyActions.Shift">
            <summary>
            Gets or sets what action is triggered by the SHIFT key.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ModifierKeyActions.Alt">
            <summary>
            Gets or sets what action is triggered by the ALT key.
            </summary>
        </member>
        <member name="T:MindFusion.Text.LayoutOptions">
            <summary>
            Contains options for text layouting.
            </summary>
        </member>
        <member name="M:MindFusion.Text.LayoutOptions.#ctor">
            <summary>
            Initializes a new instance of the LayoutOptions class.
            </summary>
        </member>
        <member name="P:MindFusion.Text.LayoutOptions.Alignment">
            <summary>
            Specifies the horizontal alignment of the text.
            </summary>
        </member>
        <member name="P:MindFusion.Text.LayoutOptions.LineAlignment">
            <summary>
            Specifies the vertical alignment of the text.
            </summary>
        </member>
        <member name="P:MindFusion.Text.LayoutOptions.LineDistance">
            <summary>
            Specifies the distance between adjacent text lines.
            </summary>
        </member>
        <member name="P:MindFusion.Text.LayoutOptions.NoWrap">
            <summary>
            Gets or sets a value indicating whether the text should
            not automatically wrap to a new line when the space to
            display the text is not sufficient.
            </summary>
        </member>
        <member name="P:MindFusion.Text.LayoutOptions.SplitWords">
            <summary>
            Gets or sets a value indicating whether the words can and
            should split across new lines.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.InternalUtils">
            <summary>
            Contains common helper methods, specific to Diagram.NET.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.RotatePointAt(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Rotates the specified point at the specified angle
            around the specified pivot.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.RotatePointsAt(System.Windows.Point[],System.Windows.Point,System.Double)">
            <summary>
            Rotates the specified points at the specified angle
            around the specified pivot.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.GetRotatedPt(System.Windows.Point,System.Double)">
            <summary>
            Rotates the specified point at the specified right angle
            (0, 90, 180, 270) around the center of a 100x100 rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.GetRoundRect(System.Windows.Rect,System.Double)">
            <summary>
            Creates a graphics path of a rounded rectangle with
            the specified dimensions and round radius.
            </summary>
            <param name="rc">
            A Rect instance, which defines the source rectangle.
            </param>
            <param name="r">
            The radius of the rectangle corners.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.CreateRoundRectRgn(System.Windows.Rect,System.Double)">
            <summary>
            Creates a round rectangle region.
            </summary>
            <param name="rc">
            A Rect instance, which defines the rounded rectangle bounds.
            </param>
            <param name="r">
            The radius of the rectangle corners.
            </param>
            <returns>
            An instance of the .NET Region class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.DrawRect(System.Windows.Media.DrawingContext,System.Windows.Media.Pen,System.Windows.Media.Brush,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws the specified rectangle using the specified pen for
            stroking and the specified brush for filling.
            </summary>
            <param name="graphics">
            The DrawingContext object that represents the target of
            the drawing operation.
            </param>
            <param name="p">
            The Pen to use when drawing the outline.
            </param>
            <param name="b">
            The Brush to use when filling the contents.
            </param>
            <param name="x">
            The x-coordinate of the top-left corner of the drawn rectangle.
            </param>
            <param name="y">
            The y-coordinate of the top-left corner of the drawn rectangle.
            </param>
            <param name="width">
            The width of the drawn rectangle.
            </param>
            <param name="height">
            The height of the drawn rectangle.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.DrawSquareHandles(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.AdjustmentHandles,MindFusion.Diagramming.Wpf.HandlesVisualStyle,MindFusion.Diagramming.Wpf.HandlesVisualStyle,System.Boolean,System.Windows.Rect,System.Double,MindFusion.Diagramming.Wpf.HandlesStyle,System.Double,MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Draws square selection handles.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.DrawRotationHandle(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.HandlesVisualStyle,System.Windows.Rect,System.Double,MindFusion.Diagramming.Wpf.AdjustmentHandles,System.Double,MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Draws the rotation handle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.DrawAdjustmentHandles(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.HandlesVisualStyle,MindFusion.Diagramming.Wpf.HandlesVisualStyle,System.Windows.Rect,System.Double,MindFusion.Diagramming.Wpf.AdjustmentHandles,System.Boolean,MindFusion.Diagramming.Wpf.HandlesStyle,System.Double,MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Draws node adjustment handles of the specified style.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.UnionRects(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Returns the smallest possible rectangle containing
            both of the specified rectangles.
            </summary>
            <param name="a">
            The first rectangle.
            </param>
            <param name="b">
            The second rectangle.
            </param>
            <returns>
            A .NET Rect instance that represents the union of the specified arguments.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.UnionNonEmptyRects(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Returns the smallest possible rectangle containing
            both of the specified rectangles, but only if the
            rectangles are non-empty.
            </summary>
            <param name="rc1">
            The first rectangle.
            </param>
            <param name="rc2">
            The second rectangle.
            </param>
            <returns>
            A .NET Rect instance that represents the union of the specified arguments.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.PointInRect(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Checks whether the specified rectangle contains the specified point.
            </summary>
            <param name="pt">
            The point to be checked.
            </param>
            <param name="rc">
            The rectangle to be checked.
            </param>
            <returns>
            true if the specified rectangle contains the specified point;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.SymmetricPt(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates the symmetric point of the specified point with
            respect to the specified center.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.GetCenter(System.Windows.Rect)">
            <summary>
            Returns the center point of the specified rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.GetPathIntersection(System.Windows.Media.Geometry,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Calculates the intersection point between the specified path
            and the segment defined by the specified point pair.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.GetProjections(System.Windows.Point,System.Windows.Rect,System.Windows.Point[])">
            <summary>
            Calculates the projections of the specified point on the
            sides of the specified rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.GetBezierPt(MindFusion.Diagramming.Wpf.PointCollection,System.Int32,System.Double)">
            <summary>
            Gets the point from the specified bezier curve,
            corresponding to the specified parameter t [0, 1].
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.ApproxBezier(System.Windows.Point[],System.Int32,System.Int32)">
            <summary>
            Approximates the specified Bézier curve with a polyline.
            The specified quality parameter varies in the interval
            [1, ...) and is proportional to the number of points
            in the resulting polyline.
            </summary>
            <param name="points">
            An array of Point objects, which defines the Bézier curve.
            </param>
            <param name="startIdx">
            The index of the first point to be processed in points.
            </param>
            <param name="quality">
            The quality of the produced approximation.
            </param>
            <returns>
            An instance of the PointCollection class containing the points
            of the calculated approximation.
            </returns>
            <remarks>
            This method supports the WpfDiagram infrastructure and is
            not intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.ApproxEllipse(System.Windows.Rect,System.Int32)">
            <summary>
            Approximates the ellipse contained in the specified
            rectanlge with a polyline. The specified quality parameter
            varies in the interval [1, ...) and is proportional to the
            number of points in the resulting polyline.
            </summary>
            <param name="rect">
            A Rect instance, which defines the source ellipse.
            </param>
            <param name="quality">
            The quality of the produced approximation.
            </param>
            <returns>
            An instance of the PointCollection class containing the points
            of the calculated approximation.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.MidPoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the middle point of the segment defined
            by the specified points.
            </summary>
            <param name="pt1">
            The first point.
            </param>
            <param name="pt2">
            The second point.
            </param>
            <returns>
            A .NET Point instance that represents the middle point.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.Rad(System.Double)">
            <summary>
            Returns the specified angle from degrees to raidans.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.GetTextEllipsis(MindFusion.Diagramming.Wpf.StringFormat)">
            <summary>
            Returns whether the ellipsis is enabled according to
            the specified text format.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.GetLoadedType(System.String,System.String)">
            <summary>
            Gets the type with the specified name from the specified assembly.
            </summary>
            <param name="typeName">
            The full name of the type.
            </param>
            <param name="asmName">
            The full name of the containing assembly.
            </param>
            <returns>
            An instance of the .NET Type class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.GetLoadedType(System.String)">
            <summary>
            Gets the type with the specified name.
            </summary>
            <param name="typeName">
            The full name of the type.
            </param>
            <returns>
            An instance of the .NET Type class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.GetLoadedAssembly(System.String)">
            <summary>
            Gets the specified assembly.
            </summary>
            <param name="asmName">
            The full name of the assembly.
            </param>
            <returns>
            An instance of the .NET Assembly class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.GetRectPtPercent(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Calculates the percents values corresponding to the
            specified point relative to the specified rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.GetRectPtPercent(System.Windows.Point,System.Windows.Size)">
            <summary>
            Calculates the percents values corresponding to the
            specified point relative to the specified rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.RectPtFromPercent(System.Windows.Point,System.Windows.Size)">
            <summary>
            Calculates the point corresponding to the specified
            percent values relative to the specified rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.RectPtFromPercent(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Calculates the point corresponding to the specified
            percent values relative to the specified rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.PointInHandle(System.Windows.Point,System.Int32@,System.Windows.Rect,System.Double,MindFusion.Diagramming.Wpf.AdjustmentHandles,System.Double,MindFusion.Diagramming.Wpf.HandlesStyle,System.Double,MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Calculates the index of the manipulation handle
            containing the specified point.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.AddToRect(System.Windows.Rect@,System.Double,System.Double)">
            <summary>
            Inflate/deflate the specified rectangle with the specified values.
            </summary>
            <param name="rect">
            The .NET Rect instance that should be modified.
            </param>
            <param name="w">
            The increment/decrement of the rectangle width.
            </param>
            <param name="h">
            The increment/decrement of the rectangle height.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.RectangleToPoints(System.Windows.Rect)">
            <summary>
            Returns the points of the specified rectangle as an array.
            </summary>
            <param name="r">
            The source rectangle.
            </param>
            <returns>
            An array of Point objects, which contains the vertices of the rectangle.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.DrawExpandButton(System.Windows.Media.DrawingContext,System.Boolean,System.Windows.Rect,MindFusion.Diagramming.Wpf.GraphicsUnit,System.Windows.Media.Brush,MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Renders an expand/collapse button to the specified graphics.
            </summary>
            <param name="graphics">
            The DrawingContext object that represents the target of the
            drawing operation.
            </param>
            <param name="expanded">
            Specifies whether the drawn button is expanded or collapsed.
            </param>
            <param name="bounds">
            The destination rectangle of the button.
            </param>
            <param name="measureUnit">
            The current measure unit.
            </param>
            <param name="shadowBrush">
            The Brush to use in order to draw the button shadow.
            </param>
            <param name="item">
            The item whose expand button is being drawn.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.DrawExpandButton(System.Windows.Media.DrawingContext,System.Boolean,System.Windows.Rect,MindFusion.Diagramming.Wpf.GraphicsUnit,System.Boolean,System.Windows.Media.Color)">
            <summary>
            Renders an expand/collapse button on the specified IGraphics canvas.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.Sign(System.Double,System.Double,System.Double)">
            <summary>
            Similar to Math.Sign but zero is a range instead of point
            </summary>
            <param name="val"></param>
            <param name="zeroLow"></param>
            <param name="zeroHigh"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.Sign(System.Windows.Point,System.Windows.Rect)">
            <summary>
            2D version of Sign()
            </summary>
            <param name="p"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.GetIconRect(System.Windows.Rect,MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets the expander bounding rectangle relative
            to the specified node's bounding rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InternalUtils.GetExpandIconSize(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Gets the size of the expand/collapse manipulator icon.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.HatchStyle">
            <summary>
            Replaces System.Drawing.HatchStyle
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.GroupAttachCmd">
            <summary>
            Implements an addition of a subordinated item to a group.
            </summary>
            <remarks>
            Instances of this class are implicitly created by WpfDiagram
            in response to calls to any of the Attach methods of the Group
            class. References to those instances are passed to handlers of
            the ActionRecorded, ActionUndone and ActionRedone events.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.GroupAttachCmd.#ctor(MindFusion.Diagramming.Wpf.Group,MindFusion.Diagramming.Wpf.Group.Attachment)">
            <summary>
            Intializes a new instance of the GroupAttachCmd class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.GroupAttachCmd.Execute">
            <summary>
            Executes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.GroupAttachCmd.Execute(System.Boolean)">
            <summary>
            Carries out the command action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.GroupAttachCmd.Undo">
            <summary>
            Undoes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.GroupAttachCmd.Redo">
            <summary>
            Redoes the command action.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.GroupAttachCmd.Group">
            <summary>
            Gets the group associated with the command.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.GroupAttachCmd.Item">
            <summary>
            Gets a reference to the subordinated item removed from
            the group by this command.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.GraphSplitter">
            <summary>
            Provides a method that splits a graph to its interconnected subgraphs.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.GraphSplitter.Split(MindFusion.Layout.IGraph,MindFusion.Layout.IGraphBuilder)">
            <summary>
            Divides the supplied graph to its connected subgraphs.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DiagramView">
            <summary>
            DiagramView allows adding of more than one view of the same Diagram instance to an application.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView.#ctor">
            <summary>
            Creates DiagramView instance
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView.TransformToDocument(System.Windows.Point)">
            <summary>
            Transforms the point from view coordinates to diagram document coordinates
            </summary>
            <param name="viewPos"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView.ActivateView">
            <summary>
            Make this view contain the real Diagram. A Diagram instance can be a child of only one view, other
            views contain dumb objects that only look like the diagram.
            In order to receive events a view must be activated
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView.UpdateTransform">
            <summary>
            Recalculate transform to keep effective zoom factor equal to ZoomFactor property
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView.GetActiveView(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Returns the active DiagramView ancestor of the diagram if any
            </summary>
            <param name="diagram"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramView.GetActiveView">
            <summary>
            Returns the active DiagramView ancestor of the diagram if any
            </summary>
            <returns></returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramView.Diagram">
            <summary>
            The Diagram instance that could be shared with other views
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramView.View">
            <summary>
            A component that renders the diagram inside inactive views.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramView.ZoomFactor">
            <summary>
            Gets or sets the effective zoom factor used to scale up or down the Diagram. This property takes into
            consideration the Diagram.ZoomFactor so changing it will not cause visual change
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramView.ScrollX">
            <summary>
            Horizontal scroll in document coordinates
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramView.ScrollY">
            <summary>
            Vertical scroll in document coordinates
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramView.InactiveViewOpacity">
            <summary>
            The opacity of inactive views.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Diagram">
            <summary>
            Implements the main diagram editor class. It acts as view, model and
            controller at the same time. In addition, it defines a set of properties
            that define the initial values of the diagram elements attributes.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.IItemFactory">
            <summary>
            Defines an interface for constructing IPersists objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.IItemFactory.CreateItem(System.String)">
            <summary>
            Creates a new object given its item class string identifier.
            </summary>
            <param name="itemClass">
            The class string id of the item to create.
            </param>
            <returns>
            An instance of a class implementing the IPersists interface
            corresponding to the class with the specified id.
            </returns>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.IItemFactory.InstantiateItem">
            <summary>
            Lets external classes handle item instantiation.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.IItemFactory.TypeTable">
            <summary>
            Gets the table with all registered classes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.IItemFactory.ClsidTable">
            <summary>
            Gets the table with all registered classes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.#ctor">
            <summary>
            Initializes a new instance of the Diagram class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.BeginInit">
            <summary>
            FrameworkElement.BeginInit override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.EndInit">
            <summary>
            FrameworkElement.EndInit override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.SaveToString">
            <summary>
            Encodes the diagram contents into an ASCII string.
            </summary>
            <returns>
            A string containing the encoded diagram data.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.SaveToString(MindFusion.Diagramming.Wpf.SaveToStringFormat,System.Boolean)">
            <summary>
            Encodes the diagram contents into an ASCII string using the
            specified format and optionally clearing the Dirty flag.
            </summary>
            <param name="format">
            A member of the SaveToStringFormat enumeration.
            </param>
            <param name="clearDirty">
            Indicates whether the Dirty flag should be cleared.
            </param>
            <returns>
            A string containing the encoded diagram data.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.LoadFromString(System.String)">
            <summary>
            Decodes diagram contents from a string that was created
            with SaveToString.
            </summary>
            <param name="str">
            A string containing the serialized diagram contents.
            </param>
            <remarks>
            Loads a diagram document from a string. The string must have
            been created by the SaveToString method.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.SaveProperties(System.String,System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the diagram properties under the specified name
            using the specified persist context.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.LoadProperties(System.String,System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext,System.Int32)">
            <summary>
            Loads the diagram properties under the specified name
            using the specified persist context.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnInstantiateItem(MindFusion.Diagramming.Wpf.InstantiateItemEventArgs)">
            <summary>
            Raises the InstantiateItem event with the specified argument.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.MindFusion#Diagramming#Wpf#IItemFactory#CreateItem(System.String)">
            <summary>
            IItemFactory.CreateItem explicit implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RegisterItemClass(System.Type,System.String,System.Int32)">
            <summary>
            Registers a diagram item class for serialization support.
            </summary>
            <param name="itemClass">
            A Type instance identifying the item class.
            </param>
            <param name="classId">
            A class identifier to use when saving and loading items
            of the specified type.
            </param>
            <param name="classVersion">
            A revision number of the item's class serialization format.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.SaveToXml(System.String)">
            <summary>
            Saves the diagram to the specified file as an XML document.
            </summary>
            <param name="fileName">
            The full path and name of the disk file where the diagram should be saved.
            </param>
            <remarks>
            Diagram data can be loaded from an XML file or document using
            the LoadFromXml method.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.SaveToXml(System.Xml.XmlDocument)">
            <summary>
            Saves the diagram to the specified XML document.
            </summary>
            <param name="document">
            A .NET XmlDocument object where the diagram should be saved.
            </param>
            <remarks>
            Diagram data can be loaded from an XML file or document using
            the LoadFromXml method.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.LoadFromXml(System.String)">
            <summary>
            Loads the contents of the XML diagram document from the specified file
            into the control.
            </summary>
            <param name="fileName">
            The name of the XML file the data should be read from.
            </param>
            <remarks>
            The method reads a diagram previously saved via the SaveToXml method.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.LoadFromXml(System.Xml.XmlDocument)">
            <summary>
            Loads the contents of the XML diagram document represented by the
            specified XmlDocument into the control.
            </summary>
            <param name="document">
            A .NET XmlDocument object from which to load the diagram data.
            </param>
            <remarks>
            The method reads a diagram previously saved via the SaveToXml method.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.Add(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Adds the specified item to the Diagram.
            </summary>
            <param name="item">
            A new item that should be added to the Diagram.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.Add(MindFusion.Diagramming.Wpf.DiagramItem,System.Boolean)">
            <summary>
            Adds the specified item to the Diagram.
            </summary>
            <param name="item">
            A new item that should be added to the flowchart.
            </param>
            <param name="select">
            Specifies whether the item should be selected
            after adding it to the flowchart.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.Add(MindFusion.Diagramming.Wpf.Group,System.Boolean)">
            <summary>
            Adds the specified group to the diagram.
            </summary>
            <param name="group">
            A new Group object that should be added to the diagram.
            </param>
            <param name="saveAttachments">
            Specifies whether to save the attachment information for later redo.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.DeleteObject(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Removes the specified item from the Diagram.
            </summary>
            <param name="item">
            Refers to the item that should be removed.
            </param>
            <returns>
            true if the item was deleted successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.AddToCollection(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Adds the specified chart object to the corresponding diagram collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RemoveFromCollection(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Removes the specified object from the corresponding diagram collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.AddItem(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Invoked by the AddItemCmd and RemoveItemCmd classes to
            effectively add the specified item to the Diagram.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetVisualChild(System.Int32)">
            <summary>
            Visual.GetVisualChild override.
            </summary>
            <param name="index">
            Zero-based index of the requested child element in the collection.
            </param>
            <returns>
            The requested child element.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RemoveItem(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Invoked by the AddItemCmd and RemoveItemCmd classes to
            effectively remove the specified item from the Diagram.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RemoveFromSelection(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Removes the specified item from the selection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ClearAll">
            <summary>
            Removes all items from the diagram.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.DestroyGroup(MindFusion.Diagramming.Wpf.Group)">
            <summary>
            Destroys the specified group; the group items are not deleted.
            </summary>
            <param name="group">
            The group that should be destroyed.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.DeleteGroup(MindFusion.Diagramming.Wpf.Group)">
            <summary>
            Removes the specified group from the group collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.CopySelection(MindFusion.Diagramming.Wpf.Diagram,System.Boolean,System.Boolean)">
            <summary>
            Creates a copy of the currently selected objects and groups.
            </summary>
            <param name="source">
            The source diagram.
            </param>
            <param name="unconnectedLinks">
            true to allow copying unconnected links; otherwise, false.
            </param>
            <param name="copyGroups">
            true to copy group information; otherwise, false.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.PasteSelection(MindFusion.Diagramming.Wpf.Diagram,MindFusion.Diagramming.Wpf.SelectionCopy,MindFusion.Diagramming.Wpf.Commands.CompositeCmd,System.Windows.Vector)">
            <summary>
            Adds the specified items and groups to the specified diagram document.
            </summary>
            <param name="doc">
            A Diagram object to which the items should be added.
            </param>
            <param name="data">
            A SelectionCopy object returned by a previous call to CopySelection.
            </param>
            <param name="cmd">
            A CompositeCmd object where the items state should be recorded for later
            undo or redo.
            </param>
            <param name="offset">
            Offset of pasted items from their original positions.
            </param>
            <returns>
            true if data contains any items; otherwise, false.
            </returns>
            <remarks>
            This method can be used in conjunction with CopySelection to copy
            selected items from one Diagram instance to another.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.Invalidate(System.Object,System.Windows.Rect)">
            <summary>
            Invalidates the specified rectangle of the diagram,
            causing it to be repainted.
            </summary>
            <param name="sender">
            The object that causes the diagram invalidation.
            </param>
            <param name="invalidRect">
            A RectangleF instance specifying the region that should be
            repainted. If not specified, the whole diagram will be repainted.
            </param>
            <remarks>
            This method raises the Repaint event. DiagramView objects handle
            Repaint by redrawing the specified diagram region.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.CreateImage">
            <summary>
            Creates a bitmap containing an image of the Diagram.
            </summary>
            <returns>
            A BitmapSource instance containing the diagram image.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.CreateImage(System.Double)">
            <summary>
            Creates a bitmap containing an image of the Diagram.
            </summary>
            <returns>
            A Bitmap instance containing the diagram image.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.DrawStyledText(System.Windows.Media.DrawingContext,System.String,MindFusion.Diagramming.Wpf.ITextAttributes,System.Windows.Rect)">
            <summary>
            Draws a formatted text string, the same way text is drawn in shape nodes
            whose EnableStyledText property is set to true. This method lets you
            display styled text in custom-drawn nodes or links.
            </summary>
            <param name="graphics">
            A .NET DrawingContext object used to draw the text.
            </param>
            <param name="text">
            The text that should be drawn, including formatting tags.
            </param>
            <param name="textAttributes">A TextAttributes instance that specifies the text appearance.</param>
            <param name="textBounds">
            The bounds of the text layout rectangle.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.DrawText(System.String,System.Windows.Rect,MindFusion.Text.DrawTextHint)">
            <summary>
            Handles styled text rendering.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.DrawGrid(System.Windows.Media.DrawingContext)">
            <summary>
            Renders the diagram grid.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.SetRenderOptions(MindFusion.Diagramming.Wpf.RenderOptions)">
            <summary>
            Temporarily sets the specified rendering options.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ResetRenderOptions">
            <summary>
            Restores the rendering options to what they were
            before calling SetRenderOptions.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.MeasureString(System.String,MindFusion.Diagramming.Wpf.ITextAttributes,System.Int32)">
            <summary>
            Measures the specified text when drawn with the specified font
            in an area with the specified width taking into consideration
            the current affine transform of the diagram.
            </summary>
            <param name="text">
            The string to measure.
            </param>
            <param name="textAttributes">A TextAttributes instance that specifies the text appearance.</param>
            <param name="maxWidth">
            The maximum width of the string.
            </param>
            <returns>
            This method returns a Size structure that represents the size of
            the string text when drawn with the font parameter and the
            stringFormat parameter.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.MeasureString(System.String,MindFusion.Diagramming.Wpf.ITextAttributes,System.Double,MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Measures the specified text when drawn with the specified font
            in the specified rectangle area taking into consideration the
            current affine transform of the diagram.
            </summary>
            <param name="text">
            The string to measure.
            </param>
            <param name="textAttributes">
            A ITextAttributes object that represents font information
            </param>
            <param name="maxWidth"></param>
            <param name="unit">
            Unused.
            </param>
            <returns>
            This method returns a Rect structure that represents the size of
            the string text when drawn with the font parameter and the
            stringFormat parameter.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.DrawActiveSelHandles(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the selection handles of the current active object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnVisualParentChanged(System.Windows.DependencyObject)">
            <summary>
            FrameworkElement.OnVisualParentChanged override.
            </summary>
            <param name="oldParent">
            The old parent element.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.SetAutoAnchors(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Sets the auto anchors node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.SetAutoHandles(System.Windows.Point)">
            <summary>
            Updates the current auto handles object with the
            object located at the specified position.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.HitTestManipulators(System.Windows.Point)">
            <summary>
            Tests whether the specified point is within the manipulator
            of a diagram object and triggers the manipulator.
            </summary>
            <param name="pt">
            A Point instance specifying the point to test.
            </param>
            <returns>
            true to indicate whether there is a manipulator at the specified
            location; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.MergePoints(System.Windows.Point,System.Windows.Point)">
            <summary>
            Checks whether the specified points representing
            arrow control points are close enough so that they
            are allowed to merge.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.DeleteItem(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Removes the specified item from the Diagram.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            UIElement.OnPreviewMouseDown override.
            </summary>
            <param name="e">
            The System.Windows.Input.MouseButtonEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Control.OnMouseMove override.
            </summary>
            <param name="e">
            The System.Windows.Input.MouseEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            UIElement.OnPreviewMouseUp override.
            </summary>
            <param name="e">
            The System.Windows.Input.MouseButtonEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            UIElement.OnMouseDown override.
            </summary>
            <param name="e">
            The System.Windows.Input.MouseButtonEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            UIElement.OnMouseUp override.
            </summary>
            <param name="e">
            The System.Windows.Input.MouseButtonEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetCurrBehavior">
            <summary>
            Returns the current Behavior object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.CancelDrag">
            <summary>
            Cancels the current drag operation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetButtonIndex(MindFusion.Diagramming.Wpf.MouseButton)">
            <summary>
            Returns a 0-based index corresponding to the specified
            mouse button.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Simulates a MouseDown event on the control.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ButtonMappedTo(MindFusion.Diagramming.Wpf.MouseButton,MindFusion.Diagramming.Wpf.MouseButtonActions)">
            <summary>
            Determines whether an action is mapped to the specified mouse button.
            </summary>
            <param name="button">A MouseButtons value that identifies the button.</param>
            <param name="action">A MouseButtonActions value that identifies the action.</param>
            <returns>true is the button is used to perform the specified action, otherwise false.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.BeginEdit(MindFusion.Diagramming.Wpf.InplaceEditable)">
            <summary>
            Begins in-place editing of the specified object.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.BeginEdit(MindFusion.Diagramming.Wpf.InplaceEditable,System.Windows.Point)">
            <summary>
            Enters inplace-edit mode, letting the user edit the text of
            the specified item.
            </summary>
            <param name="editable">
            The diagram item or table's cell whose text should be edited.
            </param>
            <param name="mousePosition">
            A Point specifying where the in-place edit box should appear.
            </param>
            <remarks>
            If AllowInplaceEdit is enabled, the user can start editing the
            text of an item by double-clicking the item.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.EndEdit(System.Boolean)">
            <summary>
            Exits inplace-edit mode and either accepts or rejects the changes
            made to the item's text.
            </summary>
            <param name="accept">
            true to accept changes made to text; false to reject them.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnInplaceTextBoxKeyPress(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the KeyPressed event on the in-place text box.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ScrollStayInDoc(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Scrolls to the specified values ensuring that the new
            scroll position doesn't go beyond document bounds.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ScrollTo(System.Windows.Point)">
            <summary>
            Scrolls the document to the specified point.
            </summary>
            <param name="newTopLeft">
            The point to which it should be
            scrolled to, in the current units of measure.
            </param>
            <remarks>
            Call the method to move the scroll bar and the current view of
            the document to a new position, as set by the method's parameters.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.CheckAutoScroll(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked during mouse move to check whether autoscrolling
            should be performed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnAutoScrollTimer(System.Object,System.EventArgs)">
            <summary>
            Handles the Tick event of the autoscroll timer.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnDragOverNode(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Called when an item is being dragged over a node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnDropOverNode(MindFusion.Diagramming.Wpf.DiagramNode,MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Called when an item is dropped over a node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ResizeToFitItem(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Resizes the document extents so that the specified
            item is contained within.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.SizeDocForItems">
            <summary>
            Resize the document extents so that all diagram items
            are fully contained within.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RerouteLink(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Determines whether a link must be rerouted.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RouteAllLinks(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Reroutes all links.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RouteAllLinks">
            <summary>
            Routes all links in the diagram in a way they do not cross nodes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ResetDocSize">
            <summary>
            Called in response to a change in the document extends in
            order to update scroller positions and raise the appropriate events.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.PixelToUnit(System.Windows.Point)">
            <summary>
            Converts the specified point from client to document
            coordinates ignoring the current scale transformation.
            </summary>
            <param name="point">
            The Point instance to convert.
            </param>
            <returns>
            A Point representing the diagram coordinates of the client point
            specified as an argument.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.UnitToPixel(System.Windows.Point)">
            <summary>
            Converts the specified point from document to client
            coordinates ignoring the current scale transformation.
            </summary>
            <param name="point">
            The Point instance to convert.
            </param>
            <returns>
            A Point representing the client coordinates of the diagram point
            specified as an argument.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetContentBounds(System.Boolean,System.Boolean)">
            <summary>
            Returns the smallest rectangle that bounds all diagram objects.
            </summary>
            <param name="forPrint">
            Specifies whether only printable items should be considered.
            </param>
            <param name="onlyVisible">
            Specifies whether only visible items should be considered.
            </param>
            <returns>
            The smallest rectangle that bounds all diagram items.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ResizeToFitItems(System.Double)">
            <summary>
            Resizes the document scrollable area so it fits all diagram items.
            </summary>
            <param name="borderGap">
            A gap that should be left as a border around the diagram.
            </param>
            <remarks>
            Resizes the document area to be just as big as needed, for example,
            the smallest rectangle containing all diagram items.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ResizeToFitItems(System.Double,System.Boolean)">
            <summary>
            Resizes the document scrollable area so it fits all diagram items,
            optionally considering ony the visible items.
            </summary>
            <param name="borderGap">
            A gap that should be left as a border around the diagram.
            </param>
            <param name="onlyVisible">
            Specifies whether only the bounds of the Visible items should be
            included in the new document area.
            </param>
            <remarks>
            Resizes the document area to be just as big as needed, for example
            the smallest rectangle containing all diagram items.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.MeasureOverride(System.Windows.Size)">
            <summary>
            Control.MeasureOverride override.
            </summary>
            <param name="availableSize">
            Measurement constraints, a control cannot return a size larger
            than the constraint.
            </param>
            <returns>
            The size of the control.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ArrangeOverride(System.Windows.Size)">
            <summary>
            Control.ArrangeOverride override.
            </summary>
            <param name="finalSize">
            The computed size that is used to arrange the content.
            </param>
            <returns>
            The size of the control.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.BringIntoView(MindFusion.Diagramming.Wpf.DiagramItem,System.Boolean)">
            <summary>
            Scrolls the document area to make the specified object visible.
            </summary>
            <param name="item">the item of interest</param>
            <param name="centered">place the item close to the center of the visible area</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.BringIntoView(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Scrolls the document area to make the specified object visible.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.DocToClient(System.Windows.Point)">
            <summary>
            Transforms points from the document coordinate space to the
            client coordinate space.
            </summary>
            <param name="docPoint">
            An instance of the .NET Point structure, whose coordinates
            should be transformed and returned.
            </param>
            <returns>
            A Point instance, which represents the client coordinates of docPoint.
            </returns>
            <remarks>
            This method is useful when the client (device) coordinates of
            a diagram location are needed. 
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.DocToClient(System.Windows.Rect)">
            <summary>
            Converts the specified rectangle from document to client coordinates.
            </summary>
            <param name="docRect">
            An instance of the .NET Rect structure, whose coordinates should be
            transformed and returned.
            </param>
            <returns>
            A Rect instance, which represents the client coordinates of docRect.
            </returns>
            <remarks>
            This method is useful when the client (device) coordinates of a diagram
            location are needed. 
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ClientToDoc(System.Windows.Point)">
            <summary>
            Transforms points from the client coordinate space to the
            document coordinate space.
            </summary>
            <param name="clientPoint">
            An instance of the .NET Point structure, whose coordinates
            should be transformed and returned.
            </param>
            <returns>
            A .NET Point instance, which represents the document coordinates
            of clientPoint.
            </returns>
            <remarks>
            This method is useful when the document coordinates of a device
            point are needed.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ClientToDoc(System.Windows.Rect)">
            <summary>
            Transforms points from the client coordinate space to the document
            coordinate space.
            </summary>
            <param name="clientRect">
            An instance of the .NET Rect structure, whose coordinates
            should be transformed and returned.
            </param>
            <returns>
            A .NET Rect instance, which represents the document coordinates
            of clientRect.
            </returns>
            <remarks>
            This method is useful when the document coordinates of a rectangle
            are needed.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.SetScrollX(System.Double)">
            <summary>
            Sets the value of the horizontal scroller.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.SetScrollY(System.Double)">
            <summary>
            Sets the value of the vertical scroller.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ZoomIn">
            <summary>
            Zooms document's items thus making them appear closer.
            </summary>
            <remarks>
            Call this method every time you want to make diagram items
            appear nearer and bigger. It increases the ZoomFactor with
            10 each time it executes.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ZoomOut">
            <summary>
            Zooms the diagram out making items appear further away.
            </summary>
            <remarks>
            Call this method if you want to make the diagram items appear
            further and smaller. It decreases the ZoomFactor with 10 each
            time it executes.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ZoomToFit">
            <summary>
            Zooms the view to fit the document contents in the Diagram client area.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ZoomToRect(System.Windows.Rect,System.Boolean)">
            <summary>
            Zooms the view to fit the document contents in the Diagram client area.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ZoomToRect(System.Windows.Rect)">
            <summary>
            Zooms and scrolls the view to fit the specified document
            rectangle in the Diagram's visible area.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.SetZoomFactor(System.Double,System.Windows.Point)">
            <summary>
            Sets the zoom factor, preserving the on-screen position of the specified diagram point.
            </summary>
            <param name="zoomFactor">The new zoom factor.</param>
            <param name="pivotPoint">A Point instance specifying the zoom center.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ZLevelUp(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Moves the specified item up in the Z-order.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ZLevelDown(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Moves the specified item down in the Z-order.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ZTop(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Moves the specified item to the top of the Z-order.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ZBottom(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Moves the specified item to the bottom of the Z-order.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetZIndex(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Calculates the Z-index of the specified item.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.SetZIndex(MindFusion.Diagramming.Wpf.DiagramItem,System.Int32)">
            <summary>
            Changes the Z-index of the specified item.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.UpdateZOrder(System.Int32,System.Boolean)">
            <summary>
            Updates the intrinsic Z-index value of all items in
            the Z-order starting from the item with the specified Z-index.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.UpdateZOrder(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Updates the intrinsic Z-index value of all items in
            the Z-order within the specified range.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.MoveOnTop(System.Windows.Media.Visual)">
            <summary>
            Hopefully a faster way to move single/few visuals on top
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.SetZOrder(MindFusion.Diagramming.Wpf.DiagramItemCollection,System.Boolean)">
            <summary>
            Sets a new Z-order.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RemoveFromZOrder(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Removes the specified item from the Z-order collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetAtZ(System.Int32)">
            <summary>
            Returns the item with the specified Z-index.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetLinksFromZ(System.Boolean,System.Int32)">
            <summary>
            Returns all links below or above the specified Z index.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.SetGroups(MindFusion.Diagramming.Wpf.GroupCollection)">
            <summary>
            Sets a new group collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetNodeAt(System.Windows.Point)">
            <summary>
            Finds and returns the top-most node that lies at the specified location.
            </summary>
            <param name="point">
            A Point instance identifying a diagram location.
            </param>
            <returns>
            The DiagramNode found or a null reference (Nothing in Visual Basic)
            if no item has been found.
            </returns>
            <remarks>
            The method starts searching from the top of the z-order and returns the
            first node that contains the specified point.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetNodeAt(System.Windows.Point,System.Double)">
            <summary>
            Finds and returns the top-most node that lies within the specified
            threshold from the specified location.
            </summary>
            <param name="point">
            A Point instance identifying a diagram location.
            </param>
            <param name="threshold">
            Allowed distance from the node.
            </param>
            <returns>
            The DiagramNode found or a null reference (Nothing in Visual Basic)
            if no node has been found.
            </returns>
            <remarks>
            The method searches starting from the top of z-order and returns the
            first object found.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetNodesAt(System.Windows.Point)">
            <summary>
            Returns the nodes that contain the specified point.
            </summary>
            <param name="point">
            A Point instance identifying a diagram location.
            </param>
            <returns>
            An instance of the DiagramNodeCollection class containing all
            found nodes; null (Nothing in Visual Basic) if no node has been found.
            </returns>
            <remarks>
            This method gives you the possibility to specify search options when
            looking for the nodes occupying some location in the diagram document.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetNodeAt(System.Windows.Point,System.Boolean,System.Boolean)">
            <summary>
            Finds and returns the top-most node that lies at the specified
            location, optionally excluding locked and/or selected nodes from
            the search.
            </summary>
            <param name="point">
            A Point instance identifying a diagram location.
            </param>
            <param name="excludeLocked">
            true if nodes that are locked should be omitted by searching;
            otherwise, false.
            </param>
            <param name="excludeSelected">
            true if nodes that are selected should be omitted by searching;
            otherwise, false.
            </param>
            <returns>
            The DiagramNode found or a null reference (Nothing in Visual Basic)
            if no node has been found.
            </returns>
            <remarks>
            The method searches starting from the top of z-order and returns
            the first object found.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetLinkAt(System.Windows.Point,System.Double)">
            <summary>
            Finds and returns the top-most link that lies at the specified location.
            </summary>
            <param name="pt">
            A Point instance identifying a diagram location.
            </param>
            <param name="maxDist">
            The maximal distance between the point and a link, within which to
            consider the point as lying on the link.
            </param>
            <returns>
            The DiagramLink found or a null reference (Nothing in Visual Basic) if
            no item has been found.
            </returns>
            <remarks>
            Call the method to get the link at a certain place in the document.
            The method searches starting from the top of z-order and returns
            the first link found.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetLinkAt(System.Windows.Point,System.Double,System.Boolean)">
            <summary>
            Finds and returns the top-most link that lies at the specified location,
            optionally excluding locked links from the search.
            </summary>
            <param name="pt">
            A Point instance identifying a diagram location.
            </param>
            <param name="maxDist">
            The maximal distance between the point and a link, within which to consider
            the point as lying on the link.
            </param>
            <param name="exclLocked">
            Specifies that locked links should be ignored by the search.
            </param>
            <returns>
            The DiagramLink found or a null reference (Nothing in Visual Basic) if
            no item has been found.
            </returns>
            <remarks>
            Call the method to get the link at a certain place in the document.
            The method searches starting from the top of z-order and returns
            the first link found.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetLinkAt(System.Windows.Point,System.Double,System.Boolean,System.Int32@)">
            <summary>
            Finds and returns the top-most link that lies at the specified
            location, optionally excluding locked links from the search.
            The zero-based index of the exact link segment at the specified
            position is also returned.
            </summary>
            <param name="pt">
            A Point instance identifying a diagram location.
            </param>
            <param name="maxDist">
            The maximal distance between the point and a link, within which to
            consider the point as lying on the link.
            </param>
            <param name="exclLocked">
            Specifies that locked links should be ignored by the search.
            </param>
            <param name="segmNum">
            The zero-based index of the link's segment at which the point is
            lying is returned here.
            </param>
            <returns>
            The DiagramLink found or a null reference (Nothing in Visual Basic) if
            no item has been found.
            </returns>
            <remarks>
            Call the method to get the link at a certain place in the document.
            The method searches starting from the top of z-order and returns
            the first link found.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetItemAt(System.Windows.Point,System.Boolean)">
            <summary>
            Finds and returns the top-most diagram item that lies at
            the specified location.
            </summary>
            <param name="pt">
            A Point instance identifying a diagram location.
            </param>
            <param name="exclLocked">
            Specifies whether to ignore locked items.
            </param>
            <returns>
            The DiagramItem found or null (Nothing in Visual Basic) if no
            item has been found.
            </returns>
            <remarks>
            Call the method to get the item at a certain location in the
            diagram. The method searches starting from the top of z-order
            and returns the first item found.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.CopyToClipboard(System.Boolean)">
            <summary>
            Copies the current selection of items to the clipboard.
            </summary>
            <param name="persist">
            true if you want data to remain on the Clipboard after
            this application exits; otherwise, false.
            </param>
            <returns>
            true if items were successfully copied to clipboard; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.CopyToClipboard(System.Boolean,System.Boolean)">
            <summary>
            Copies the current selection of items to the clipboard.
            </summary>
            <param name="persist">
            true if you want data to remain on the Clipboard after
            this application exits; otherwise, false.
            </param>
            <param name="groups">
            true to copy item groups; otherwise, false.
            </param>
            <returns>
            true if items were successfully copied; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.CutToClipboard(System.Boolean)">
            <summary>
            Cuts the currently selected items to the Windows clipboard.
            </summary>
            <param name="copy">
            true if you want data to remain on the clipboard after
            this application exits; otherwise, false.
            </param>
            <returns>
            true if items are successfully copied to clipboard; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.PasteFromClipboard(System.Windows.Vector)">
            <summary>
            Pastes diagram items from the Windows clipboard.
            </summary>
            <param name="offset">
            The offset of pasted items from their original positions.
            </param>
            <returns>
            true if successful; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.PasteFromClipboard(System.Windows.Vector,System.Boolean)">
            <summary>
            Pastes diagram items from the Windows clipboard.
            </summary>
            <param name="offset">
            The offset of pasted items from their original positions.
            </param>
            <param name="unconnectedLinks">
            true to allow pasting links whose origin or destination node has not
            been copied; otherwise, false.
            </param>
            <returns>
            true if successful; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.Print">
            <summary>
            Shows Print dialog and prints the diagram
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.PrintPreview">
            <summary>
            Shows Print preview dialog for the diagram
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.PrintPreview(System.String)">
            <summary>
            Shows Print preview dialog for the diagram
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.VisitNodes(System.Windows.Point,MindFusion.Diagramming.Wpf.Diagram.VisitNode,MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Visits the diagram nodes in reverse Z order.
            </summary>
            <param name="point">Location of the nodes that should be visited.</param>
            <param name="visitNode">An operation to be performed on the nodes.</param>
            <param name="relatedItem">Parameter to pass to the visitNode operation.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.FindNode(System.Object)">
            <summary>
            Finds the node that has the specified tag value.
            </summary>
            <param name="tagValue">
            A .NET object assigned as a tag and characterizing the
            node to be searched for.
            </param>
            <returns>
            The DiagramNode instance if found; otherwise, null
            (Nothing in Visual Basic).
            </returns>
            <remarks>
            Use this method to find a node that has been marked earlier
            with the specified tag.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.FindLink(System.Object)">
            <summary>
            Finds the arrow that has the specified tag value.
            </summary>
            <param name="tagValue">
            A .NET object assigned as a tag and characterizing the
            link to be searched for.
            </param>
            <returns>
            The DiagramLink instance if found; otherwise, null
            (Nothing in Visual Basic).
            </returns>
            <remarks>
            Use this method to find a link that has been marked
            earlier with the specified tag.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.FindGroup(System.Object)">
            <summary>
            Finds the group that has the specified tag value.
            </summary>
            <param name="tagValue">
            A .NET object assigned as a tag and characterizing the
            group to be searched for.
            </param>
            <returns>
            The Group instance if found; otherwise, null (Nothing in Visual Basic).
            </returns>
            <remarks>
            Use this method to find a group that has been marked
            earlier with the specified tag.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.AlignPointToGrid(System.Windows.Point)">
            <summary>
            Returns a point of the alignment grid nearest to the one
            passed as an argument.
            </summary>
            <param name="point">
            A point specified in diagram coordinates.
            </param>
            <returns>
            A point from the alignment grid.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RectRestrict(System.Windows.Rect)">
            <summary>
            Checks whether the specified rectangle is a valid destination
            rectangle for a diagram item.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetIntersectingObjects(System.Windows.Rect,MindFusion.Diagramming.Wpf.DiagramItemCollection,System.Boolean,System.Boolean)">
            <summary>
            Collects the chart items whose bounds intersect or are contained
            in the specified rectangle, storing them in the specified
            collection.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetIntersectingObjectsCount(System.Windows.Rect,System.Boolean)">
            <summary>
            Calculates the number of chart objects whose bounds intersect or
            are contained in the specified rectagnle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ItemIntersectedBy(System.Windows.Point,System.Windows.Point,MindFusion.Diagramming.Wpf.DiagramItem,MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Returns the topmost node whose bounding rectangle is
            intersected by the line segment, defined by the specified points.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetNearestNode(System.Windows.Point,System.Double,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Returns the nearest node whose bounding rectangle is
            intersected by the circle, defined by origin point and radius.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetNodesInViewport">
            <summary>
            Returns all nodes visible in the current viewport.
            </summary>
            <returns>A DiagramNodeCollection that contains the viewport nodes.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ClearRuntimeData(MindFusion.Diagramming.Wpf.RuntimeDataKey)">
            <summary>
            Clears the runtime data associated with the specified key from all items.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.SetDirty">
            <summary>
            Marks the document as "dirty".
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ExecuteCommand(MindFusion.Diagramming.Wpf.Commands.Command)">
            <summary>
            Executes the specified command on this diagram.
            </summary>
            <param name="cmd">
            The Command to execute.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLaneGridInvalidated(System.Object,System.EventArgs)">
            <summary>
            Handles the Invalidated event of the lane grid.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLaneGridAppearanceChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the AppearanceChanged event of the lane grid.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetDiagramItem(System.Windows.DependencyObject)">
            <summary>
            Returns the value of the DiagramItem attached property,
            representing the DiagramItem associated with a UIElement.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.GetItemBounds(System.Windows.UIElement)">
            <summary>
            Retrieves the bounding rectangle of the specified item
            within the current diagram.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.SetItemBounds(System.Windows.UIElement,System.Windows.Rect)">
            <summary>
            Sets the location and size of the specified item within
            the current diagram.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnItemAdded(MindFusion.Diagramming.Wpf.ItemEventArgs)">
            <summary>
            Raises the ItemAdded event.
            </summary>
            <param name="e">
            An ItemEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseItemAdded(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Raises the ItemAdded event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnItemRemoved(MindFusion.Diagramming.Wpf.ItemEventArgs)">
            <summary>
            Raises the ItemRemoved event.
            </summary>
            <param name="e">
            An ItemEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseItemRemoved(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Raises the ItemRemoved event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnInitializeNode(MindFusion.Diagramming.Wpf.NodeEventArgs)">
            <summary>
            Raises the InitializeNode event.
            </summary>
            <param name="e">
            A NodeEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnInitializeLink(MindFusion.Diagramming.Wpf.LinkEventArgs)">
            <summary>
            Raises the InitializeLink event.
            </summary>
            <param name="e">
            A LinkEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseInitialize(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Raises the Initialize event corresponding to the specified diagram item.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnNodeCreating(MindFusion.Diagramming.Wpf.NodeValidationEventArgs)">
            <summary>
            Raises the NodeCreating event.
            </summary>
            <param name="e">
            A NodeValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLinkCreating(MindFusion.Diagramming.Wpf.LinkValidationEventArgs)">
            <summary>
            Raises the LinkCreating event.
            </summary>
            <param name="e">
            A LinkValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseCreating(MindFusion.Diagramming.Wpf.DiagramItem,MindFusion.Diagramming.Wpf.InteractionState)">
            <summary>
            Raises the appropriate Creating event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnNodeCreated(MindFusion.Diagramming.Wpf.NodeEventArgs)">
            <summary>
            Raises the NodeCreated event.
            </summary>
            <param name="e">
            A NodeEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLinkCreated(MindFusion.Diagramming.Wpf.LinkEventArgs)">
            <summary>
            Raises the LinkCreated event.
            </summary>
            <param name="e">
            A LinkEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseCreated(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Raises the appropriate *Created event according to the type of
            the specified item.
            </summary>
            <param name="item">
            The DiagramItem related to the event.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnNodeModifying(MindFusion.Diagramming.Wpf.NodeValidationEventArgs)">
            <summary>
            Raises the NodeModifying event.
            </summary>
            <param name="e">
            A NodeValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLinkModifying(MindFusion.Diagramming.Wpf.LinkValidationEventArgs)">
            <summary>
            Raises the LinkModifying event.
            </summary>
            <param name="e">
            A LinkValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnSelectionMoving(MindFusion.Diagramming.Wpf.ValidationEventArgs)">
            <summary>
            Raises the SelectionMoving event.
            </summary>
            <param name="e">
            A ValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnNodeStartModifying(MindFusion.Diagramming.Wpf.NodeValidationEventArgs)">
            <summary>
            Raises the NodeStartModifying event.
            </summary>
            <param name="e">
            A NodeValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLinkStartModifying(MindFusion.Diagramming.Wpf.LinkValidationEventArgs)">
            <summary>
            Raises the LinkStartModifying event.
            </summary>
            <param name="e">
            A LinkValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseModifying(MindFusion.Diagramming.Wpf.DiagramItem,MindFusion.Diagramming.Wpf.InteractionState,System.Boolean)">
            <summary>
            Raises the appropriate Modifying event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnNodeModified(MindFusion.Diagramming.Wpf.NodeEventArgs)">
            <summary>
            Raises the NodeModified event.
            </summary>
            <param name="e">
            A NodeEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseModified(MindFusion.Diagramming.Wpf.DiagramNode,System.Windows.Point,MindFusion.Diagramming.Wpf.AdjustmentHandles)">
            <summary>
            Raises the NodeModified event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLinkModified(MindFusion.Diagramming.Wpf.LinkEventArgs)">
            <summary>
            Raises the LinkModified event.
            </summary>
            <param name="e">
            A LinkEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseModified(MindFusion.Diagramming.Wpf.DiagramLink,System.Windows.Point,System.Int32)">
            <summary>
            Raises the LinkModified event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnNodeClicked(MindFusion.Diagramming.Wpf.NodeEventArgs)">
            <summary>
            Raises the NodeClicked event.
            </summary>
            <param name="e">
            A NodeEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLinkClicked(MindFusion.Diagramming.Wpf.LinkEventArgs)">
            <summary>
            Raises the LinkClicked event.
            </summary>
            <param name="e">
            A LinkEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnCellClicked(MindFusion.Diagramming.Wpf.CellEventArgs)">
            <summary>
            Raises the CellClicked event.
            </summary>
            <param name="e">
            A CellEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseClicked(MindFusion.Diagramming.Wpf.DiagramItem,System.Windows.Point,MindFusion.Diagramming.Wpf.MouseButton)">
            <summary>
            Raises the appropriate *Clicked event according to the type of
            the specified item.
            </summary>
            <param name="item">
            The DiagramItem related to the event.
            </param>
            <param name="mousePosition">
            The current mouse position, in document coordinates.
            </param>
            <param name="mouseButton">
            The mouse button related to the event.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnNodeDoubleClicked(MindFusion.Diagramming.Wpf.NodeEventArgs)">
            <summary>
            Raises the NodeDoubleClicked event.
            </summary>
            <param name="e">
            A NodeEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLinkDoubleClicked(MindFusion.Diagramming.Wpf.LinkEventArgs)">
            <summary>
            Raises the LinkDoubleClicked event.
            </summary>
            <param name="e">
            A LinkEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnCellDoubleClicked(MindFusion.Diagramming.Wpf.CellEventArgs)">
            <summary>
            Raises the CellDoubleClicked event.
            </summary>
            <param name="e">
            A CellEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseDoubleClicked(MindFusion.Diagramming.Wpf.DiagramItem,System.Windows.Point,MindFusion.Diagramming.Wpf.MouseButton)">
            <summary>
            Raises the appropriate *DoubleClicked event according to the type of
            the specified item.
            </summary>
            <param name="item">
            The DiagramItem related to the event.
            </param>
            <param name="mousePosition">
            The current cursor position, in document coordinates.
            </param>
            <param name="mouseButton">
            The mouse button related to the event.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnNodeSelecting(MindFusion.Diagramming.Wpf.NodeValidationEventArgs)">
            <summary>
            Raises the NodeSelecting event.
            </summary>
            <param name="e">
            A NodeValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLinkSelecting(MindFusion.Diagramming.Wpf.LinkValidationEventArgs)">
            <summary>
            Raises the LinkSelecting event.
            </summary>
            <param name="e">
            A LinkValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseSelecting(MindFusion.Diagramming.Wpf.DiagramItem,System.Windows.Point)">
            <summary>
            Raises the appropriate Selecting event.
            </summary>
            <param name="item">
            The DiagramItem related to the event.
            </param>
            <param name="mousePosition">
            The current mouse position, in document coordinates.
            </param>
            <returns>
            true if the operation has been confirmed; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseSelecting(MindFusion.Diagramming.Wpf.DiagramItem,System.Windows.Rect)">
            <summary>
            Raises the appropriate Selecting event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnNodeSelected(MindFusion.Diagramming.Wpf.NodeEventArgs)">
            <summary>
            Raises the NodeSelected event.
            </summary>
            <param name="e">
            A NodeEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLinkSelected(MindFusion.Diagramming.Wpf.LinkEventArgs)">
            <summary>
            Raises the LinkSelected event.
            </summary>
            <param name="e">
            A LinkEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseSelected(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Raises the appropriate Selected event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnNodeActivated(MindFusion.Diagramming.Wpf.NodeEventArgs)">
            <summary>
            Raises the NodeActivated event.
            </summary>
            <param name="e">
            A NodeEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLinkActivated(MindFusion.Diagramming.Wpf.LinkEventArgs)">
            <summary>
            Raises the LinkActivated event.
            </summary>
            <param name="e">
            A LinkEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseActivated(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Raises the appropriate Activated event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnNodeDeselected(MindFusion.Diagramming.Wpf.NodeEventArgs)">
            <summary>
            Raises the NodeDeselected event.
            </summary>
            <param name="e">
            A NodeEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLinkDeselected(MindFusion.Diagramming.Wpf.LinkEventArgs)">
            <summary>
            Raises the LinkDeselected event.
            </summary>
            <param name="e">
            A LinkEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseDeselected(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Raises the appropriate Deselected event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnNodeDeactivated(MindFusion.Diagramming.Wpf.NodeEventArgs)">
            <summary>
            Raises the NodeDeactivated event.
            </summary>
            <param name="e">
            A NodeEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLinkDeactivated(MindFusion.Diagramming.Wpf.LinkEventArgs)">
            <summary>
            Raises the LinkDeactivated event.
            </summary>
            <param name="e">
            A LinkEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseDeactivated(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Raises the appropriate Deactivated event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnNodeDeleting(MindFusion.Diagramming.Wpf.NodeValidationEventArgs)">
            <summary>
            Raises the NodeDeleting event.
            </summary>
            <param name="e">
            A NodeValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLinkDeleting(MindFusion.Diagramming.Wpf.LinkValidationEventArgs)">
            <summary>
            Raises the LinkDeleting event.
            </summary>
            <param name="e">
            A LinkValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseDeleting(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Raises the appropriate *Deleting event according to the type of
            the specified item.
            </summary>
            <param name="item">
            The DiagramItem related to the event.
            </param>
            <returns>
            true if the operation has been confirmed; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnNodeDeleted(MindFusion.Diagramming.Wpf.NodeEventArgs)">
            <summary>
            Raises the NodeDeleted event.
            </summary>
            <param name="e">
            A NodeEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLinkDeleted(MindFusion.Diagramming.Wpf.LinkEventArgs)">
            <summary>
            Raises the LinkDeleted event.
            </summary>
            <param name="e">
            A LinkEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseDeleted(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Raises the appropriate Deleted event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnGroupDestroyed(MindFusion.Diagramming.Wpf.GroupEventArgs)">
            <summary>
            Raises the GroupDestroyed event.
            </summary>
            <param name="e">
            A GroupEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseGroupDestroyed(MindFusion.Diagramming.Wpf.Group)">
            <summary>
            Raises the GroupDestroyed event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnSelectionChanged(System.EventArgs)">
            <summary>
            Raises the SelectionChanged event.
            </summary>
            <param name="e">
            An EventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseSelectionChanged">
            <summary>
            Raises the SelectionChanged event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnSelectionMoved(System.EventArgs)">
            <summary>
            Raises the SelectionMoved event.
            </summary>
            <param name="e">
            An EventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseSelectionMoved">
            <summary>
            Raises the SelectionMoved event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnExpandButtonClicked(MindFusion.Diagramming.Wpf.NodeEventArgs)">
            <summary>
            Raises the ExpandButtonClicked event.
            </summary>
            <param name="e">
            A NodeEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseExpandButtonClicked(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Raises the ExpandButtonClicked event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnTreeExpanded(MindFusion.Diagramming.Wpf.NodeEventArgs)">
            <summary>
            Raises the TreeExpanded event.
            </summary>
            <param name="e">
            A NodeEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseTreeExpanded(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Raises the TreeExpanded event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnTreeCollapsed(MindFusion.Diagramming.Wpf.NodeEventArgs)">
            <summary>
            Raises the TreeCollapsed event.
            </summary>
            <param name="e">
            A NodeEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseTreeCollapsed(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Raises the TreeCollapsed event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnContainerFolded(MindFusion.Diagramming.Wpf.NodeEventArgs)">
            <summary>
            Raises the ContainerFolded event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseContainerFolded(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Raises the ContainerFolded event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnContainerUnfolded(MindFusion.Diagramming.Wpf.NodeEventArgs)">
            <summary>
            Raises the ContainerUnfolded event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseContainerUnfolded(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Raises the ContainerUnfolded event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnContainerChildAdded(MindFusion.Diagramming.Wpf.ContainerChildEventArgs)">
            <summary>
            Raises the ContainerChildAdded event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseContainerChildAdded(MindFusion.Diagramming.Wpf.ContainerNode,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Raises the ContainerChildAdded event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnContainerChildRemoved(MindFusion.Diagramming.Wpf.ContainerChildEventArgs)">
            <summary>
            Raises the ContainerChildRemoved event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseContainerChildRemoved(MindFusion.Diagramming.Wpf.ContainerNode,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Raises the ContainerChildRemoved event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLinkRouted(MindFusion.Diagramming.Wpf.LinkEventArgs)">
            <summary>
            Raises the LinkRouted event.
            </summary>
            <param name="e">
            A LinkEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseLinkRouted(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Raises the LinkRouted event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnTableSectionExpanded(MindFusion.Diagramming.Wpf.RowEventArgs)">
            <summary>
            Raises the appropriate TableSection event.
            </summary>
            <param name="e">
            A RowEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnTableSectionCollapsed(MindFusion.Diagramming.Wpf.RowEventArgs)">
            <summary>
            Raises the appropriate TableSection event.
            </summary>
            <param name="e">
            A RowEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseTableSectionEvent(MindFusion.Diagramming.Wpf.TableNode,System.Int32,System.Boolean)">
            <summary>
            Raises the appropriate TableSection event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnValidateAnchorPoint(MindFusion.Diagramming.Wpf.LinkValidationEventArgs)">
            <summary>
            Raises the ValidateAnchorPoint event.
            </summary>
            <param name="e">
            A LinkValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseValidateAnchorPoint(MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean,MindFusion.Diagramming.Wpf.DiagramNode,System.Int32)">
            <summary>
            Raises the ValidateAnchorPoint event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnDestinationAnchorChanged(MindFusion.Diagramming.Wpf.AnchorPointEventArgs)">
            <summary>
            Raises the DestAnchorChanged event.
            </summary>
            <param name="e">
            An AnchorPointEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseDestAnchorChanged(MindFusion.Diagramming.Wpf.DiagramLink,System.Int32,System.Int32)">
            <summary>
            Raises the DestAnchorChanged event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnOriginAnchorChanged(MindFusion.Diagramming.Wpf.AnchorPointEventArgs)">
            <summary>
            Raises the OrgnAnchorChanged event.
            </summary>
            <param name="e">
            An AnchorPointEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseOrgnAnchorChanged(MindFusion.Diagramming.Wpf.DiagramLink,System.Int32,System.Int32)">
            <summary>
            Raises the OrgnAnchorChanged event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnDrawNode(MindFusion.Diagramming.Wpf.DrawNodeEventArgs)">
            <summary>
            Raises the DrawNode event.
            </summary>
            <param name="e">
            A DrawNodeEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseDrawNode(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Raises the DrawNode event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnDrawLink(MindFusion.Diagramming.Wpf.DrawLinkEventArgs)">
            <summary>
            Raises the DrawLink event.
            </summary>
            <param name="e">
            A DrawLinkEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseDrawLink(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean,MindFusion.Diagramming.Wpf.PointCollection)">
            <summary>
            Raises the DrawLink event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnDrawCell(MindFusion.Diagramming.Wpf.DrawCellEventArgs)">
            <summary>
            Raises the DrawCell event.
            </summary>
            <param name="e">
            A DrawCellEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseDrawCell(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.TableNode,System.Int32,System.Int32,System.Windows.Rect)">
            <summary>
            Raises the DrawCell event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnDrawAnchorPoint(MindFusion.Diagramming.Wpf.DrawAnchorPointEventArgs)">
            <summary>
            Raises the DrawAnchorPoint event.
            </summary>
            <param name="e">
            A DrawAnchorPointEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseDrawAnchorPoint(MindFusion.Diagramming.Wpf.DrawAnchorPointEventArgs)">
            <summary>
            Raises the DrawAnchorPoint event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnDrawAdjustmentHandles(MindFusion.Diagramming.Wpf.DrawItemEventArgs)">
            <summary>
            Raises the DrawAdjustmentHandles event.
            </summary>
            <param name="e">
            A DrawItemEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseDrawAdjustmentHandles(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Raises the DrawAdjustmentHandles event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnDrawLaneHeader(MindFusion.Diagramming.Wpf.Lanes.DrawHeaderEventArgs)">
            <summary>
            Raises the DrawLaneHeader event.
            </summary>
            <param name="e">
            A DrawHeaderEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseDrawLaneHeader(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.Lanes.Header,System.Windows.Rect)">
            <summary>
            Raises the DrawLaneHeader event with the specified arguments.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnHitTestAdjustmentHandles(MindFusion.Diagramming.Wpf.HitTestEventArgs)">
            <summary>
            Raises the HitTestAdjustmentHandles event.
            </summary>
            <param name="e">
            A HitTestEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseHitTestAdjustmentHandles(MindFusion.Diagramming.Wpf.DiagramItem,System.Windows.Point,System.Int32@)">
            <summary>
            Raises the HitTestAdjustmentHandles event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnActionRecording(MindFusion.Diagramming.Wpf.UndoValidationEventArgs)">
            <summary>
            Raises the ActionRecording event.
            </summary>
            <param name="e">
            An UndoValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseActionRecording(MindFusion.Diagramming.Wpf.Commands.Command)">
            <summary>
            Raises the ActionRecording event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnActionRecorded(MindFusion.Diagramming.Wpf.UndoEventArgs)">
            <summary>
            Raises the ActionRecorded event.
            </summary>
            <param name="e">
            An UndoEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseActionRecorded(MindFusion.Diagramming.Wpf.Commands.Command)">
            <summary>
            Raises the ActionRecorded event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseActionUndone(MindFusion.Diagramming.Wpf.Commands.Command)">
            <summary>
            Raises the ActionUndone event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnActionUndone(MindFusion.Diagramming.Wpf.UndoEventArgs)">
            <summary>
            Raises the ActionUndone event.
            </summary>
            <param name="e">
            An UndoEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnActionRedone(MindFusion.Diagramming.Wpf.UndoEventArgs)">
            <summary>
            Raises the ActionRedone event.
            </summary>
            <param name="e">
            An UndoEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseActionRedone(MindFusion.Diagramming.Wpf.Commands.Command)">
            <summary>
            Raises the ActionRedone event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnClicked(MindFusion.Diagramming.Wpf.DiagramEventArgs)">
            <summary>
            Raises the Clicked event.
            </summary>
            <param name="e">
            A DiagramEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseClicked(MindFusion.Diagramming.Wpf.MouseButton,System.Windows.Point)">
            <summary>
            Raises the Clicked event of the Diagram class.
            </summary>
            <param name="mouseButton">
            The mouse button related to the event.
            </param>
            <param name="mousePosition">
            The current cursor position, in document coordinates.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnDoubleClicked(MindFusion.Diagramming.Wpf.DiagramEventArgs)">
            <summary>
            Raises the DoubleClicked event.
            </summary>
            <param name="e">
            A DiagramEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseTreeItemTextEditing(MindFusion.Diagramming.Wpf.TreeViewItem)">
            <summary>
            Raises the TreeItemTextEditing event to validate entering inplace edit mode.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnViewItemTextEditing(MindFusion.Diagramming.Wpf.TreeItemValidationEventArgs)">
            <summary>
            Raises the TreeItemTextEditing event to validate entering inplace edit mode.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseDoubleClicked(MindFusion.Diagramming.Wpf.MouseButton,System.Windows.Point)">
            <summary>
            Raises the DoubleClicked event of the Diagram class.
            </summary>
            <param name="mouseButton">
            The mouse button related to the event.
            </param>
            <param name="mousePosition">
            The current cursor position, in document coordinates.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnDrop(System.Windows.DragEventArgs)">
            <summary>
            Handles dropping of DraggedNode instances
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnNodeTextEditing(MindFusion.Diagramming.Wpf.NodeValidationEventArgs)">
            <summary>
            Raises the NodeTextEditing event to validate entering inplace edit mode.
            </summary>
            <param name="e">
            A NodeValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseNodeTextEditing(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Raises the NodeTextEditing event to validate entering inplace edit mode.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLinkTextEditing(MindFusion.Diagramming.Wpf.LinkValidationEventArgs)">
            <summary>
            Raises the LinkTextEditing event to validate entering inplace edit mode.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseLinkTextEditing(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Raises the LinkTextEditing event to validate entering inplace edit mode.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnCellTextEditing(MindFusion.Diagramming.Wpf.CellValidationEventArgs)">
            <summary>
            Raises the CellTextEditing event to validate entering inplace edit mode.
            </summary>
            <param name="e">
            A CellValidationEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseCellTextEditing(MindFusion.Diagramming.Wpf.TableNode,System.Int32,System.Int32)">
            <summary>
            Raises the CellTextEditing event to validate entering inplace edit mode.
            </summary>
            <param name="table">
            The TableNode related to the event.
            </param>
            <param name="column">
            The zero-based index of the table column related to the event.
            </param>
            <param name="row">
            The zero-based index of the table row related to the event.
            </param>
            <returns>
            true if the in-place editing operation has been confirmed; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLaneGridHeaderTextEditing(MindFusion.Diagramming.Wpf.Lanes.HeaderValidationEventArgs)">
            <summary>
            Raises the LaneGridHeaderTextEditing event to validate entering inplace edit mode.
            </summary>
            <param name="e">
            A HeaderValidationEventArgs that contain the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseLaneGridHeaderTextEditing(MindFusion.Diagramming.Wpf.Lanes.Header)">
            <summary>
            Raises the LaneGridHeaderTextEditing event to validate entering inplace edit mode.
            </summary>
            <param name="header">
            The Header related to the event.
            </param>
            <returns>
            true, if the in-place editing operation has been confirmed; otherwise false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnNodeTextEdited(MindFusion.Diagramming.Wpf.EditNodeTextEventArgs)">
            <summary>
            Raises the NodeTextEdited event.
            </summary>
            <param name="e">
            An EditNodeTextEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseNodeTextEdited(MindFusion.Diagramming.Wpf.DiagramNode,System.String,System.String)">
            <summary>
            Raises the NodeTextEdited event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLinkTextEdited(MindFusion.Diagramming.Wpf.EditLinkTextEventArgs)">
            <summary>
            Raises the LinkTextEdited event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseLinkTextEdited(MindFusion.Diagramming.Wpf.DiagramLink,System.String,System.String)">
            <summary>
            Raises the LinkTextEdited event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnCellTextEdited(MindFusion.Diagramming.Wpf.EditCellTextEventArgs)">
            <summary>
            Raises the CellTextEdited event.
            </summary>
            <param name="e">
            An EditCellTextEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseCellTextEdited(MindFusion.Diagramming.Wpf.TableNode.Cell,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Raises the CellTextEdited event.
            </summary>
            <param name="cell">
            The TableNode.Cell related to the event.
            </param>
            <param name="oldText">
            The old text of the cell.
            </param>
            <param name="newText">
            The new text of the cell.
            </param>
            <param name="column">
            The zero-based index of the table column related to the event.
            </param>
            <param name="row">
            The zero-based index of the table row related to the event.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLaneGridHeaderTextEdited(MindFusion.Diagramming.Wpf.Lanes.EditHeaderTextEventArgs)">
            <summary>
            Raises the LaneGridHeaderTextEdited event.
            </summary>
            <param name="e">
            An EditHeaderTextEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseLaneGridHeaderTextEdited(MindFusion.Diagramming.Wpf.Lanes.Header,System.String,System.String)">
            <summary>
            Raises the LaneGridHeaderTextEdited event.
            </summary>
            <param name="header">
            The Header related to the event.
            </param>
            <param name="oldText">
            The old text of the header.
            </param>
            <param name="newText">
            The new text of the header.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnSerializeTag(MindFusion.Diagramming.Wpf.SerializeTagEventArgs)">
            <summary>
            Raises the SerializeTag event.
            </summary>
            <param name="e">
            A SerializeTagEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseSerializeTag(System.Object,System.Object,System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Raises the SerializeTag event outside of the Diagram class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnBeginLoad(System.EventArgs)">
            <summary>
            Raises the BeginLoad event.
            </summary>
            <param name="e">
            An EventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnEndLoad(System.EventArgs)">
            <summary>
            Raises the EndLoad event.
            </summary>
            <param name="e">
            An EventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnDeserializeTag(MindFusion.Diagramming.Wpf.SerializeTagEventArgs)">
            <summary>
            Raises the DeserializeTag event.
            </summary>
            <param name="e">
            A SerializeTagEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseDeserializeTag(System.Object,System.Object@,System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Raises the DeserializeTag event outside of the Diagram class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaiseSerializing(MindFusion.Diagramming.Wpf.DiagramNodeAdapter,System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Raises the SerializeTag event outside of the Diagram class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnSerializeControl(MindFusion.Diagramming.Wpf.ControlNodeEventArgs)">
            <summary>
            Lets you save the attributes of controls hosted inside ControlNodes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnDeserializeControl(MindFusion.Diagramming.Wpf.ControlNodeEventArgs)">
            <summary>
            Lets you load the attributes of controls hosted inside ControlNodes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.RaisePasted(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Raises the appropriate Pasted event.
            </summary>
            <param name="item">
            The DiagramItem related to the event.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnNodePasted(MindFusion.Diagramming.Wpf.NodeEventArgs)">
            <summary>
            Raises the NodePasted event.
            </summary>
            <param name="e">
            A NodeEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnLinkPasted(MindFusion.Diagramming.Wpf.LinkEventArgs)">
            <summary>
            Raises the LinkModified event.
            </summary>
            <param name="e">
            A LinkEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.OnDoubleClicked(MindFusion.Diagramming.Wpf.DiagramItem,System.Windows.Point,MindFusion.Diagramming.Wpf.MouseButton)">
            <summary>
            Raises the appropriate DblClicked event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Diagram.ResolveMeasureUnit(MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Converts World unit to actual unit if applicable
            </summary>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.CustomExpandButtonPosition">
            <summary>
            A delegate used to calculate the expand/collapse button position for a node.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.ZoomFactorProperty">
            <summary>
            Identifies the ZoomFactor property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.AlignmentGuidePenProperty">
            <summary>
            Identifies the AlignmentGuidePen dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.NodeTemplateProperty">
            <summary>
            Identifies the NodeTemplate dependency property.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.autoScroll">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.printRect">
            <summary>
            Options for print previewing.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.printOptions">
            <summary>
            Options for printing.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.customNodeType">
            <summary>
            The type of the MindFusion.Diagramming.Wpf.DiagramNode which would be
            created when the user creates a node interactively.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.customLinkType">
            <summary>
            The type of the MindFusion.Diagramming.Wpf.DiagramLink which would be
            created when the user creates a link interactively.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.loading">
            <summary>
            A flag indicating whether the diagram is current
            being loaded.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.dirty">
            <summary>
            A flag indicating whether the diagram is "dirty".
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.displayOptions">
            <summary>
            Options for screen drawing.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.prevRenderOptions">
            <summary>
            A reference to the previous rendering options.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.renderOptions">
            <summary>
            Should be set to one of the above.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.Dummy">
            <summary>
            A shared DummyNode instance.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.typeTable">
            <summary>
            Maps types to their class descriptors.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.clsidTable">
            <summary>
            Maps class identifiers to their class descriptors.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.NavigateLeft">
            <summary>
            Selects the diagram item that stands to the left of the currently selected item
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.NavigateRight">
            <summary>
            Selects the diagram item that stands to the right of the currently selected item
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.NavigateUp">
            <summary>
            Selects the diagram item that is above (smaller x coordinate) the currently selected item
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.Diagram.NavigateDown">
            <summary>
            Selects the diagram item that is below (greater x coordinate) the currently selected item
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.MindFusion#Diagramming#Wpf#IItemFactory#InstantiateItem">
            <summary>
            Lets external classes handle item instantiation.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.InstantiateItem">
            <summary>
            Lets external classes handle item instantiation.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.VisualChildrenCount">
            <summary>
            Visual.VisualChildrenCount override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.Viewport">
            <summary>
            Returns the visible portion of the diagram area.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.DocumentPaginator">
            <summary>
            Implemnts IDocumentPaginatorSource.DocumentPaginator
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.InitializeLink">
            <summary>
            Raised when the user starts drawing a new link, just after the
            DiagramLink instance is created.
            </summary>
            <remarks>
            This event is raised immediately after the user starts drawing a new link.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.InitializeNode">
            <summary>
            Raised when the user starts drawing a new node,
            just after the DiagramNode instance is created.
            </summary>
            <remarks>
            This event is raised immediately after the user starts
            drawing a new node.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LinkCreating">
            <summary>
            A validation event raised while the user is drawing a new link.
            </summary>
            <remarks>
            LinkCreating is raised after each mouse movement while drawing a new link.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.NodeCreating">
            <summary>
            A validation event raised while the user is drawing a new node.
            </summary>
            <remarks>
            NodeCreating is raised after each mouse movement while drawing a new node.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LinkCreated">
            <summary>
            Raised when the user draws a new link.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.NodeCreated">
            <summary>
            Occurs when the user draws a new node.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LinkModifying">
            <summary>
            A validation event raised while the user is modifying a link.
            </summary>
            <remarks>
            This event is raised after each mouse movement while modifying a link.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LinkStartModifying">
            <summary>
            A validation event raised when the user starts modifying a link.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.NodeModifying">
            <summary>
            A validation event raised while the user is moving or resizing a node.
            </summary>
            <remarks>
            This event is raised after each mouse movement while modifying a node.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.NodeStartModifying">
            <summary>
            A validation event raised when the user starts modifying a node.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LinkModified">
            <summary>
            Raised when the user moves any control point of a link.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.NodeModified">
            <summary>
            Raised when the user moves or resizes a node.
            </summary>
            <remarks>
            NodeModified is not raised if the node position is changed programmatically.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LinkClicked">
            <summary>
            Raised when the user clicks a link.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.NodeClicked">
            <summary>
            Raised when the user clicks a node.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LinkDoubleClicked">
            <summary>
            Raised when the user double-clicks a link.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.NodeDoubleClicked">
            <summary>
            Raised when the user double-clicks a node.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LinkSelecting">
            <summary>
            Occurs when users try to select a link, giving you
            a chance to cancel the operation.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.NodeSelecting">
            <summary>
            Raised when the user tries to select a node, this event lets
            you cancel the operation.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LinkSelected">
            <summary>
            Raised when a link is selected, either programmatically or by the user.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.NodeSelected">
            <summary>
            Raised when a node is selected, either programmatically or by the user.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LinkActivated">
            <summary>
            Raised when a link becomes the ActiveItem.
            </summary>
            <remarks>
            When the event is raised, ActiveItem already refers to the activated link.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.NodeActivated">
            <summary>
            Raised when a node becomes the ActiveItem.
            </summary>
            <remarks>
            When this event is raised, ActiveItem already refers to the activated node.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LinkDeselected">
            <summary>
            Raised when a link is deselected, either programmatically or by the user.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.NodeDeselected">
            <summary>
            Raised when a node is deselected, either programmatically or by the user.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LinkDeactivated">
            <summary>
            Raised when a link is no longer the ActiveItem.
            </summary>
            <remarks>
            LinkDeactivated is raised when the ActiveItem changes and before that it
            referred to a link.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.NodeDeactivated">
            <summary>
            Raised when a node is no longer the ActiveItem.
            </summary>
            <remarks>
            NodeDeactivated is raised when the ActiveItem changes and before that it
            referred to a node.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LinkDeleting">
            <summary>
            Raised when the user tries to delete a link, this event lets
            you cancel the operation.
            </summary>
            <remarks>
            When users delete a node, its connecting links are deleted too.
            However, in that case LinkDeleting validation events are not
            raised, but just NodeDeleting.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.NodeDeleting">
            <summary>
            Raised when the user tries to delete a node, this event lets
            you cancel the operation.
            </summary>
            <remarks>
            When the user deletes a node, the links connected to it are
            deleted too. However, the LinkDeleting validation event is not
            raised in that case.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LinkDeleted">
            <summary>
            Raised when a link is deleted, either programmatically or by the user.
            </summary>
            <remarks>
            The link is removed from the Items and Links collections before
            the event is raised.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.NodeDeleted">
            <summary>
            Raised when a node is deleted, either programmatically or by the user.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.ContainerChildAdded">
            <summary>
            Raised when a node is added to a ContainerNode, either programmatically or by the user.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.ContainerChildRemoved">
            <summary>
            Raised when a node is removed from a ContainerNode, either programmatically or by the user.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.GroupDestroyed">
            <summary>
            Raised when a Group object is destroyed.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LinkRouted">
            <summary>
            Raised when a link is routed by the auto-routing algorithm.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.ExpandButtonClicked">
            <summary>
            Raised when the user clicks the [+/-] button of an Expandable node.
            </summary>
            <remarks>
            This event is raised only if ExpandButtonAction is set to RaiseEvents.
            Otherwise either the TreeCollapsed or TreeExpanded event is raised,
            depending on the state of the node.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.TreeExpanded">
            <summary>
            Raised when a user expands a tree branch by clicking
            the [+] button of an Expandable node.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.TreeCollapsed">
            <summary>
            Raised when a user collapses a tree branch by clicking
            the [-] button of an Expandable node.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.ContainerFolded">
            <summary>
            Raised when the user folds a container by clicking the
            arrow-up button in the container's caption area.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.ContainerUnfolded">
            <summary>
            Raised when the user unfolds a container by clicking the
            arrow-down button in the container's caption area.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.DirtyChanged">
            <summary>
            Raised when the Dirty property value has changed.
            </summary>
            <remarks>
            Dirty is set to true every time the diagram is modified, but this
            event is raised only if the flag value changes, either from false
            to true or from true to false.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.DefaultShapeChanged">
            <summary>
            Raised when the DefaultShape property value has changed.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.MeasureUnitChanged">
            <summary>
            Raised when the MeasureUnit property value has changed.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.ActionRecording">
            <summary>
            Lets an application filter which commands are saved in the undo history.
            </summary>
            <remarks>
            A validation event raised before an action is recorded in the undo buffer.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.ActionRecorded">
            <summary>
            Occurs when an action is recorded in undo history.
            </summary>
            <remarks>
            This event is raised only for top-level commands. For example, it
            isn't raised for the constituent actions of a CompositeCmd.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.ActionUndone">
            <summary>
            Raised when an action is undone.
            </summary>
            <remarks>
            This event is raised during calls to Undo. It is raised both for
            top-level commands and for the constituent actions of composite commands.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.ActionRedone">
            <summary>
            Raised when an action is redone.
            </summary>
            <remarks>
            This event is raised during calls to Redo. It is raised both for
            top-level commands and for the constituent actions of composite commands.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.ValidateAnchorPoint">
            <summary>
            A validation event that lets you approve or reject connecting
            a link to an anchor point.
            </summary>
            <remarks>
            This event is raised for each point of an AnchorPattern while
            a link's end point is being moved over a node.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.DestinationAnchorChanged">
            <summary>
            Raised when the DestinationAnchor property value of a link has changed.
            </summary>
            <remarks>
            This event is raised every time the DestinationAnchor property of
            a link changes, either because a user connects the link end to a
            different anchor point, or because an application sets it programmatically.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.OriginAnchorChanged">
            <summary>
            Raised when the OriginAnchor property value of a link has changed.
            </summary>
            <remarks>
            This event is raised every time the OriginAnchor property of a link
            changes, either because an user connects the link end to a different
            anchor point, or because an application sets it programmatically.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.DrawLink">
            <summary>
            Raised when a diagram link must be custom drawn.
            </summary>
            <remarks>
            This event is raised for links whose CustomDraw property is enabled.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.DrawNode">
            <summary>
            Raised when a diagram node must be custom drawn.
            </summary>
            <remarks>
            This event is raised for links whose CustomDraw property is enabled.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.DrawAnchorPoint">
            <summary>
            Raised when an anchor point must be custom drawn.
            </summary>
            <remarks>
            DrawAnchorPoint is raised for an AnchorPoint if the point's MarkStyle is
            set to Custom.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.DrawAdjustmentHandles">
            <summary>
            Raised when item's adjustment handles must be custom drawn.
            </summary>
            <remarks>
            DrawAdjustmentHandles is raised for selected items whose HandlesStyle is
            set to Custom.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.DrawLaneHeader">
            <summary>
            Raised when a grid lane's header must be custom drawn.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.DrawCell">
            <summary>
            Raised when a table's cell must be custom drawn.
            </summary>
            <remarks>
            This event is raised for tables whose CellCustomDraw property is enabled.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LinkTextEditing">
            <summary>
            A validation event that lets you approve or reject changes made to the text of a link.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.NodeTextEditing">
            <summary>
            A validation event that lets you approve or reject changes made to
            the text of a node.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.CellTextEditing">
            <summary>
            A validation event that lets you prevent users from editing the
            text of a table's cell.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.TreeItemTextEditing">
            <summary>
            A validation event that lets you approve or reject changes made to the text of a TreeViewNode's item.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LaneGridHeaderTextEditing">
            <summary>
            A validation event that lets you approve or reject changes made to the text of a lane grid header.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LinkTextEdited">
            <summary>
            Raised when the user edits the text of a link.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.NodeTextEdited">
            <summary>
            Raised when the user edits the text of a node.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.CellTextEdited">
            <summary>
            Raised when the user edits the text of a table's cell.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LaneGridHeaderTextEdited">
            <summary>
            Raised when the user edits the text of a lane grid header.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.HitTestAdjustmentHandles">
            <summary>
            Raised when custom hit testing of item's adjustment handles
            must be performed.
            </summary>
            <remarks>
            For links, set the result to the index of the link's control point
            that has been hit. For nodes, set the result to 0, 1, 2, 3 for the
            corner resize handles, 4, 5, 6, 7 for the side center resize handles,
            8 for the move handle and 9 for the rotation handle.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.Clicked">
            <summary>
            Raised when the user clicks the diagram at a point where no
            items are located.
            </summary>
            <remarks>
            This event is raised only if the user clicks an unoccupied point
            of the diagram. If the user clicks a diagram item, one of the
            following events is raised: NodeClicked, CellClicked or LinkClicked.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.DoubleClicked">
            <summary>
            Raised when the user double-clicks the diagram at a point where no
            items are located.
            </summary>
            <remarks>
            This event is raised only if the user double-clicks an unoccupied point
            of the diagram. If the user double-clicks a diagram item, one of the
            following events is raised: NodeDoubleClicked, CellDoubleClicked or
            LinkDoubleClicked.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.BoundsChanged">
            <summary>
            Raised when the Bounds property value has changed.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.SelectionMoved">
            <summary>
            Raised when the user moves multiple selected items.
            </summary>
            <remarks>
            Use the Nodes and Links properties of the diagram's Selection to find out
            which items have been moved.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.SelectionMoving">
            <summary>
            Raised while the user is moving multiple selected items, this event
            lets you cancel the modification.
            </summary>
            <remarks>
            This event is raised after each mouse movement while modifying a
            selection of items.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.SelectionChanged">
            <summary>
            Raised when an item is added to or removed from the selection.
            </summary>
            <remarks>
            Use the Nodes and Links properties of the diagram's Selection to find out
            which items are currently selected.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.CellClicked">
            <summary>
            Raised when the user clicks a table's cell.
            </summary>
            <remarks>
            If there is some handler attached to this event, NodeClicked won't be
            raised for the table that contains the clicked cell, but only CellClicked.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.CellDoubleClicked">
            <summary>
            Raised when the user double-clicks a table's cell.
            </summary>
            <remarks>
            If there is some handler attached to this event, NodeDoubleClicked
            won't be raised for the table that contains the clicked cell, but
            only CellDoubleClicked.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.TableSectionExpanded">
            <summary>
            Raised when the user expands the rows of a table's section
            by clicking the [+] button in the section's header row.
            </summary>
            <remarks>
            A header row is a row whose Header property is enabled.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.TableSectionCollapsed">
            <summary>
            Raised when the user collapses the rows of a table's section
            by clicking the [-] button in the section's header row.
            </summary>
            <remarks>
            A header row is a row whose Header property is enabled.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LinkPasted">
            <summary>
            Raised when a link has been pasted from the clipboard.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.NodePasted">
            <summary>
            Raised when a node has been pasted from the clipboard.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.ItemAdded">
            <summary>
            Raised when an item is added to the diagram, either programmatically or interactively.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.ItemRemoved">
            <summary>
            Raised when an item is removed from the diagram, either programmatically or interactively.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.BeginLoad">
            <summary>
            Raised when the component starts loading diagram data from a file
            or memory stream.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.EndLoad">
            <summary>
            Raised when the component ends loading diagram data from a file or
            memory stream.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.SerializeTag">
            <summary>
            Raised when the Tag of a diagram item must be serialized into
            an XML document.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.DeserializeTag">
            <summary>
            Raised when the Tag of a diagram item must be deserialized from XML format.
            </summary>
            <remarks>
            Only tags of simple value types can be saved and loaded automatically
            to/from the XML document. You must provide your own serialization for
            complex types by implementing this event and SerializeTag.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.SerializeControl">
            <summary>
            Lets you save the attributes of controls hosted inside DiagramNodeAdapters.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.DeserializeControl">
            <summary>
            Lets you load the attributes of controls hosted inside DiagramNodeAdapters.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.CopyHostedControl">
            <summary>
            Raised when a DiagramNodeAdapter is cloned. Use this event to copy the hosted control's properties.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.EnterInplaceEditMode">
            <summary>
            Raised when entering inplace-edit mode.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.LeaveInplaceEditMode">
            <summary>
            Raised when leaving inplace-edit mode.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.Diagram.ZoomFactorChanged">
            <summary>
            Occurs when the zoom factor changes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.Factory">
            <summary>
            Gets a Factory instance that lets you add programmatically new
            items to the diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LaneGrid">
            <summary>
            Gets the Grid instance that represents the lane grid.
            </summary>
            <remarks>
            The Grid object gives you full control over the lane grid.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.EnableLanes">
            <summary>
            Gets or sets whether lanes are enabled.
            </summary>
            <remarks>
            You can customize the lane grid through the LaneGrid property.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.Interaction">
            <summary>
            Gets an InteractionState instance representing the current
            action being carried out by the user.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.IsModifying">
            <summary>
            Gets a value specifying whether the diagram
            is currently being modified by the user.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.Items">
            <summary>
            Gets a collection of all items in this diagram.
            </summary>
            <remarks>
            This collection gives you access to all items contained in this
            document. You can also use it to add new items to the diagram.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.Nodes">
            <summary>
            Gets a collection of all DiagramNode objects in the diagram.
            </summary>
            <remarks>
            Nodes provides type-safe access to all nodes in the current diagram.
            Any diagram element can be accessed also by using the Items collection.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.Links">
            <summary>
            Gets a collection of all DiagramLink objects in the diagram.
            </summary>
            <remarks>
            Links provides type-safe access to all links in the current diagram.
            Any diagram element can be accessed also via the Items collection.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.Groups">
            <summary>
            Gets a collection of all groups in the diagram.
            </summary>
            <remarks>
            Groups provides access to all groups defined in the current diagram.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.Selection">
            <summary>
            Gets a Selection instance that represents the selection of items in
            this diagram.
            </summary>
            <remarks>
            Use this property to get the items currently selected by a user.
            Items can be enumerated by the Items member of the Selection class.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ActiveItem">
            <summary>
            Gets or sets the active diagram element.
            </summary>
            <remarks>
            Use this property to get the active item - the one selected by
            the user or the last put in a multiple Selection.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.Dirty">
            <summary>
            Gets or sets a value indicating whether the diagram
            has changed since the last save.
            </summary>
            <remarks>
            WpfDiagram tracks all changes that are done on the diagram contents,
            either programmatically or by users. If there are changes that are
            still not saved, the property has value of true.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ValidityChecks">
            <summary>
            Gets or sets a value indicating whether validity checks are
            performed each time an item is added to the diagram.
            </summary>
            <remarks>
            If enabled, validity checks are performed each time an item
            is added to the diagram. That involves enumerating the Items
            collection and can slow up the process considerably for large
            diagrams. You can disable this property in order to skip the
            validity checks, however be sure that you don't add an item
            twice to the diagram and that links are created only between
            items in the same diagram.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.DocumentPlane">
            <summary>
            DocumentPlane is visual child of diagram and ancestor of all diagram items.
            The DocumentPlane element is translated with respect to Diagram element so that the point Diagram.Bounds.TopLeft from the DocumentPlane is rendered at Diagram element location (0,0)
            The coordinate system of the DocumentPlane is the document coordinate system.
            The intended use of this property is mainly in MouseMove event handling
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.MeasureUnit">
            <summary>
            Gets or sets the unit of measure used for logical coordinates
            in this diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.SortGroupsByZ">
            <summary>
            Gets or sets a value indicating whether grouped items
            should be drawn sorted by their z-order while the whole
            group is being moved.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.NowPrinting">
            <summary>
            Gets a flag indicating whether the diagram is currently
            being printed.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.RenderOptions">
            <summary>
            Gets the current rendering options for this Diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.AdjustmentHandlesSize">
            <summary>
            Gets or sets the size of the handles, which appear around selected objects.
            </summary>
            <remarks>
            Use the property to set the size of the manipulation handles, which appear
            around selected items.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.SelectionOnTop">
            <summary>
            Gets or sets a value indicating whether selected items
            should be painted on top of other items.
            </summary>
            <remarks>
            If SelectionOnTop is enabled, selected items are painted
            over non-selected ones, ignoring the z-order position
            specified in ZIndex.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ShowAnchors">
            <summary>
            Gets or sets a value indicating whether and when
            node anchor points should be displayed.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.BackBrush">
            <summary>
            Gets or sets the brush used for painting the diagram background.
            </summary>
            <remarks>
            This property enables more spectacular background painting with effects
            such as gradients, textures and color patterns.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ExpandButtonPosition">
            <summary>
            Gets or sets where expand/collapse buttons are located
            relatively to their nodes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LinkCrossings">
            <summary>
            Gets or sets how to render the intersection points where
            links cross their paths.
            </summary>
            <remarks>
            Intersection points where links cross each other's paths can be
            rendered as arcs or breaks, depending on the value of this property.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.CrossingRadius">
            <summary>
            Gets or sets the radius length of decorations displayed
            at link intersection points.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.RoundRectFactor">
            <summary>
            Gets or sets the relative size of arcs displayed
            at the corners of rounded rectangles.
            </summary>
            <remarks>
            This property lets you increase or decrease that
            value by multiplying it by the specified factor.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ShowHandlesOnDrag">
            <summary>
            Gets or sets a value indicating whether to display selection
            handles of objects under the mouse while another object is being modified.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.RoundedLinks">
            <summary>
            Gets or sets a value indicating whether the joins between segments
            of Polyline and Cascading links should be rounded.
            </summary>
            <remarks>
            The value of this property is considered when drawing links whose
            Shape is set to Polyline or Cascading.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.RoundedLinksRadius">
            <summary>
            Gets or sets the radius of arc joins of rounded links' segments.
            </summary>
            <remarks>
            The value of this property is used when RoundedLinks is enabled.
            It specifies the radius of the arcs drawn as joins between link segments.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.BackgroundImage">
            <summary>
            Gets or sets the image displayed as background of this diagram.
            </summary>
            <remarks>
            This image is painted as a background of the diagram, behind the
            alignment grid and all items.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.BackgroundImageAlign">
            <summary>
            Gets or sets a value indicating how the background image is
            positioned, relatively either to the control's window or to
            the scrollable document area.
            </summary>
            <remarks>
            The background image can be aligned to a corner, stretched,
            centered, or tiled to cover the control's area.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ActiveItemHandlesStyle">
            <summary>
            Gets the visual style of adjustment handles of the active item.
            </summary>
            <remarks>
            Use the property to specify the color in which the manipulation
            handles that appear around the active item are painted.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.SelectedItemHandlesStyle">
            <summary>
            Gets the visual style of adjustment handles of selected items.
            </summary>
            <remarks>
            This style object provides Pen and Brush attributes that let you customize
            the appearance of adjustment handles drawn around selected items.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.DisabledHandlesStyle">
            <summary>
            Gets the visual style of disabled adjustment handles.
            </summary>
            <remarks>
            This style object provides Pen and Brush attributes that let you customize the appearance of disabled adjustment handles.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ShowDisabledHandles">
            <summary>
            Gets or sets a value indicating whether manipulation handles
            are painted when they are disabled.
            </summary>
            <remarks>
            Individual handles can be disabled or enabled by clearing or
            setting their correspondent bits in node's EnabledHandles.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.SelectAfterCreate">
            <summary>
            Gets or sets a value indicating whether newly created objects
            are automatically selected.
            </summary>
            <remarks>
            Use the property to specify if the items that are drawn are selecting,
            which allows immediate modification actions to be performed over them.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.RestrictItemsToBounds">
            <summary>
            Gets or sets a value indicating whether users are allowed
            to place items outside the scrollable area of the diagram.
            </summary>
            <remarks>
            Use this property to specify whether diagram elements can
            be drawn or moved outside the document area.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.HitTestPriority">
            <summary>
            Gets or sets a value indicating the order in which items are hit-tested.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ExpandOnIncoming">
            <summary>
            Gets or sets a value, indicating in which direction object
            hierarchies are expanded.
            </summary>
            <remarks>
            Use this property when presenting tree structures with enabled
            collapse/expand. 
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.RecursiveExpand">
            <summary>
            Gets or sets value indicating how a tree is expanded.
            </summary>
            <remarks>
            Use the property when representing tree structures,
            which hide some of their elements.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.AllowLinksRepeat">
            <summary>
            Gets or sets a value indicating whether more than one link
            can connect the same origin and destination diagram nodes.
            </summary>
            <remarks>
            Specifies whether more than one link can connect the same
            origin and destination diagram nodes.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.SnapToAnchor">
            <summary>
            Gets or sets when arrow end points should be aligned
            to the nearest anchor points.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.AllowUnconnectedLinks">
            <summary>
            Gets or sets a value indicating whether users are allowed to
            draw links that are not connected to any node.
            </summary>
            <remarks>
            If the property is set to true, users will be able to draw links
            from or to any point of the document.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.AllowUnanchoredLinks">
            <summary>
            Gets or sets a value indicating whether links can be connected to
            nodes to which there aren't anchor points assigned.
            </summary>
            <remarks>
            AllowUnanchoredLinks applies to nodes whose AnchorPattern is not set
            or does not contain incoming or outgoing anchor points available.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.MinimumNodeSize">
            <summary>
            Gets or sets the minimum node size that the user is allowed to set.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.AutoResize">
            <summary>
            Gets or sets a value indicating whether the document area should
            be resized automatically so it fits the diagram contents.
            </summary>
            <remarks>
            If automatic resizing is enabled, the size of the document scrollable
            area is updated each time an item is created, deleted or moved, either
            by end-users or via method calls.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LinkEndsMovable">
            <summary>
            Gets or sets a value indicating whether arrow ends can be moved
            by users after the link is created.
            </summary>
            <remarks>
            When the property is set to true, users cannot move the ends of
            a link after the link is created.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.AllowSplitLinks">
            <summary>
            Gets or sets a value indicating whether link segments
            can be added and removed interactively.
            </summary>
            <remarks>
            Lets users insert new link segments interactively by clicking
            and dragging a point of a link's segment.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.AllowSelfLoops">
            <summary>
            Gets or sets a value indicating whether self-loops are allowed.
            </summary>
            <remarks>
            Use the property to specify whether the user is allowed to draw
            self loops - links that connect a node to itself.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.RouteLinks">
            <summary>
            Gets or sets a value indicating whether links should avoid nodes
            by going the shortest path from their origin to their destination
            without crossing any other nodes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.RoutingOptions">
            <summary>
            Gets an object, which allows customizing various parameters
            of the link routing algorithm.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.RoutingGrid">
            <summary>
            Gets a RoutingGrid instance used to allocate grid arrays.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LinkRouter">
            <summary>
            Gets or sets the component used to find paths for auto-routed links
            when diagram nodes are added or their positions change.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.DontRouteForAwhile">
            <summary>
            Gets or sets whether arrow routing is enabled.
            </summary>
            <remarks>
            Used to disable routing during load time and when automatic
            layout routines run.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ExpandButtonAction">
            <summary>
            Gets or sets a value indicating what should happen when a user
            clicks the [+/-] button that is displayed near expandable nodes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.Content">
            <summary>
            Allows creating diagram items thorugh XAML.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.MergeThreshold">
            <summary>
            Gets or sets the maximum distance between adjacent control points
            of a link at which the respective segments can be merged.
            </summary>
            <remarks>
            An user may add or remove links' segments interactively when the
            AllowSplitLinks property is enabled.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.AlignToGrid">
            <summary>
            Gets or sets a value indicating whether the diagram items should be
            aligned to a grid.
            </summary>
            <remarks>
            When the property is set to true, the sides of every newly created
            diagram item are aligned to the nearest grid points.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ShowGrid">
            <summary>
            Gets or sets a value indicating whether the alignment grid is visible.
            </summary>
            <remarks>
            If it is visible, the grid is painted as either a matrix of points or
            crossing horizontal and vertical lines. That depends on the value of
            GridStyle.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.GridPen">
            <summary>
            Gets or sets the Pen/Brush of the grid lines/points.
            </summary>
            <remarks>
            Use the property to specify the Pen/Brush of grid lines and points.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.GridSizeX">
            <summary>
            Gets or sets the horizontal distance between adjacent grid points.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.GridSizeY">
            <summary>
            Gets or sets the vertical distance between adjacent grid points.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.GridOffsetX">
            <summary>
            Gets or sets the horizontal offset of the first point of the alignment grid.
            </summary>
            <remarks>
            The property specifies the offset of the first point of the alignment grid.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.GridOffsetY">
            <summary>
            Gets or sets the vertical offset of the first point of the alignment grid.
            </summary>
            <remarks>
            The property specifies the offset of the first point of the alignment grid.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.GridStyle">
            <summary>
            Gets or sets the visual style of the alignment grid.
            </summary>
            <remarks>
            Specifies how the alignment grid is drawn.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.Bounds">
            <summary>
            Gets or sets a value representing the size of the diagram's scrollable area.
            </summary>
            <remarks>
            Use this property to specify how large a document should be, that is,
            how far it can be scrolled.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ScriptHelper">
            <summary>
            Gets a ScriptHelper object which can be used in html
            scripts to instantiate various objects and to call
            static methods.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.UndoManager">
            <summary>
            Gets a reference to the diagram's UndoManager instance.
            </summary>
            <remarks>
            Use this property to control the undo manager operations,
            Undo or Redo commands, and access the command History.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.IsTrialVersion">
            <summary>
            Gets a value indicating whether the currently loaded WpfDiagram
            is a trial version of the control.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.IsProEdition">
            <summary>
            Gets a value indicating whether the currently loaded WpfDiagram
            is a professional version of the control.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.DisabledGroups">
            <summary>
            Gets or sets a flag indicating whether grouping functionality
            is currently disabled in this Diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.NowLoading">
            <summary>
            Gets a value indicating whether the diagram data is now being loaded from a file.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.MindFusion#Diagramming#Wpf#IItemFactory#TypeTable">
            <summary>
            Gets the table with registered classes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.MindFusion#Diagramming#Wpf#IItemFactory#ClsidTable">
            <summary>
            Gets the table with registered classes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LinkHitDistance">
            <summary>
            Gets or sets a value specifying how far from a link a click is still considered a hit.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.RowHighlightBrush">
            <summary>
            Gets or sets the Brush used to fill highlighted table rows.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.AutoHighlightRows">
            <summary>
            Gets or sets whether a table row should be highlighted when the user clicks on it.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.AdapterHandlesStyle">
            <summary>
            Gets or sets the default value for the HandlesStyle property
            of new DiagramNodeAdapter nodes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.DefaultControlType">
            <summary>
            Gets or sets the type of the controls that will be hosted
            by default in newly created DiagramNodeAdapter objects.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ControlMouseAction">
            <summary>
            Gets or sets the ways mouse clicks are handled by default in the
            controls hosted in ControlHost objects.
            </summary>
            TODO: remove
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.PrintOptions">
            <summary>
            Gets an object which provides customization properties
            for printing and print-preview.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.AllowInplaceEdit">
            <summary>
            Gets or sets a value indicating whether in-place editing
            of the text of objects is enabled.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.InplaceEditAcceptOnEnter">
            <summary>
            Gets or sets a value indicating whether pressing the ENTER key
            should exit inplace-edit mode and accept changes made to text.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.InplaceEditCancelOnEsc">
            <summary>
            Gets or sets a value indicating whether pressing the ESC key
            should exit inplace-edit mode and reject changes made to text.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.InplaceEditFont">
            <summary>
            Gets or sets the font of the inplace-edit text box.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ModificationStart">
            <summary>
            Gets or sets how users can start modifying diagram items.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ModificationEffect">
            <summary>
            Gets or sets the visual effect to apply during interactive modification of items.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.AllowMultipleResize">
            <summary>
            Specifies whether multiple selected nodes can be resized simultaneously.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.PointerCursor">
            <summary>
            Gets or sets the mouse cursor shown to the user when
            no modification is performed.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.DisallowCursor">
            <summary>
            Gets or sets the mouse cursor shown to the user when
            an object cannot be created at a given location.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.MoveCursor">
            <summary>
            Gets or sets the mouse cursor shown to the user if
            the pointed object can be modified.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.DrawLinkCursor">
            <summary>
            Gets or sets the mouse cursor shown to the user when
            an arrow can be started at the current position.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.AllowLinkCursor">
            <summary>
            Gets or sets the mouse cursor shown to the user when
            an arrow can be created.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.DisallowLinkCursor">
            <summary>
            Gets or sets the mouse cursor shown to the user when an arrow
            is being created but cannot be ended at the current location.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.HorizontalResizeCursor">
            <summary>
            Gets or sets the mouse cursor shown to the user
            if dragging would resize an object horizontally.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.RotateCursor">
            <summary>
            Gets or sets the cursor shown when the mouse is over a node rotation handle.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.VerticalResizeCursor">
            <summary>
            Gets or sets the mouse cursor shown to the user if dragging
            would resize an object vertically.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.PanCursor">
            <summary>
            Gets or sets the mouse cursor displayed while panning the diagram view.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.OverrideCursor">
            <summary>
            Sets the cursor and stops changing it depending on the context.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.DiagonalResizeCursor">
            <summary>
            Gets or sets the mouse cursor shown to the user if dragging
            would resize an object both vertically and horizontally.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.CounterDiagonalResizeCursor">
            <summary>
            Gets or sets the mouse cursor shown to the user if dragging
            would resize an object both vertically and horizontally.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LaneColumnResizeCursor">
            <summary>
            Gets or sets the mouse cursor shown to the user
            when dragging would resize a lane column header.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LaneRowResizeCursor">
            <summary>
            Gets or sets the mouse cursor shown to the user
            when dragging would resize a lane row header.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.AutoScroll">
            <summary>
            Gets or sets a value indicating whether auto scrolling of
            the document area is enabled.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ModifierKeyActions">
            <summary>
            Gets an object, which allows changing the function of
            keyboard modifier keys such as Ctrl and Alt.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.AutoHandlesItem">
            <summary>
            Gets or sets the chart object whose selection handles
            are currently being displayed in response to mouse hover.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.Behavior">
            <summary>
            Gets or sets a value indicating how the control responds to user actions.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.CustomBehavior">
            <summary>
            Gets or sets a custom Behavior object specifying how
            Diagram.NET responds to mouse input.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ScrollX">
            <summary>
            Gets or sets the document's X scroll position.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ScrollY">
            <summary>
            Gets or sets the document's Y scroll position.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ZoomFactor">
            <summary>
            Gets or sets the zoom factor used to scale up or down the Diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.InteractionStartPoint">
            <summary>
            Gets or sets the initial point of the current interaction.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.MiddleButtonActions">
            <summary>
            Gets or sets a combination of flags that specify what
            actions can be performed via the middle mouse button.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.RightButtonActions">
            <summary>
            Gets or sets a combination of flags that specify what
            actions can be performed via the right mouse button.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.CustomNodeType">
            <summary>
            Gets or sets the type of a MindFusion.Diagramming.Wpf.DiagramNode derived class
            whose instance should be created when a user starts drawing.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.CustomLinkType">
            <summary>
            Gets or sets the type of a MindFusion.Diagramming.Wpf.DiagramLink derived class
            whose instance should be created when a user starts drawing.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.DelKeyAction">
            <summary>
            Gets or sets a value that specifies what action should be performed
            when the user hits the Del key.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.AutoAlignNodes">
            <summary>
            Gets or sets whether nodes should automatically align to
            the borders ot other nodes during user interaction.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.AutoAlignDistance">
            <summary>
            Gets or sets the maximal horizontal or vertical distance at which
            a node aligns to the borders ot other nodes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.AlignmentGuidePen">
            <summary>
            Gets or sets the pen used to draw alignment guides.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.Font">
            <summary>
            Gets or sets the default font for new diagram items.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.TableRowCount">
            <summary>
            Gets or sets the default number of table rows.
            </summary>
            <remarks>
            Use the property to set the initial number of rows for newly created tables.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.TableColumnCount">
            <summary>
            Gets or sets the default number of table columns.
            </summary>
            <remarks>
            This value is used to initialize the ColumnCount property of new tables.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ShapeCustomDraw">
            <summary>
            Gets or sets the default type of custom painting done for shape nodes.
            </summary>
            <remarks>
            This property specifies whether and how custom painting of shape
            nodes is performed. Its value is assigned to the CustomDraw property
            of new shape nodes.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.TableCustomDraw">
            <summary>
            Gets or sets the default type of custom painting done on tables.
            </summary>
            <remarks>
            The CustomDraw member of tables is initialized from this property.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.CellCustomDraw">
            <summary>
            Gets or sets the default type of custom painting done on the cells of tables.
            </summary>
            <remarks>
            The CellCustomDraw member of new tables is initialized from this property.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LinkCustomDraw">
            <summary>
            Gets or sets the default type of custom painting done on links.
            </summary>
            <remarks>
            This property specifies whether and how custom painting of
            links is performed.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.DynamicLinks">
            <summary>
            Gets or sets the default value for the Dynamic property of new links.
            </summary>
            <remarks>
            Use the property to specify whether links automatically reposition
            their end segments, so they keep pointing to the centers of connected nodes.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.AutoSnapLinks">
            <summary>
            Gets or sets the default value for the SnapToNodeBorder property of new links.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.AutoSnapDistance">
            <summary>
            Specifies the maximum distance at which links auto-snap to nodes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LinksRetainForm">
            <summary>
            Gets or sets whether links should maintain their forms
            if the nodes linked with those links are moved around.
            </summary>
            <remarks>
            LinksRetainForm value is used to initialize the RetainForm
            property of new links.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.TableColumnWidth">
            <summary>
            Gets or sets the default width of tables' columns.
            </summary>
            <remarks>
            This property is used to initialize the ColumnWidth property of new tables.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.TableRowHeight">
            <summary>
            Gets or sets the default height of tables' rows.
            </summary>
            <remarks>
            TableRowHeight is used to initialize the RowHeight property of new tables.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.TableCaptionHeight">
            <summary>
            Gets or sets the default height of table captions.
            </summary>
            <remarks>
            The value of this property is used to initialize the
            CaptionHeight property of new tables.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.TableConnectionStyle">
            <summary>
            Gets or sets a value indicating whether drawing an arrow
            between tables should link rows of those tables, or the
            tables as whole entities.
            </summary>
            <remarks>
            The value of TableConnectionStyle is used to initialize
            the ConnectionStyle property of new tables.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LinkCascadeOrientation">
            <summary>
            Gets or sets the initial orientation of the first segment
            of new cascading links.
            </summary>
            <remarks>
            Use this property to specify the default orientation of the
            first segment of DiagramLink objects whose Shape is set to
            LinkShape.Cascading.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.CellFrameStyle">
            <summary>
            Gets or sets the default cell border style of new tables.
            </summary>
            <remarks>
            Use this property to specify the default border style of cells in
            new tables. See CellFrameStyle enumeration for more details.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.NodesExpandable">
            <summary>
            Gets or sets a value indicating whether newly created nodes can be expanded.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.PolygonalTextLayout">
            <summary>
            Gets or sets a value indicating whether to enable the formatting
            of text inside non-rectangular shape node outlines.
            </summary>
            <remarks>
            Specifies a default value for the PolygonalTextLayout property of
            shape nodes.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ShapeOrientation">
            <summary>
            Gets or sets the default value for the ShapeOrientation property of
            shape nodes.
            </summary>
            <remarks>
            Use this property in conjunction with DefaultShape to define what shape
            will be assigned to new nodes that end-users draw.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.EnableStyledText">
            <summary>
            Gets or sets the default value for the EnableStyledText
            property of new nodes.
            </summary>
            <remarks>
            Styled text allows applying various attributes to the characters
            it contains. Attributes are specified using HTML-like formatting
            tags embedded in the raw text.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LinkHeadShape">
            <summary>
            Gets or sets the shape displayed as head of new links.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LinkBaseShape">
            <summary>
            Gets or sets the shape displayed at the base of new links.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LinkIntermediateShape">
            <summary>
            Gets or sets default shape to be displayed in the middle
            of each segment of links.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LinkHeadShapeSize">
            <summary>
            Gets or sets the default size of arrowheads.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LinkBaseShapeSize">
            <summary>
            Gets or sets the default size of the base of new links.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LinkIntermediateShapeSize">
            <summary>
            Gets or sets the default size of the shapes at middles of link segments.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LinkTextStyle">
            <summary>
            Gets or sets default placement and orientation for links' text.
            </summary>
            <remarks>
            The value of this property is used to initialize the TextStyle
            property of new links.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ShapePen">
            <summary>
            Gets or sets the default value for the Pen property of shape nodes.
            </summary>
            <remarks>
            The property provides a default value for the pen, with which a shape
            node's frame is painted.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ShapeBrush">
            <summary>
            Gets or sets the default value for the Brush property of shape nodes.
            </summary>
            <remarks>
            The property provides a default value for the brush, with which a node'
            interior is filled.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LinkPen">
            <summary>
            Gets or sets the default value for the Pen and HeadPen properties of links.
            </summary>
            <remarks>
            The property provides a default value for the pens, with which link's
            segments and arrowhead lines are painted.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LinkBrush">
            <summary>
            Gets or sets the default value for the Brush property of links.
            </summary>
            <remarks>
            The property provides a default value for the brush, with which an
            arrowhead's interior is filled.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.TablePen">
            <summary>
            Gets or sets the default value for the Pen property of tables.
            </summary>
            <remarks>
            The property provides a default value for the pen, with which
            a table's frame is painted.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.TableBrush">
            <summary>
            Gets or sets the default value for the Brush property of tables.
            </summary>
            <remarks>
            The property provides a default value for the brush, with which
            a table' interior is filled.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.TableShape">
            <summary>
            Gets or sets the default shape of new tables.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.DefaultEffect">
            <summary>
            Gets or sets the default value for UIElement.Effect property of new items.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.TextFormat">
            <summary>
            Gets or sets the default alignment and formatting style
            for text displayed inside nodes and table cells.
            </summary>
            <remarks>
            When a new node is created, its TextFormat is initialized
            with the value of this property.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.TablesScrollable">
            <summary>
            Gets or sets the default value for the Scrollable property of new tables.
            </summary>
            <remarks>
            The Scrollable property of each new table is initialized with the
            value of TablesScrollable.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.TextBrush">
            <summary>
            Gets or sets the default brush of text displayed inside diagram items.
            </summary>
            <remarks>
            Use the property to specify the default brush of the text of diagram items.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LinkShape">
            <summary>
            Gets or sets the default shape of diagram links.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LinkSegments">
            <summary>
            Gets or sets the default number of link segments.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LinkHandlesStyle">
            <summary>
            Gets or sets the default value for the HandlesStyle property of new links.
            </summary>
            <remarks>
            Default value for the HandlesStyle property of new links, created either
            programmatically or by a user.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ShapeHandlesStyle">
            <summary>
            Gets or sets the default value for the HandlesStyle property of
            new shape nodes.
            </summary>
            <remarks>
            This property provides default value for the HandlesStyle property
            of new shape nodes, created either programmatically or by the user.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.TableHandlesStyle">
            <summary>
            Gets or sets the default value for the HandlesStyle property of new tables.
            </summary>
            <remarks>
            Default value for the HandlesStyle property of new tables, created either
            programmatically or by the user.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.DefaultShape">
            <summary>
            Gets or sets the default shape of shape nodes.
            </summary>
            <remarks>
            The Shape property of newly created shape nodes is initialized
            with the value of this property.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.NodeTemplate">
            <summary>
            Gets or sets the default DataTemplate used to display TemplatedNodes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.TableCaption">
            <summary>
            Gets or sets the default text for tables' captions.
            </summary>
            <remarks>
            The Caption property of new tables is initialized with
            the value of TableCaption.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ShapeText">
            <summary>
            Gets or sets the default text of shape nodes.
            </summary>
            <remarks>
            The value of this property is assigned to the Text property of new nodes.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.LinkText">
            <summary>
            Gets or sets the default text of links.
            </summary>
            <remarks>
            The value of this property is assigned to the Text property
            of new links.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ContainerHighlightPen">
            <summary>
            Gets or sets the default value for the HighlightPen property of containers.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ContainerMargin">
            <summary>
            Gets or sets the default value for the Margin property of containers.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ContainerMinimumSize">
            <summary>
            Gets or sets the default value for the MinimumSize property of containers.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ContainerCaption">
            <summary>
            Gets or sets the default value for the Caption property of containers.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ContainerCaptionHeight">
            <summary>
            Gets or sets the default value for the CaptionHeight property of containers.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Diagram.ContainersFoldable">
            <summary>
            Gets or sets the default value for the Foldable property of containers.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Diagram.VisitNode">
            <summary>
            Defines the prototype for the methoed called by VisitNodes.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ArcTemplate">
            <summary>
            Represents an arc in a shape definition.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ArcTemplate.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new istance of the ArcTemplate class with the
            specified coordinates.
            </summary>
            <param name="x">
            The x-coordinate of the upper left corner of the ellipse's
            bounding rectangle.
            </param>
            <param name="y">
            The y-coordinate of the upper left corner of the ellipse's
            bounding rectangle.
            </param>
            <param name="w">
            The width of the ellipse's bounding rectangle.
            </param>
            <param name="h">
            The height of the ellipse's bounding rectangle.
            </param>
            <param name="a">
            The clockwise angle, in degrees, between the horizontal axis
            of the ellipse and the starting point of the arc.
            </param>
            <param name="s">
            The clockwise angle, in degrees, between the starting point
            and the ending point of the arc.
            </param>
            <remarks>
            An arc template is defined by an ellipse and starting and
            sweeping angles.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ArcTemplate.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,System.Windows.Media.DashStyle,System.Double)">
            <summary>
            Initializes a new istance of the ArcTemplate class with the
            specified coordinates and visualization settings.
            </summary>
            <param name="x">
            The x-coordinate of the upper left corner of the ellipse's
            bounding rectangle.
            </param>
            <param name="y">
            The y-coordinate of the upper left corner of the ellipse's
            bounding rectangle.
            </param>
            <param name="w">
            The width of the ellipse's bounding rectangle.
            </param>
            <param name="h">
            The height of the ellipse's bounding rectangle.
            </param>
            <param name="a">
            The clockwise angle, in degrees, between the horizontal axis
            of the ellipse and the starting point of the arc.
            </param>
            <param name="s">
            The clockwise angle, in degrees, between the starting point
            and the ending point of the arc.
            </param>
            <param name="color">
            The color of this segment.
            </param>
            <param name="dashStyle">
            The dash style of this segment.
            </param>
            <param name="width">
            The width of this segment.
            </param>
            <remarks>
            An arc template is defined by an ellipse and starting and
            sweeping angles.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ArcTemplate.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            ElementTemplate.SaveToXml override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ArcTemplate.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            ElementTemplate.LoadFromXml override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ArcTemplate.Clone">
            <summary>
            Creates an exact copy of this ArcTemplate element.
            </summary>
            <returns>
            An instance of the ArcTemplate class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ArcTemplate.InitData(System.Windows.Rect,System.Double)">
            <summary>
            ElementTemplate.InitData override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ArcTemplate.UpdateData(System.Windows.Rect,System.Double[],System.Double)">
            <summary>
            ElementTemplate.UpdateData override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ArcTemplate.UpdatePath(System.Windows.Media.PathFigure,System.Double[])">
            <summary>
            ElementTemplate.UpdatePath override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ArcTemplate.OutsideBounds">
            <summary>
            ElementTemplate.OutsideBounds override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ArcTemplate.HitTest(System.Windows.Point,System.Double[],System.Double)">
            <summary>
            Determines whether a point lies near this arc.
            </summary>
            <param name="point">
            A Point value specifying the point location, assuming
            the shape rotation angle is zero.
            </param>
            <param name="data"></param>
            <param name="maxDist"></param>
            <returns>
            true if the point is on or near to this arc.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ArcTemplate.SameAs(MindFusion.Diagramming.Wpf.ElementTemplate)">
            <summary>
            ElementTemplate.SameAs override.
            </summary>
            <param name="obj">
            The ElementTemplate to compare to this template.
            </param>
            <returns>
            true if the specified object is an ArcTemplate closely
            approximating this template; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ArcTemplate.Draw(System.Windows.Media.DrawingContext,System.Windows.Media.Pen)">
            <summary>
            ElementTemplate.Draw override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArcTemplate.Bounds">
            <summary>
            Gets the bounding rectangle of this element.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArcTemplate.StartAngle">
            <summary>
            Gets the start angle of this arc element.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArcTemplate.SweepAngle">
            <summary>
            Gets the sweep angle of this arc element.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArcTemplate.XmlName">
            <summary>
            ElementTemplate.XmlName override.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Scroller">
            <summary>
            Represents a table scroller manipulator.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Scroller.#ctor(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Initializes a new instance of the Scroller class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Scroller.Draw(System.Windows.Media.DrawingContext)">
            <summary>
            Manipulator.Draw override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Scroller.AddToRepaintRect(System.Windows.Rect@)">
            <summary>
            Manipulator.AddToRepaintRect override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Scroller.HitTest(System.Windows.Point)">
            <summary>
            Manipulator.HitTest override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Scroller.PtInManipulator(System.Windows.Point)">
            <summary>
            Manipulator.PtInManipulator override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Scroller.SupportClipping">
            <summary>
            Manipulator.SupportClipping override.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.QuickRouter">
            <summary>
            Implements a very fast link routing algorithm that uses a tree to represent
            the free and occupied regions in the diagram.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.QuickRouter.#ctor">
            <summary>
            Initializes a new instance of the QuickRouter class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.QuickRouter.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the QuickRouter class.
            </summary>
            <param name="diagram"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.QuickRouter.RouteLink(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Implements ILinkRouter.RouteLink.
            </summary>
            <param name="link">The DiagramLink to route.</param>
            <returns>true if a path has been found successfully, otherwise false.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.QuickRouter.RouteAllLinks">
            <summary>
            Routes all links in the diagram.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.QuickRouter.RouteLinks(MindFusion.Diagramming.Wpf.DiagramLinkCollection)">
            <summary>
            Implements ILinkRouter.RouteLinks.
            </summary>
            <param name="links">A list of DiagramLink objects that should be routed.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.QuickRouter.Suspend">
            <summary>
            Implements ILinkRouter.Suspend.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.QuickRouter.Resume(System.Boolean)">
            <summary>
            Implements ILinkRouter.Resume.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.QuickRouter.Diagram">
            <summary>
            Gets or sets the diagram this router is associated with.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.QuickRouter.Granularity">
            <summary>
            Gets or sets the granularity of the obstacles map generated by QuickRouter.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.QuickRouter.TurnCost">
            <summary>
            Gets or sets a value added to the total cost of a route if it makes a turn.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.QuickRouter.UBendMaxLen">
            <summary>
            Gets or sets the maximum U-bend length.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.RegistryLicenseProvider">
            <summary>
            The FlowChart.NET license provider.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Behaviors.LinkTablesBehavior">
            <summary>
            This class is used when the diagram behavior is set to Behavior.LinkTables.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.LinkTablesBehavior.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the LinkTablesBehavior class.
            </summary>
            <param name="diagram">
            The Diagram this behavior will be associated with.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.LinkTablesBehavior.CreateNode">
            <summary>
            LinkNodesBehavior.CreateNode override.
            </summary>
            <returns>
            An instance of the DiagramNode class.
            </returns>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ImageAlign">
            <summary>
            Specifies the position and alignment of a picture in a box
            or table, or that of the background image.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ImageAlign.Center">
            <summary>
            The image is centered in the node or diagram.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ImageAlign.Fit">
            <summary>
            The image is resized to fit the size of the object or
            the component's client area.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ImageAlign.Stretch">
            <summary>
            The image is stretched to fill the object or the component's
            client area.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ImageAlign.Tile">
            <summary>
            The image is tiled across the node or the component's area.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ImageAlign.TopLeft">
            <summary>
            The image is aligned to the top left corner.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ImageAlign.BottomLeft">
            <summary>
            The image is aligned to the bottom left corner.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ImageAlign.TopRight">
            <summary>
            The image is aligned o the top right corner.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ImageAlign.BottomRight">
            <summary>
            The image is aligned to the bottom right corner.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ImageAlign.TopCenter">
            <summary>
            The image is centered horizontally and aligned to the top side.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ImageAlign.BottomCenter">
            <summary>
            The image is centered horizontally and aligned to the bottom side.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ImageAlign.MiddleLeft">
            <summary>
            The image is centered vertically and aligned to the left-hand side.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ImageAlign.MiddleRight">
            <summary>
            The image is centered vertically and aligned to the right-hand side.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.GridRouter">
            <summary>
            Implements a link routing algorithm that uses a grid to represent
            the free and occupied regions in the diagram.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GridRouter.RouteLink(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Implements ILinkRouter.RouteLink.
            </summary>
            <param name="link">The DiagramLink to route.</param>
            <returns>true if a path has been found successfully, otherwise false.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GridRouter.RouteLinks(MindFusion.Diagramming.Wpf.DiagramLinkCollection)">
            <summary>
            Implements ILinkRouter.RouteLinks.
            </summary>
            <param name="links">A list of DiagramLink objects that should be routed.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GridRouter.Suspend">
            <summary>
            Implements ILinkRouter.Suspend.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GridRouter.Resume(System.Boolean)">
            <summary>
            Implements ILinkRouter.Resume.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.GridRouter.Diagram">
            <summary>
            Gets or sets the diagram this router is associated with.
            </summary>
        </member>
        <member name="T:MindFusion.Geometry2D.Convert">
            <summary>
            Provides various conversions.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Convert.PolarToDekart(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Converts polar coordinates to the corresponding
            dekart coordinates, using the specified point as
            a center of the coordinate system.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Convert.DekartToPolar(System.Windows.Point,System.Windows.Point,System.Double@,System.Double@)">
            <summary>
            Converts dekart coordinates to the corresponding
            polar coordinates, using the specified point as
            a center of the coordinate system.
            </summary>
        </member>
        <member name="T:MindFusion.Geometry2D.PointList">
            <summary>
            Represents a collection of points.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.PointList.#ctor">
            <summary>
            Initializes a new instance of the PointList class.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.PointList.#ctor(System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the PointList class.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.PointList.Add(System.Windows.Point)">
            <summary>
            Adds the specified point to the list.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.PointList.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the specified collection of points to the list.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.PointList.Insert(System.Int32,System.Windows.Point)">
            <summary>
            Inserts the specified point at the specified index within the list.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.PointList.Remove(System.Windows.Point)">
            <summary>
            Removes the specified point from the list.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.PointList.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the list using the specified comparer.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.PointList.ToArray">
            <summary>
            Converts the list to an array of points.
            </summary>
        </member>
        <member name="P:MindFusion.Geometry2D.PointList.Item(System.Int32)">
            <summary>
            Gets or sets the point at the specified index.
            </summary>
        </member>
        <member name="T:MindFusion.Geometry2D.ReadOnlyPointList">
            <summary>
            Represents a read-only collection of points.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.ReadOnlyPointList.#ctor(System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the ReadOnlyPointList class.
            </summary>
        </member>
        <member name="P:MindFusion.Geometry2D.ReadOnlyPointList.Item(System.Int32)">
            <summary>
            Gets the point at the specified index.
            </summary>
        </member>
        <member name="T:MindFusion.Geometry2D.Line">
            <summary>
            Represents a line in the plane defined by two points.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Line.#ctor(System.Windows.Point,System.Windows.Point)">
            <summary>
            Initializes a new instance of the Line class.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Line.#ctor(MindFusion.Geometry2D.Line)">
            <summary>
            Initializes a new instance of the Line class.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Line.IntersectLine(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates the intersection point with the line
            defined by the given points. If there is no intersection
            the return value is an infinite point.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Line.IntersectLine(MindFusion.Geometry2D.Line)">
            <summary>
            Calculates the intersection point with the specified line.
            If there is no intersection the return value is an infinite point.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Line.IntersectSegment(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates the intersection point with the 
            line segment defined by the given points.
            If there is no intersection the return
            value is an infinite point.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Line.IntersectSegment(MindFusion.Geometry2D.Line)">
            <summary>
            Calculates the intersection point with the given line segment.
            If there is no intersection the return value is an infinite point.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Line.ContainsInSegment(System.Windows.Point)">
            <summary>
            Checks whether the given point lies on the line segment.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Line.Between(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Checks whether x lies between y and z.
            </summary>
        </member>
        <member name="P:MindFusion.Geometry2D.Line.A">
            <summary>
            Gets or sets the first point defining the line.
            </summary>
        </member>
        <member name="P:MindFusion.Geometry2D.Line.B">
            <summary>
            Gets or sets the second point defining the line.
            </summary>
        </member>
        <member name="P:MindFusion.Geometry2D.Line.Bounds">
            <summary>
            Gets the smallest rectangle bounding the segment
            which defines the line.
            </summary>
        </member>
        <member name="T:MindFusion.Geometry2D.Polygon">
            <summary>
            Represents immutable closed plane figure with
            three or more straight sides.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Polygon.#ctor(MindFusion.Geometry2D.PointList)">
            <summary>
            Initializes a new instance of the Polygon class from
            the specified collection of points.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Polygon.#ctor(System.Windows.Rect)">
            <summary>
            Initializes a new instance of the Polygon class from
            the specified rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Polygon.Complete">
            <summary>
            Internal initialization routine.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Polygon.IntersectSegment(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates the intersections between the 
            polygon and the line segment defined by the given points.
            The result is a list containing all points of intersection.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Polygon.IntersectSegment(MindFusion.Geometry2D.Line)">
            <summary>
            Calculates the intersections between the 
            polygon and the given line segment. The result is
            a list containing all points of intersection.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Polygon.IntersectLine(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates the intersections between the 
            polygon and the line defined by the given points.
            The result is a list containing all points of intersection.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Polygon.IntersectLine(MindFusion.Geometry2D.Line)">
            <summary>
            Calculates the intersections between the 
            polygon and the given line. The result is
            a list containing all points of intersection.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Polygon.Contains(System.Windows.Point)">
            <summary>
            Checks whether the specified point lies
            whithin the polygon.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Polygon.Intersect(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Given two line segments, determine if they intersect.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Polygon.CCW(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Determines, given three points, if when travelling from the first to
            the second to the third, we travel in a counterclockwise direction.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Polygon.GetInternalPoint">
            <summary>
            Finds a point inside the polygon.
            </summary>
        </member>
        <member name="M:MindFusion.Geometry2D.Polygon.FindConvexVertex">
            <summary>
            Finds a convex vertex of the polygon.
            </summary>
        </member>
        <member name="P:MindFusion.Geometry2D.Polygon.Points">
            <summary>
            Gets a collection of the polygon points.
            </summary>
        </member>
        <member name="P:MindFusion.Geometry2D.Polygon.Bounds">
            <summary>
            Gets the smallest rectangle bounding the polygon.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DraggedNode">
            <summary>
            Class used to hold the DiagramNode instance during drag and drop.
            It is used for easier detection of the dragged content as DragEventArgs.Data.GetData() does not 
            check super classes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DraggedNode.Node">
            <summary>
            Holds the dragged DiagramNode
            </summary>
        </member>
        <member name="T:MindFusion.Convert">
            <summary>
            Converts various types to and from string in a
            culture-independent way.
            </summary>
        </member>
        <member name="M:MindFusion.Convert.ToSingle(System.String)">
            <summary>
            Converts the specified string to Single.
            </summary>
        </member>
        <member name="M:MindFusion.Convert.FromSingle(System.Single)">
            <summary>
            Converts the specified Single to string.
            </summary>
        </member>
        <member name="M:MindFusion.Convert.ToDouble(System.String)">
            <summary>
            Converts the specified string to Double.
            </summary>
        </member>
        <member name="M:MindFusion.Convert.FromDouble(System.Double)">
            <summary>
            Converts the specified Double to string.
            </summary>
        </member>
        <member name="M:MindFusion.Convert.ToInt16(System.String)">
            <summary>
            Converts the specified string to Int16.
            </summary>
        </member>
        <member name="M:MindFusion.Convert.FromInt16(System.Int16)">
            <summary>
            Converts the specified Int16 to string.
            </summary>
        </member>
        <member name="M:MindFusion.Convert.ToInt32(System.String)">
            <summary>
            Converts the specified string to Int32.
            </summary>
        </member>
        <member name="M:MindFusion.Convert.FromInt32(System.Int32)">
            <summary>
            Converts the specified Int32 to string.
            </summary>
        </member>
        <member name="M:MindFusion.Convert.ToInt64(System.String)">
            <summary>
            Converts the specified string to Int64.
            </summary>
        </member>
        <member name="M:MindFusion.Convert.FromInt64(System.Int64)">
            <summary>
            Converts the specified Int64 to string.
            </summary>
        </member>
        <member name="M:MindFusion.Convert.ToColor(System.String)">
            <summary>
            Converts the specified string to Color.
            The string should be in the format #AARRGGBB.
            </summary>
        </member>
        <member name="M:MindFusion.Convert.FromColor(System.Windows.Media.Color)">
            <summary>
            Converts the specified Color to string.
            The resulting string is in the format #AARRGGBB.
            </summary>
        </member>
        <member name="M:MindFusion.Convert.ToStream(System.String)">
            <summary>
            Converts the specified string to a Stream.
            </summary>
        </member>
        <member name="M:MindFusion.Convert.FromStream(System.IO.Stream)">
            <summary>
            Converts the specified Stream to a string.
            </summary>
        </member>
        <member name="M:MindFusion.Convert.FromBoolean(System.Boolean)">
            <summary>
            Converts the specified boolean value to string.
            </summary>
        </member>
        <member name="M:MindFusion.Convert.ToBoolean(System.String)">
            <summary>
            Converts the specified string to a boolean.
            </summary>
        </member>
        <member name="M:MindFusion.Convert.ToEnum(System.Type,System.String,System.Boolean)">
            <summary>
            Converts the specified string value to the
            corresponding field of the specified enum type.
            </summary>
        </member>
        <member name="F:MindFusion.Convert._culture">
            <summary>
            Uses always the same culture settings.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ClassDescriptor">
            <summary>
            Encapsulates class information for serialization.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.ClassDescriptor.#ctor(System.Type,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the ClassDescriptor class.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ClassDescriptor._classType">
            <summary>
            The runtime type of the target class.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ClassDescriptor._classId">
            <summary>
            A string used to identify the class when saving or loading instances.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.ClassDescriptor._classVersion">
            <summary>
            Allows loading instances after adding or removing class members.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ClassDescriptor.ClassType">
            <summary>
            Gets the runtime type of the target class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ClassDescriptor.ClassId">
            <summary>
            Gets the string used to identify the class when saving or loading instances.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ClassDescriptor.ClassVersion">
            <summary>
            Gets the version of the class. The version allows loading
            instances after adding or removing class members.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.AlignmentGuide">
            <summary>
            Draws alignment guides shown when AutoAlignNodes is enabled.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.UndoManager">
            <summary>
            Implements undo/redo functionality in WpfDiagram.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the UndoManager class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.Undo">
            <summary>
            Undoes an action saved in the command history.
            </summary>
            <remarks>
            Undoes a command from the command history. The action that
            would be undone by calling this method is pointed by NextUndo
            property of the CommandHistory class.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.Redo">
            <summary>
            Executes again an action saved in the command history.
            </summary>
            <remarks>
            Executes again a command from the command history. The action
            that would be redone by calling this method is pointed by
            NextRedo property of the CommandHistory class.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.StartComposite(System.String)">
            <summary>
            Creates an 'active' composite record with the specified title.
            </summary>
            <param name="title">
            A string to be associated with the composite record. It can be
            used later to give more information to users what exactly will
            be undone or redone. Use the Title property of the command class
            to get the title of an action record.
            </param>
            <returns>
            An instance of the CompositeCmd class which represents the active
            composite record. Call its Execute method when done with recording
            actions in the composite.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.StartComposite(System.String,System.Boolean)">
            <summary>
            Creates an 'active' composite record with the specified settings.
            </summary>
            <param name="title">
            A string to be associated with the composite record. It can be
            used later to give more information to users what exactly will
            be undone or redone. Use the Title property of the command class
            to get the title of an action record.
            </param>
            <param name="saveZOrder">
            Set this parameter to true to save the whole z-order array before
            executing the composite command, and to restore it back when the
            command is undone. Use that when there will be create or delete
            commands added to the composite one, because they do not guarantee
            restoring the items in the same z-order when the commands are undone
            or redone.
            </param>
            <returns>
            An instance of the CompositeCmd class which represents the active
            composite record. Call its Execute method when done with recording
            actions in the composite.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.Enable(System.Boolean)">
            <summary>
            Enables or disables the undo manager without
            clearing the underlying command history.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.ExecuteCommand(MindFusion.Diagramming.Wpf.Commands.Command)">
            <summary>
            Executes the specified command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.OnModifyItem(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Modifications might be compositted, e.g. dragging a node would
            probably modify the arrows attached to it.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.OnCompleteModify">
            <summary>
            Invoked when an interactive modification has completed successfully.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.OnCancelModify">
            <summary>
            Invoked when an interactive modification has been canceled.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.OnRedimTable(MindFusion.Diagramming.Wpf.TableNode)">
            <summary>
            Signals the beginning of a table redimentioning operation.
            </summary>
            <remarks>
            Redimensioning a table could be either stand-alone or part of
            ChangeCommand when changing programmatically table properties;
            redim command might lead to following additional changes:
              arrows might be removed if they link to the removed rows
              arrows might be scrolled up/down -> ModifyItemCmd
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.OnRedimLinksDeleted(MindFusion.Diagramming.Wpf.TableNode)">
            <summary>
            Invoked in the process of table redimentioning opertaion.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.OnCompleteRedim">
            <summary>
            Signals the end of a table redimentioning opertaion.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.OnChangeItem(MindFusion.Diagramming.Wpf.DiagramItem,MindFusion.Diagramming.Wpf.Commands.ChangeItemCmd)">
            <summary>
            Signals the beginning of a programatic change to item's properties.
            </summary>
            <remarks>
            This is needed for redimensioning tables too.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.OnStartRoute">
            <summary>
            Signals a beginning of a routing operation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.OnRouteLink(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Invoked for individual items during routing operation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.OnEndRoute">
            <summary>
            Signals the end of a routing operation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.OnStartLayout(System.String)">
            <summary>
            Signals the beginning of a layout operation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.OnEndLayout">
            <summary>
            Signals the end of a layout operation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.OnStartExpand">
            <summary>
            Signals the beginning of a tree expand operation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.OnExpandItem(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Invoked for each item, modified during tree expand operation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.OnEndExpand">
            <summary>
            Signals the end of a tree expand operation.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.OnStartPlacementChange(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Signals the beginning of a programatic item modification.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.OnPlacementChange(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Invoked for items modified programatically.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.UndoManager.OnEndPlacementChange">
            <summary>
            Signals the end of a programatic item modification.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.UndoManager.history">
            <summary>
            Save commands here for later undo or redo.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.UndoManager.undoEnabled">
            <summary>
            Flag indicating whether undo is enanled.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.UndoManager.diagram">
            <summary>
            This is the diagram.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.UndoManager.defaultCmdContext">
            <summary>
            The commands can get the diagram and other contextual
            information through this object.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.UndoManager.currCommand">
            <summary>
            Commands might be executed in the context of other commands
            the variables before form the current context.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.UndoManager.UndoEnabled">
            <summary>
            Gets or sets a value indicating whether saving action records
            for later undo is enabled.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.UndoManager.History">
            <summary>
            Gets a reference to the undo manager's CommandHistory instance.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.UndoManager.CurrentModifyCmd">
            <summary>
            Gets the current ModifyItemCmd command.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TableNode">
            <summary>
            Tables are diagram nodes that can contain multiple cells and
            can be related to other nodes through their rows.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.#ctor">
            <summary>
            Initializes a new instance of the TableNode class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the TableNode class.
            </summary>
            <param name="parent">
            The Diagram from which to obtain default values for the node properties.
            </param>
            <remarks>
            This constructor initializes the TableNode properties with the
            values specified in the respective default-value properties of
            the Diagram object.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.#ctor(MindFusion.Diagramming.Wpf.TableNode)">
            <summary>
            Initializes a new instance of the TableNode class using the specified node as a prototype.
            </summary>
            <param name="prototype">
            The table node to use as a prototype. The properties of the
            new table are initialized from the property values of prototype.
            </param>
            <remarks>
            This constructor copies the TableNode property values from the
            specified prototype node.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.OnLoad">
            <summary>
            DiagramItem.OnLoad override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Dispose(System.Boolean)">
            <summary>
            Disposes any disposable resources managed by this table.
            </summary>
            <param name="disposing">Specifies whether the method is called explicitly
            or from the garbage collector.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the item content into an XML element.
            </summary>
            <param name="xmlElement">
            An XmlElement the item's data should be stored into.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information about
            the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Loads the item content from an XML element.
            </summary>
            <param name="xmlElement">
            An XmlElement containing the item's data.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information about
            the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.CreateProperties">
            <summary>
            DiagramItem.CreateProperties override.
            </summary>
            <returns>
            A DiagramItemProperties-derived object containing a snapshot
            of the item's properties.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.SaveProperties(MindFusion.Diagramming.Wpf.DiagramItemProperties)">
            <summary>
            DiagramNode.SaveProperties override.
            </summary>
            <param name="props">
            A DiagramItemProperties-derived object where the item's properties
            should be saved.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RestoreProperties(MindFusion.Diagramming.Wpf.DiagramItemProperties)">
            <summary>
            DiagramNode.RestoreProperties override.
            </summary>
            <param name="props">
            A DiagramItemProperties-derived object containing a
            snapshot of the item's properties.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.SaveStructure(MindFusion.Diagramming.Wpf.TableStructure)">
            <summary>
            Saves the table structure.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RestoreStructure(MindFusion.Diagramming.Wpf.TableStructure)">
            <summary>
            Restores the table structure.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.OnUpdateBounds">
            <summary>
            DiagramNode.OnUpdateBounds override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.OnSizeChanged">
            <summary>
            DiagramNode.OnSizeChanged override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Draw(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.RenderOptions)">
            <summary>
            Draws the node using the specified DrawingContext object.
            </summary>
            <param name="graphics">
            A DrawingContext object where the node should be rendered.
            </param>
            <param name="options">
            Provides options for the drawing operation.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.DrawHandles(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.HandlesVisualStyle)">
            <summary>
            DiagramItem.DrawHandles override.
            </summary>
            <param name="graphics">
            The DrawingContext surface to draw the handles on.
            </param>
            <param name="hstyle">
            The style that should be used to render the handles.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.DrawCells(System.Windows.Media.DrawingContext,System.Windows.Rect,MindFusion.Diagramming.Wpf.RenderOptions,System.Windows.Media.Pen)">
            <summary>
            Draws the table cells.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.DrawText(System.String,System.Windows.Rect,MindFusion.Text.DrawTextHint)">
            <summary>
            Styled text rendering callback.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetRepaintRect(System.Boolean)">
            <summary>
            DiagramNode.GetRepaintRect override.
            </summary>
            <param name="includeConnected">
            true is related items should be considered too; otherwise, false.
            </param>
            <returns>
            A rectangular region that should be repainted when this node is modified.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Repaint(System.Boolean)">
            <summary>
            DiagramItem.Repaint override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.ResizeToFitImage">
            <summary>
            Makes a table as big as the image it displays.
            </summary>
            <remarks>
            Call this method to make a table exactly the same size
            as the image it contains.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.ResizeToFitText(System.Boolean)">
            <summary>
            Resizes the columns and rows so that the cells are large
            enough to fit their text.
            </summary>
            <param name="ignoreCaption">
            false if the caption bar too should be resized to fit
            the caption text; otherwise, true.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.HitTestHandle(System.Windows.Point,System.Int32@)">
            <summary>
            DiagramItem.HitTestHandle override.
            </summary>
            <param name="pt">
            A Point value specifying where to look for a selection handle.
            </param>
            <param name="handle">
            A reference to an integer variable, which receives the index
            of the found selection handle.
            </param>
            <returns>
            true if there is a selection handle at the specified location;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetRegion">
            <summary>
            DiagramItem.GetRegion override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.SetNewBounds(System.Windows.Rect,System.Boolean)">
            <summary>
            Sets a new bounding rectangle for this table.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.OnMeasureUnitChanged">
            <summary>
            Called when the Diagram's MeasureUnit changes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.OnZoomChanged">
            <summary>
            Called when the DiagramView.ZoomFactor changes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            UIElement.OnMouseMove override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.InvalidateText">
            <summary>
            Invalidates the current styled text. The styled text is recreated
            the next time it is required. The layout of the styled text, as is
            obvious, is invalidated as well.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.InvalidateTextLayout">
            <summary>
            Invalidates the layout of the current styled text. The layout is recreated
            the next time it is required.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.InvalidateCellText">
            <summary>
            Invalidates the current styled text of the table cells.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.InvalidateCellTextLayout">
            <summary>
            Invalidates the layout of the current styled text of the table cells.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.UpdateText">
            <summary>
            Updates the internal MindFusion.Text.Text object when styled
            characteristics of a table's text have changed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.LayoutText">
            <summary>
            Performs the actual text layouting so that
            the internal MindFusion.Text.Layout object
            is prepared for subsequent drawing operations.
            Returns whether text fits entirely whithin the area.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.LayoutText(System.Windows.Rect)">
            <summary>
            Layouts the caption text in the specified rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.DocToLocal(System.Windows.Rect)">
            <summary>
            Transforms the specified rectangle from document
            coordinates to coordinates relative to the left-top
            point of the table.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetCaptionSize">
            <summary>
            Calculates the size of the caption text.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetAllOutgoingLinks(MindFusion.Diagramming.Wpf.DiagramLinkCollection)">
            <summary>
            Node.GetAllOutgoingLinks override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetAllIncomingLinks(MindFusion.Diagramming.Wpf.DiagramLinkCollection)">
            <summary>
            Node.GetAllIncomingLinks override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.VisitLinks(MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor)">
            <summary>
            Node.VisitLinks override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.VisitLinks(MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor,MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor)">
            <summary>
            Node.VisitLinks override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.VisitLinks(MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor,MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor,MindFusion.Diagramming.Wpf.DiagramLinkCollection)">
            <summary>
            Node.VisitLinks override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.AcceptLinks(System.Boolean,System.Windows.Point)">
            <summary>
            DiagramNode.AcceptLinks override.
            </summary>
            <param name="outgoing">
            true to check for outgoing links; otherwise, false.
            </param>
            <param name="mousePosition">
            The current mouse pointer position in diagram coordinates.
            </param>
            <returns>
            true if the node accepts connections of the specified type;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.AlreadyLinked(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Node.AlreadyLinked override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.CreateConnectionPoint(MindFusion.Diagramming.Wpf.DiagramLink,System.Windows.Point,System.Boolean)">
            <summary>
            DiagramNode.CreateConnectionPoint override.
            </summary>
            <param name="link">
            A DiagramLink that should be connected to this node.
            </param>
            <param name="pt">
            The point at which the link should be connected.
            </param>
            <param name="incoming">
            true if link is an incoming link; otherwise, false.
            </param>
            <returns>
            A ConnectionPoint instance representing the connection.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.CreateConnectionPoint(MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean,System.Int32)">
            <summary>
            Creates a new link between the specified row of this table
            and the specified link.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.AddRelation(System.Int32,MindFusion.Diagramming.Wpf.Relationship,MindFusion.Diagramming.Wpf.TableNode,System.Int32)">
            <summary>
            Creates a relation with the specified table.
            </summary>
            <param name="row">
            Zero-based index of a row in this table to be related.
            </param>
            <param name="rel">
            The type of the relation (and the direction of the link).
            </param>
            <param name="tableNode">
            The other table in the relation.
            </param>
            <param name="relRow">
            Zero-based index of the row in the other table.
            </param>
            <returns>
            A DiagramLink object representing the relation.
            </returns>
            <remarks>
            Call this method to link rows of two tables.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.BreakRelation(System.Int32,MindFusion.Diagramming.Wpf.Relationship,MindFusion.Diagramming.Wpf.TableNode)">
            <summary>
            Breaks the relation with the specified table.
            </summary>
            <param name="row">
            Zero-based index of a row in this table that is related to a row in another.
            </param>
            <param name="rel">
            The type of the relation (and the direction of the link).
            </param>
            <param name="tableNode">
            The other table in the relation.
            </param>
            <remarks>
            Call this method to break the link between two tables.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.AddIncomingLink(System.Int32,MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Adds the specified link as incoming to the
            specified row.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.AddOutgoingLink(System.Int32,MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Adds the specified link as outgoing to the
            specified row.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RemoveIncomingLink(System.Int32,MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Removes the specified link from the incoming
            link collection of the specified row.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RemoveOutgoingLink(System.Int32,MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Removes the specified link from the ougoing
            link collection of the specified row.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.VisitHierarchy(MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor)">
            <summary>
            Node.VisitHierarchy override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RemoveRelation(System.Int32,MindFusion.Diagramming.Wpf.Relationship,MindFusion.Diagramming.Wpf.TableNode)">
            <summary>
            Removes the relation to the specified tableNode from this tableNode.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.UpdateLinksIndices">
            <summary>
            Updates the row indices of all links connected to this table.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.UpdateLinksPos(System.Int32)">
            <summary>
            Updates the position of all links from the specified index
            onwards, usually in respons of redim-ing or scrolling the table.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.SetReflexive(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Invoked to let a node set the shape of a reflexive link connected to it.
            </summary>
            <param name="link">Reference to the link.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.MindFusion#Diagramming#Wpf#InplaceEditable#GetTextToEdit">
            <summary>
            Node.GetTextToEdit override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.MindFusion#Diagramming#Wpf#InplaceEditable#SetEditedText(System.String)">
            <summary>
            Node.SetEditedText override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.MindFusion#Diagramming#Wpf#InplaceEditable#GetEditRect(System.Windows.Point)">
            <summary>
            Node.GetEditRect override.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetNearestAnchor(System.Windows.Point,System.Boolean,MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean,System.Int32@)">
            <summary>
            Invoked when an link is drawn from / to a table.
            Finds the anchor point nearest to link's end point.
            Tables need special handling to combine row's and
            table's anchor patterns.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetNearestAnchor(System.Int32,System.Windows.Point,System.Boolean,MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean,System.Int32@)">
            <summary>
            Gets the anchor point nearest to the specified point.
            The search starts with the anchor pattern of the row
            with the specified index.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetRowAnchorPattern(System.Int32)">
            <summary>
            Returns the anchor pattern of the row with the
            specified index.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.AllowsRowAnchorDir(System.Boolean)">
            <summary>
            Checks whether there is at least one anchor pattern
            associated with a row in this table, which allows
            arrows with the specified direction.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.ManipulatorEnacted(System.Windows.Point)">
            <summary>
            DiagramItem.ManipulatorEnacted override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.PtInManipulator(System.Windows.Point)">
            <summary>
            DiagramItem.PtInManipulator override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.DoExpand">
            <summary>
            Node.DoExpand override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.DoCollapse">
            <summary>
            Node.DoCollapse override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.SetCurrScrollRow(System.Int32)">
            <summary>
            Sets the current scroll row to the row with
            the specified index.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.SetScrollable(System.Boolean,System.Boolean)">
            <summary>
            Sets the table's scrollable flag, eventually
            adding or removing the Scroller manipulator 
            according to the specified value.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.CanScrollUp">
            <summary>
            Gets a value indicating whether the table currently
            allows scrolling upwards.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.CanScrollDown">
            <summary>
            Gets a value indicating whether the table currently
            allows scrolling downwards.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.ScrollDown">
            <summary>
            Scrolls the table downwards.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.ScrollUp">
            <summary>
            Scrolls the table upwards.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetIntersection(System.Windows.Point,System.Windows.Point)">
            <summary>
            DiagramNode.GetIntersection override.
            </summary>
            <param name="segmentStart">
            The first point of the segment.
            </param>
            <param name="segmentEnd">
            The second point of the segment.
            </param>
            <returns>
            A Point object representing the intersection point.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetToolTip(System.Windows.Point,System.Boolean)">
            <summary>
            DiagramNode.GetToolTip override.
            </summary>
            <param name="point">
            The mouse pointer position.
            </param>
            <param name="isDiagramCoordinate">
            true if the point is specified in logical diagram coordinates;
            false if the point is specified in WPF points.
            </param>
            <returns>
            An object specifying the tooltip contents.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetCapTextRect">
            <summary>
            Calculates the caption rectangle, excluding the scroller
            if the table is scrollable.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.AddRow">
            <summary>
            Adds new empty row at the bottom of the table.
            </summary>
            <returns>
            Returns the index of the newly added row within the Rows collection.
            </returns>
            <remarks>
            Call the method to add new rows at the end of the table. The size
            of the table is automatically updated and the rows are added to the
            row collection.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.InsertRow(System.Int32)">
            <summary>
            Inserts new empty row at the specified position within the table.
            </summary>
            <param name="row">
            The zero-based index of the row to be inserted.
            </param>
            <remarks>
            Call the method to add new row at a given position in the table.
            The size of the table is automatically updated and the rows are
            added to the row collection.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.DeleteRow(System.Int32)">
            <summary>
            Deletes the row at the specified position within the table.
            </summary>
            <param name="row">
            The zero-based index of the row to be deleted.
            </param>
            <remarks>
            Call the method to delete a row from the table. The size
            of the table is automatically updated and the rows are removed
            from the row collection.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.AddColumn">
            <summary>
            Adds new empty column at the right end of the table.
            </summary>
            <returns>
            Returns the index of the newly added column within the Columns collection.
            </returns>
            <remarks>
            Call the method to add new columns at the end of the table.
            The size of the table is automatically updated and the columns
            are added to the column collection.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.InsertColumn(System.Int32)">
            <summary>
            Inserts new empty column at the specified position within the table.
            </summary>
            <param name="col">
            The zero-based index of the column to be inserted.
            </param>
            <remarks>
            Call the method to add new column at a given position in the table.
            The size of the table is automatically updated and the columns are
            added to the column collection.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.DeleteColumn(System.Int32)">
            <summary>
            Deletes the column with the specified index within the table.
            </summary>
            <param name="col">
            The zero-based index of the column to be deleted.
            </param>
            <remarks>
            Call the method to delete a column from the table. The size
            of the table is automatically updated and the columns are removed
            from the column collection.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RedimTable(System.Int32,System.Int32)">
            <summary>
            Sets new number of rows and columns for this table.
            </summary>
            <param name="cols">
            The new number of columns.
            </param>
            <param name="rows">
            The new number of rows.
            </param>
            <remarks>
            This method does not preserve the old contents of table cells.
            After its invocation all cells are empty and columns and rows
            are with default sizes.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RedimTableNoUndo(System.Int32,System.Int32)">
            <summary>
            Sets a new number of rows and columns for this table.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RedimTable(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets a new number of rows and columns for this table.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RedimTable(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Sets a new number of rows and columns for this table.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RedimTable(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Sets a new number of rows and columns for this table.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RedimTable(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets a new number of rows and columns for this table.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RedimTable(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Sets a new number of rows and columns for this table.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RedimTable(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets a new number of rows and columns for this table.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RowFromPoint(System.Windows.Point,System.Boolean)">
            <summary>
            Returns the index of the table row located at
            the specified position.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RowFromPointStrict(System.Windows.Point)">
            <summary>
            As RowFromPoint, but returns non negative index only when the point is over row
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.CalcColWidths">
            <summary>
            Recalculates the widths of all table columns.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetParentRow(System.Int32)">
            <summary>
            Returns the number of the first header row before the
            specified row. If the specified row is a header row
            itself, returns 'row'. If there is no header row
            before this one, the return value is -1.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.IsRowCollapsed(System.Int32)">
            <summary>
            Checks whether the specified row is collapsed.
            Collapsed are all rows whose header row is collapsed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetExpandedRowRect(System.Int32)">
            <summary>
            Calculates the bounding rectangle of the specified row.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetRowRect(System.Int32)">
            <summary>
            Calculates the bounding rectangle of the specified row.
            If the row is collapsed, returns the bounding rectangle
            of its parent header row.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetColumnRect(System.Int32)">
            <summary>
            Calculates the bounding rectangle of the specified column.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetCellRect(System.Int32,System.Int32)">
            <summary>
            Calculates the bounding rectangle of the cell
            in the specified row and column, ignoring cell
            spanning.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetSpannedCellRect(MindFusion.Diagramming.Wpf.TableNode.Cell)">
            <summary>
            Calculates the bounding rectangle of the specified cell, taking 
            into consideration how many rows and columns are spanned by it.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetSpannedCellRect(System.Int32,System.Int32)">
            <summary>
            Calculates the bounding rectangle of the cell in the specified row and column,
            taking into consideration how many rows and columns are spanned by it.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetSpannedCellRect(System.Int32,System.Int32,System.Boolean,System.Windows.Rect@)">
            <summary>
            Calculates the bounding rectangle of the cell in
            the specified row and column also taking in
            consideration the cell row and column spanning.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.CellFromPoint(System.Windows.Point,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Returns the row and column indices of the cell located at the
            specified point, taking into consideration the cells span.
            </summary>
            <param name="point">
            The point to check.
            </param>
            <param name="isDiagramCoordinate">
            true if the point is specified in logical diagram coordinates;
            false if the point is specified in WPF points.
            </param>
            <param name="row">
            Receives the row index if a cell is found at the specified position.
            </param>
            <param name="col">
            Receives the column index if a cell is found at the specified position.
            </param>
            <returns>
            true if a cell of this table contains the specified point;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.CellFromPoint(System.Windows.Point,System.Boolean)">
            <summary>
            Returns the row and column indices of the cell located at the
            specified point, taking into consideration the cells span.
            </summary>
            <param name="point">
            The point to check.
            </param>
            <param name="isDiagramCoordinate">
            true if the point is specified in logical diagram coordinates;
            false if the point is specified in WPF points.
            </param>
            <returns>
            true if a cell of this table contains the specified point;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.NonSpannedCellFromPt(System.Windows.Point,System.Int32@,System.Int32@)">
            <summary>
            Returns the row and column indices of the cell located
            at the specified point ignoring cell spanning.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetCoveredCells">
            <summary>
            Returns a boolean map corresponding to the cells in this
            table. A value in the map is set to true if the corresponding
            cell is covered by a spanning cell and false, otherwise.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.ResetCoveredCells">
            <summary>
            Reset the covered cell map, forcing it to be recalculated
            the next time it is requested.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.SetHasSpanningCells">
            <summary>
            Sets a flag indicating whether there are spanned
            cells in this table.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetHasSpanningCells">
            <summary>
            Gets a flag indicating whether there are spanned
            cells in this table.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetMaxRowSpan">
            <summary>
            Gets the largest row span in this table.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.CheckForHeaderRows">
            <summary>
            Checks whether there are header rows in this table
            and updates the internal flag.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetRowIntersection(System.Int32,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns either the left middle point or the right
            middle point of the specified row's bounding rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.GetRowCenter(System.Int32)">
            <summary>
            Returns the center point of the specified row's
            bounding rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.OnTextAttributeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DiagramItem.OnTextAttributeChanged override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Rows">
            <summary>
            Gets a list of all rows in the table.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Columns">
            <summary>
            Gets a list of all columns in the table.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.ColumnCount">
            <summary>
            Gets or sets the number of columns in the table.
            </summary>
            <remarks>
            If you increase the number of columns the contents of the
            old columns will remain intact. If you decrease the number,
            the last columns are removed and the other remain unchanged.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.RowCount">
            <summary>
            Gets or sets the number of rows in the table.
            </summary>
            <remarks>
            If you increase the number of rows the content of the initial
            rows will remain intact. If you decrease the number, the last
            rows are removed and the other remain unchanged.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Shape">
            <summary>
            Gets or sets the shape of the table's outline.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.CellFrameStyle">
            <summary>
            Gets or sets the style of the table cells.
            </summary>
            <remarks>
            This property specifies whether there are borders drawn around
            table cells, and if yes, their appearance.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.ConnectionStyle">
            <summary>
            Gets or sets a value indicating whether drawing a link
            from/to this table, should connect a row of the table,
            or the whole table as single entity.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.CustomDraw">
            <summary>
            Gets or sets the type of custom drawing performed on this table.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.CellCustomDraw">
            <summary>
            Gets or sets the type of custom drawing performed on the table cells.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.ColumnWidth">
            <summary>
            Gets or sets the default width of the table columns.
            </summary>
            <remarks>
            The value of this property is used to initialize the width of
            new columns when they are created.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.RowHeight">
            <summary>
            Gets or sets the default height of table rows.
            </summary>
            <remarks>
            The value of this property is used to initialize the height
            of new rows when they are created.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Item(System.Int32,System.Int32)">
            <summary>
            Gets the Cell instance at the specified position.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.CurrentScrollRow">
            <summary>
            Gets or sets the index of the first visible row in the table.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.RowAnchorPattern">
            <summary>
            Gets or sets the default anchor pattern for the rows of a table.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.CurrentRow">
            <summary>
            Gets the current scroll row. If the row is hidden
            though, returns the next visible row.
            </summary>
            <remarks>
            To allow users to scroll the table interactively,
            enable the Scrollable property.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Image">
            <summary>
            Gets or sets the image that is displayed in this table.
            </summary>
            <remarks>
            Use the property to customize your table's background.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.ImageAlign">
            <summary>
            Gets or sets the alignment of the image displayed in this table.
            </summary>
            <remarks>
            This property specifies how images are positioned inside tables.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.CaptionBackBrush">
            <summary>
            Gets or sets the brush used to paint the caption area of this table.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Caption">
            <summary>
            Gets or sets the text displayed as caption of the table.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.CaptionBrush">
            <summary>
            Gets or sets the color of the text used as table caption.
            </summary>
            <remarks>
            Use the property to make table caption more distinguished.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.CaptionFormat">
            <summary>
            Gets or sets the alignment and line position of
            the text used as table caption.
            </summary>
            <remarks>
            Use this property to change the alignment of text
            or its position inside the caption area.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.CaptionHeight">
            <summary>
            Gets or sets the height of the table's caption area.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.CaptionPlainText">
            <summary>
            Gets the plain text of the table's caption.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.CellTextStyle">
            <summary>
            Gets an object that defines the default text formatting of table cells.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.EnableStyledText">
            <summary>
            Gets or sets a value indicating whether
            styled text rendering is enabled.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Scrollable">
            <summary>
            Gets or sets a value indicating whether users are
            allowed to scroll table rows.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.OffsetHeaderRows">
            <summary>
            Gets or sets a value indicating whether the table cells are offset
            to the right to accommodate for the expand buttons of Header rows.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.HeaderRowOffset">
            <summary>
            Gets the offset of cells caused by header row icons.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.HeaderRowIconWidth">
            <summary>
            Gets the width of a header row icon.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.HighlightedRow">
            <summary>
            Gets or sets the highlighted row.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TableNode.Cell">
            <summary>
            Represents a cell in a TableNode instance.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Cell.#ctor(MindFusion.Diagramming.Wpf.TableNode)">
            <summary>
            Initializes a new instance of the TableNode.Cell class.
            </summary>
            <param name="table">
            The TableNode this cell belongs to.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Cell.Clone">
            <summary>
            Creates a copy of this cell.
            </summary>
            <returns>
            An instance of the TableNode.Cell class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Cell.#ctor">
            <summary>
            Initializes a new instance of the Cell class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Cell.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the cell content into an XML element.
            </summary>
            <param name="xmlElement">
            An XmlElement the cell's data should be stored into.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information
            about the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Cell.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Loads the cell content from an XML element.
            </summary>
            <param name="xmlElement">
            An XmlElement containing the cell's data.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information about
            the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Cell.OnTextAttributeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TextPresenter.OnTextAttributeChanged override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Cell.SetDiagramDirty">
            <summary>
            TextPresenter.SetDiagramDirty override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Cell.UpdateText">
            <summary>
            Updates the internal MindFusion.Text.Text object when
            styled characteristics of a cell's text have changed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Cell.LayoutText">
            <summary>
            Performs the actual text layouting so that
            the internal MindFusion.Text.Layout object
            is prepared for subsequent drawing operations.
            Returns whether text fits entirely whithin the area.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Cell.LayoutText(System.Windows.Rect)">
            <summary>
            Layouts the cell text in the specified rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Cell.getTextBounds(System.Windows.Rect)">
            <summary>
            Determines the coordinates of the rectangle where
            text should be rendered inside a cell.
            </summary>
            <param name="cellBounds">The cell coordinates.</param>
            <returns>A Rect specifying the text bounds.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Cell.getTextMargin(System.Double)">
            <summary>
            Calculates the margin to leave between the cell bounds and the text.
            </summary>
            <returns>A Real value specifying the margin size.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Cell.GetTextSize">
            <summary>
            Gets the size of the text displayed in this cell.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Cell.DocToLocal(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Gets the bounding rectangle of the specified cell,
            expressed in coordinates relative to the top-left
            point of the cell.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Cell.Draw(System.Windows.Media.DrawingContext,System.Windows.Media.Pen,System.Windows.Media.Brush,System.Windows.Rect,MindFusion.Diagramming.Wpf.CellFrameStyle,System.Int32,System.Int32,System.Windows.Rect,MindFusion.Diagramming.Wpf.RenderOptions)">
            <summary>
            Draws the cell.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Cell.PaintSunkBorders(System.Windows.Media.DrawingContext,System.Windows.Rect,System.Double)">
            <summary>
            Draws sunk borders using the currently set system 3D colors.
            </summary>
            <param name="graphics">The Graphics object to draw on.</param>
            <param name="bounds">The border bounding rectangle.</param>
            <param name="pixel"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Cell.DrawText(System.String,System.Windows.Rect,MindFusion.Text.DrawTextHint)">
            <summary>
            Styled text rendering callback.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Cell.MindFusion#Diagramming#Wpf#InplaceEditable#GetTextToEdit">
            <summary>
            InplaceEditable.GetTextToEdit override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Cell.MindFusion#Diagramming#Wpf#InplaceEditable#SetEditedText(System.String)">
            <summary>
            InplaceEditable.SetEditedText override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Cell.MindFusion#Diagramming#Wpf#InplaceEditable#GetEditRect(System.Windows.Point)">
            <summary>
            InplaceEditable.GetEditRect override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Cell.Table">
            <summary>
            Gets a reference to the TableNode containing this cell.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Cell.HyperLink">
            <summary>
            Gets or sets the hyperlink associated with the cell.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Cell.Tag">
            <summary>
            Gets or sets custom data associated with this cell.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Cell.ToolTip">
            <summary>
            Gets or sets the tooltip text associated with the cell.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Cell.Font">
            <summary>
            Gets or sets the font used to draw text inside this cell.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Cell.TextFormat">
            <summary>
            Gets or sets the alignment of the text that is
            displayed inside the cell.
            </summary>
            <remarks>
            Use this property to specify the alignment of the text
            that is contained in cells.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Cell.PlainText">
            <summary>
            Gets the plain text of the cell.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Cell.Brush">
            <summary>
            Gets or sets the brush used to fill this cell.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Cell.Image">
            <summary>
            Gets or sets the image that is displayed in this cell.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Cell.ImageAlign">
            <summary>
            Gets or sets the alignment of the image displayed in this cell.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Cell.ColumnSpan">
            <summary>
            Gets or sets how many columns the cell should span.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Cell.RowSpan">
            <summary>
            Gets or sets how many rows the cell should span.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TableNode.CellCollection">
            <summary>
            Represents a strongly-typed collection of TableNode.Cell objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.CellCollection.Clone">
            <summary>
            Creates a deep copy of this collection.
            </summary>
            <returns>
            An instance of the TableNode.CellCollection class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.CellCollection.Add(MindFusion.Diagramming.Wpf.TableNode.Cell)">
            <summary>
            Adds the specified cell to the collection.
            </summary>
            <param name="cell">
            The TableNode.Cell object to add to the collection.
            </param>
            <remarks>
            Do not use this method directly. Use the methods of the
            TableNode class instead.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.CellCollection.Insert(System.Int32,MindFusion.Diagramming.Wpf.TableNode.Cell)">
            <summary>
            Inserts the specified cell at the specified index
            within the collection.
            </summary>
            <param name="index">
            The zero-based index at which to insert the cell.
            </param>
            <param name="cell">
            The TableNode.Cell object to add to the collection.
            </param>
            <remarks>
            Do not use this method directly. Use the methods of the
            TableNode class instead.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.CellCollection.GetAt(System.Int32)">
            <summary>
            Returns the cell at the specified position.
            </summary>
            <param name="index">
            The zero-based index of the cell to retrieve.
            </param>
            <returns>
            A reference to the TableNode.Cell object at the specified position.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.CellCollection.Remove(MindFusion.Diagramming.Wpf.TableNode.Cell)">
            <summary>
            Removes the specified cell from the collection.
            </summary>
            <param name="cell">
            The TableNode.Cell object to add to the collection.
            </param>
            <remarks>
            Do not use this method directly. Use the methods of the
            TableNode class instead.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.CellCollection.Item(System.Int32)">
            <summary>
            Gets or sets the cell at the specified position within the collection.
            </summary>
            <remarks>
            Do not use the set accessor of this property.
            </remarks>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TableNode.Row">
            <summary>
            Represents a row in TableNode node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Row.#ctor(MindFusion.Diagramming.Wpf.TableNode)">
            <summary>
            Initializes a new instance of the Row class.
            </summary>
            <param name="tableNode">
            The TableNode this row belongs to.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Row.#ctor">
            <summary>
            Initializes a new instance of the Row class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Row.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the row properties into an XML element.
            </summary>
            <param name="xmlElement">
            An XmlElement the row's data should be stored into.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information
            about the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Row.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Loads the row properties from an XML element.
            </summary>
            <param name="xmlElement">
            An XmlElement containing the row's data.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information
            about the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Row.Clone">
            <summary>
            Creates a copy of this row.
            </summary>
            <returns>
            An instance of the TableNode.Row class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Row.SetHeader(System.Boolean)">
            <summary>
            Sets whether the row is a header.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Row.SetExpanded(System.Boolean,System.Int32)">
            <summary>
            Sets whether the row is expanded.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Row.Height">
            <summary>
            Gets or sets the height of the table row.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Row.Header">
            <summary>
            Gets or sets a value indicating whether this row
            is a section header.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Row.Expanded">
            <summary>
            Gets or sets a value indicating whether the table section
            starting from this Header row is collapsed or expanded.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Row.IsExpanded">
            <summary>
            Gets a value indicating whether the row is expanded.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Row.IncomingLinks">
            <summary>
            Gets a collection of all links that point to this table row.
            </summary>
            <remarks>
            The property returns a collection of all links that point to
            this table row. Use it to access the links or get their number.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Row.OutgoingLinks">
            <summary>
            Gets a collection of all links that go out of this table row.
            </summary>
            <remarks>
            The property returns a collection of all links that start from
            this table row. Use it to access the links or get their number.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Row.RelatedOneToMany">
            <summary>
            Gets a collection of all tables that are in one-to-many
            relation with this table row.
            </summary>
            <remarks>
            When working with database diagrams, use this property to
            find all tables which are in 1:M relation with this row.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Row.RelatedManyToOne">
            <summary>
            Gets a collection of all tables that are in many-to-one
            relation with this table row.
            </summary>
            <remarks>
            When working with database diagrams, use this property to
            find all tables which are in M:1 relation with this row.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Row.AnchorPattern">
            <summary>
            Gets or sets a set of anchor points to which links can
            dock when connected to this row.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TableNode.RowCollection">
            <summary>
            Represents a strongly-typed collection of TableNode.Row objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RowCollection.Clone">
            <summary>
            Creates a deep copy of this collection.
            </summary>
            <returns>
            An instance of the TableNode.RowCollection class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RowCollection.Add(MindFusion.Diagramming.Wpf.TableNode.Row)">
            <summary>
            Adds the specified row to the collection.
            </summary>
            <param name="r">
            The TableNode.Row object to add to the collection.
            </param>
            <remarks>
            Do not use this method directly. Use the AddRow method of
            the TableNode class instead.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RowCollection.Insert(System.Int32,MindFusion.Diagramming.Wpf.TableNode.Row)">
            <summary>
            Inserts the specified row at the specified index
            within the collection.
            </summary>
            <param name="index">
            The zero-based index at which to insert the row.
            </param>
            <param name="row">
            The TableNode.Row object to add to the collection.
            </param>
            <remarks>
            Do not use this method directly. Use the InsertRow
            method of the TableNode class instead.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RowCollection.GetAt(System.Int32)">
            <summary>
            Returns the row at the specified position.
            </summary>
            <param name="index">
            The zero-based index of the row to retrieve.
            </param>
            <remarks>
            A reference to the TableNode.Row object at the specified position.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RowCollection.Remove(MindFusion.Diagramming.Wpf.TableNode.Row)">
            <summary>
            Removes the specified row from the collection.
            </summary>
            <param name="row">
            The TableNode.Row object to add to the collection.
            </param>
            <remarks>
            Do not use this method directly. Use the DeleteRow method
            of the TableNode class instead.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.RowCollection.IndexOf(MindFusion.Diagramming.Wpf.TableNode.Row)">
            <summary>
            Returns the index of the specified row within the collection.
            </summary>
            <param name="row">
            The TableNode.Row object whose index to search for in the collection.
            </param>
            <returns>
            An integer value specifying the index of the row within the
            collection or -1, if the row was not found.
            </returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.RowCollection.Item(System.Int32)">
            <summary>
            Gets or sets the row at the specified position within the collection.
            </summary>
            <remarks>
            Do not use the set accessor of this property.
            </remarks>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TableNode.Column">
            <summary>
            Represents a column of a TableNode.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Column.#ctor(MindFusion.Diagramming.Wpf.TableNode)">
            <summary>
            Initializes a new instance of the TableNode.Column class.
            </summary>
            <param name="tableNode">
            The TableNode this column belongs to.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Column.#ctor">
            <summary>
            Initializes a new instance of the Column class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Column.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the column properties into an XML element.
            </summary>
            <param name="xmlElement">
            An XmlElement the column's data should be stored into.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information
            about the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Column.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Loads the column properties from an XML element.
            </summary>
            <param name="context">
            An XmlElement containing the column's data.
            </param>
            <param name="xmlElement">
            An XmlPersistContext object providing contextual information about
            the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Column.Clone">
            <summary>
            Creates a copy of this column.
            </summary>
            <returns>
            An instance of the TableNode.Column class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.Column.SetWidth(System.Double)">
            <summary>
            Sets the width of the column directly.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Column.Width">
            <summary>
            Gets or sets the width of the table column.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.Column.ColumnStyle">
            <summary>
            Gets or sets the manner in which column's width is set.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TableNode.ColumnCollection">
            <summary>
            Represents a strongly-typed collection of TableNode.Column objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.ColumnCollection.Clone">
            <summary>
            Creates a deep copy of this collection.
            </summary>
            <returns>
            An instance of the TableNode.ColumnCollection class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.ColumnCollection.Add(MindFusion.Diagramming.Wpf.TableNode.Column)">
            <summary>
            Adds the specified column to the collection.
            </summary>
            <param name="column">
            The TableNode.Column object to add to the collection.
            </param>
            <remarks>
            Do not use this method directly. Use the AddColumn method
            of the TableNode class instead.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.ColumnCollection.Insert(System.Int32,MindFusion.Diagramming.Wpf.TableNode.Column)">
            <summary>
            Inserts the specified column at the specified index
            within the collection.
            </summary>
            <param name="index">
            The zero-based index at which to insert the column.
            </param>
            <param name="column">
            The TableNode.Column object to add to the collection.
            </param>
            <remarks>
            Do not use this method directly. Use the InsertColumn method
            of the TableNode class instead.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.ColumnCollection.GetAt(System.Int32)">
            <summary>
            Returns the column at the specified position.
            </summary>
            <param name="index">
            The zero-based index of the column to retrieve.
            </param>
            <returns>
            A reference to the TableNode.Column object at the specified position.c
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TableNode.ColumnCollection.Remove(MindFusion.Diagramming.Wpf.TableNode.Column)">
            <summary>
            Removes the specified column from the collection.
            </summary>
            <param name="column">
            The TableNode.Column object to add to the collection.
            </param>
            <remarks>
            Do not use this method directly. Use the DeleteColumn method
            of the TableNode class instead.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TableNode.ColumnCollection.Item(System.Int32)">
            <summary>
            Gets or sets the column at the specified position within the collection.
            </summary>
            <remarks>
            Do not use the set accessor of this property.
            </remarks>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.SelectionState">
            <summary>
            Stores the state of a multiple selection. Used in undo/redo of some commands.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.SelectionState.SelectedItems">
            <summary>
            Gets or sets a collection with the selected diagram items.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.SelectionState.SelectedNodes">
            <summary>
            Gets or sets a collection with the selected nodes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.SelectionState.SelectedLinks">
            <summary>
            Gets or sets a collection with the selected arrows.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.SelectionState.ActiveItem">
            <summary>
            Gets or sets the active item in the selection.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.ExpandItemCmd">
            <summary>
            Implements expanding/collapsing trees of items.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ExpandItemCmd.#ctor(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Initializes a new instance of the ExpandItemCmd class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ExpandItemCmd.Execute(System.Boolean)">
            <summary>
            Carries out the command action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ExpandItemCmd.Undo">
            <summary>
            Undoes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ExpandItemCmd.Redo">
            <summary>
            Redoes the command action.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.ExpandItemCmd.Item">
            <summary>
            Gets a reference to diagram item affected by this operation.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DiagramNodeAdapter">
            <summary>
            Adds DiagramNode functionality to UIElement instances that are not DiagramNode.
            Adding non DiagramItem objects to Diagram.Items creates instances of this class
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeAdapter.#ctor(MindFusion.Diagramming.Wpf.Diagram,System.Windows.UIElement)">
            <summary>
            Creates a DiagramNode for the specified UIElement
            </summary>
            <param name="parent">Diagram instance providing default values</param>
            <param name="item"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeAdapter.#ctor(System.Windows.UIElement)">
            <summary>
            Creates a DiagramNode for the specified UIElement
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeAdapter.#ctor(MindFusion.Diagramming.Wpf.DiagramNodeAdapter)">
            <summary>
            Initializes a new instance of the DiagramNodeAdapter class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeAdapter.#ctor(MindFusion.Diagramming.Wpf.DiagramNodeAdapter,System.Windows.UIElement)">
            <summary>
            Initializes a new instance of the DiagramNodeAdapter class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeAdapter.OnAdd">
            <summary>
            Called when this node is added to Diagram
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeAdapter.OnRemove">
            <summary>
            Called when a node is removed from a Diagram, either by
            the user, programmatically or via undo / redo.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeAdapter.OnSizeChanged">
            <summary>
            Called when the size of the item changes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeAdapter.Draw(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.RenderOptions)">
            <summary>
            Draws the item on the specified IGraphics surface.
            </summary>
            <param name="graphics">An IGraphics object where the item should be rendered.</param>
            <param name="options">Provides options for the drawing operation.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeAdapter.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the item content into an XML element.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeAdapter.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Loads the item content from an XML element.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeAdapter.Clone(System.Boolean)">
            <summary>
            Creates a copy of this item.
            </summary>
            <param name="clipboard">
            true if the copy will be stored in the Windows clipboard; otherwise, false.
            </param>
            <returns>
            The copy of this item.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DiagramNodeAdapter.MeasureOverride(System.Windows.Size)">
            <summary>
            FrameworkElement.MeasureOverride override.
            </summary>
            <param name="availableSize">
            The available size that the parent element can allocate for the child.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNodeAdapter.UIElement">
            <summary>
            Gets the UIElement wrapped by this node.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNodeAdapter.Control">
            <summary>
            Gets or set the UIElement wrapped by this node.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNodeAdapter.SizeSyncMode">
            <summary>
            Specifies whether changes to the size of the node influence the size of
            the hosted control, and vice versa.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNodeAdapter.MouseInputMode">
            <summary>
            Specifies whether mouse input is processed by the diagram or the hosted control.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DiagramNodeAdapter.Visible">
            <summary>
            Gets or sets a value indicating whether this item is visible.
            </summary>
            <remarks>
            Invisible items are not drawn at all.
            </remarks>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.SizeSyncMode">
            <summary>
            Contains values that identify the possible ways to synchronize the size
            of a DiagramNodeAdapter node with the size of its hosted control.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.SizeSyncMode.Arrange">
            <summary>
            Resizing the node calls Arrange on the hosted element.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.SizeSyncMode.Measure">
            <summary>
            The node is resized automatically to match the element's DesiredSize.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.SizeSyncMode.SetSize">
            <summary>
            Resizing the node sets the hosted element's Width and Height properties. 
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.MouseInputMode">
            <summary>
            Contains values that identify how to process mouse input.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.MouseInputMode.HandledByDiagram">
            <summary>
            Mouse input is processed by the diagram.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.MouseInputMode.HandledByHostedControl">
            <summary>
            Mouse input is processed by the hosted control.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.CustomCursors">
            <summary>
            Provides a collection of cursor object to use with the Diagram control.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.CustomCursors.Init(System.Resources.ResourceManager)">
            <summary>
            Loads the cursors from the specified resource manager.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.CustomCursors.Rotate">
            <summary>
            Gets the cursor, which is displayed when the mouse
            is positioned over the rotation handle.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TreeViewNode">
            <summary>
            Represents nodes that can draw hierarchical data.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.#ctor">
            <summary>
            Initializes a new instance of the TreeViewNode class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the TreeViewNode class.
            </summary>
            <param name="diagram">
            The Diagram from which to obtain default values for the node properties.
            </param>
            <remarks>
            This constructor initializes the TreeViewNode properties with the
            values specified in the respective default-value properties of
            the Diagram object.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.#ctor(MindFusion.Diagramming.Wpf.TreeViewNode)">
            <summary>
            Initializes a new instance of the TreeViewNode class using the specified node as a prototype.
            </summary>
            <param name="prototype">
            The treeview node to use as a prototype. The properties of the
            new treeview are initialized from the property values of prototype.
            </param>
            <remarks>
            This constructor copies the TreeViewNode property values from the
            specified prototype node.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.Draw(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.RenderOptions)">
            <summary>
            Draws the node on the specified DrawingContext.
            </summary>
            <param name="graphics">
            A DrawingContext object where the node should be rendered.
            </param>
            <param name="options">
            Provides options for the drawing operation.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.GetVisualChild(System.Int32)">
            <summary>
            Visual.GetVisualChild override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.DrawText(System.String,System.Windows.Rect,MindFusion.Text.DrawTextHint)">
            <summary>
            Laid-out text rendering callback.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.OnSizeChanged">
            <summary>
            Called when the size of the item changes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.InvalidateItemTextLayout">
            <summary>
            Invalidates the text layout of all underlying items.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.RemoveItem(MindFusion.Diagramming.Wpf.TreeViewItem)">
            <summary>
            Removes the specified item from the node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.RestoreProperties(MindFusion.Diagramming.Wpf.DiagramItemProperties)">
            <summary>
            DiagramNode.RestoreProperties override.
            </summary>
            <param name="props">
            A DiagramItemProperties-derived object containing a snapshot
            of the item's properties.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.SaveProperties(MindFusion.Diagramming.Wpf.DiagramItemProperties)">
            <summary>
            DiagramNode.SaveProperties override.
            </summary>
            <param name="props">
            A DiagramItemProperties-derived object where the item's properties
            should be saved.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Saves the item content into an XML element.
            </summary>
            <param name="xmlElement">
            An XmlElement the item's data should be stored into.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information about
            the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.UpdateLinksPos">
            <summary>
            Updates the position of all links after scrolling or collapsing a tree branch.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.SetReflexive(MindFusion.Diagramming.Wpf.DiagramLink)">
            <summary>
            Invoked to let a node set the shape of a reflexive link connected to it.
            </summary>
            <param name="link">Reference to the link.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.OnLoad">
            <summary>
            DiagramItem.OnLoad override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.OnMeasureUnitChanged">
            <summary>
            Called when the Diagram's MeasureUnit changes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.OnZoomChanged">
            <summary>
            Called when the Diagram's ZoomFactor changes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.OnUpdateBounds">
            <summary>
            DiagramNode.OnUpdateBounds override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            UIElement.OnMouseDown override.
            </summary>
            <param name="e">
            The System.Windows.Input.MouseButtonEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.HitTestExpander(System.Windows.Point)">
            <summary>
            Gets whether there is a collapse/expand button located at the specified position.
            </summary>
            <param name="point">The point to check.</param>
            <returns>true if there is +/- icon at the specified position, otherwise false.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.HitTestHandle(System.Windows.Point,System.Int32@)">
            <summary>
            DiagramItem.HitTestHandle override.
            </summary>
            <param name="pt">
            A Point value specifying where to look for a selection handle.
            </param>
            <param name="handle">
            A reference to an integer variable, which receives the index
            of the found selection handle.
            </param>
            <returns>
            true if there is a selection handle at the specified location;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.ItemFromPoint(System.Windows.Point,System.Boolean)">
            <summary>
            Returns the item at the specified location.
            </summary>
            <param name="point">
            The point to check.
            </param>
            <param name="isDiagramCoordinate">
            true if the point is specified in logical diagram coordinates;
            false if the point is specified in WPF points.
            </param>
            <returns>The TreeViewItem instance that contains the specified point.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            Loads the item content from an XML element.
            </summary>
            <param name="xmlElement">
            An XmlElement containing the item's data.
            </param>
            <param name="context">
            An XmlPersistContext object providing contextual information about
            the serialization process and some helper serialization methods.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.AcceptLinks(System.Boolean,System.Windows.Point)">
            <summary>
            DiagramNode.AcceptLinks override.
            </summary>
            <param name="outgoing">
            true to check for outgoing links; otherwise, false.
            </param>
            <param name="mousePosition">
            The current mouse pointer position in diagram coordinates.
            </param>
            <returns>
            true if the node accepts connections of the specified type;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.CreateConnectionPoint(MindFusion.Diagramming.Wpf.DiagramLink,System.Windows.Point,System.Boolean)">
            <summary>
            DiagramNode.CreateConnectionPoint override.
            </summary>
            <param name="link">
            A DiagramLink that should be connected to this node.
            </param>
            <param name="pt">
            The point at which the link should be connected.
            </param>
            <param name="incoming">
            true if link is an incoming link; otherwise, false.
            </param>
            <returns>
            A ConnectionPoint instance representing the connection.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.DocToLocal(System.Windows.Rect)">
            <summary>
            Transforms the specified points from document
            coordinates to coordinates relative to the left-top
            point of the node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.GetAllOutgoingLinks(MindFusion.Diagramming.Wpf.DiagramLinkCollection)">
            <summary>
            DiagramNode.GetAllOutgoingLinks override.
            </summary>
            <param name="links">A DiagramLinkCollection the links should be added to.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.GetAllIncomingLinks(MindFusion.Diagramming.Wpf.DiagramLinkCollection)">
            <summary>
            DiagramNode.GetAllIncomingLinks override.
            </summary>
            <param name="links">A DiagramLinkCollection the links should be added to.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.CreateProperties">
            <summary>
            DiagramItem.CreateProperties override.
            </summary>
            <returns>
            A DiagramItemProperties-derived object containing a snapshot
            of the item's properties.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.GetItemRect(MindFusion.Diagramming.Wpf.TreeViewItem)">
            <summary>
            Gets the location and size of the specified TreeViewItem.
            </summary>
            <param name="treeItem">A TreeViewItem instance.</param>
            <returns>A RectangleF specifying the item's position and size.</returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.UpdateText">
            <summary>
            Updates the internal MindFusion.Text.Text
            object when styled / laid-out characteristics of
            the node's text have changed.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.LayoutText">
            <summary>
            Performs the actual text layouting so that
            the internal MindFusion.Text.Layout object
            is prepared for subsequent drawing operations.
            Returns whether text fits entirely whithin the area.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.VisitHierarchy(MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor)">
            <summary>
            Node.VisitHierarchy override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.OnTextAttributeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DiagramItem.OnTextAttributeChanged override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.VisitLinks(MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor)">
            <summary>
            Node.VisitLinks override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.VisitLinks(MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor,MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor)">
            <summary>
            Node.VisitLinks override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.VisitLinks(MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor,MindFusion.Diagramming.Wpf.Visitors.CollectionVisitor,MindFusion.Diagramming.Wpf.DiagramLinkCollection)">
            <summary>
            Node.VisitLinks override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewNode.UpdateScrollbarWidth">
            <summary>
            Updates the scrollbar's width depending on diagram's measure unit and zoom factor.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewNode.VisualChildrenCount">
            <summary>
            Visual.VisualChildrenCount override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewNode.CaptionImage">
            <summary>
            Gets or sets the image that is displayed in this shape node.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewNode.RootItems">
            <summary>
            Gets a list of the root TreeViewItem objects displayed in this node.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewNode.Caption">
            <summary>
            Gets or sets the text displayed as caption of the node.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewNode.EnableStyledText">
            <summary>
            Gets or sets a value indicating whether
            styled text rendering is enabled.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewNode.CaptionHeight">
            <summary>
            Gets or sets the height of the node's caption area.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewNode.ScrollPosition">
            <summary>
            Gets or sets the current scroll position.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewNode.TextFormat">
            <summary>
            Gets or sets the alignment of texts displayed inside this shape node.
            </summary>
            <remarks>
            Use this property to specify the wrapping mode and alignment
            of the text that is contained in nodes.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewNode.CaptionBrush">
            <summary>
            Gets or sets the brush used to draw the caption text.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewNode.ConnectionStyle">
            <summary>
            Gets or sets a value indicating whether drawing a link from/to this 
            node should connect an item or the whole node as an integral entity.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TreeViewItem">
            <summary>
            Represents a constituent item of the hierarchy displayed inside a TreeViewNode.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewItem.#ctor">
            <summary>
            Initializes a new instance of the TreeViewItem class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TreeViewItem class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewItem.#ctor(MindFusion.Diagramming.Wpf.TreeViewItem)">
            <summary>
            Initializes a new instance of the TreeViewItem class using the specified item as a prototype.
            </summary>
            <param name="prototype">
            The treeview item to use as a prototype. The properties of the
            new treeview are initialized from the property values of prototype.
            </param>
            <remarks>
            This constructor copies the TreeViewItem property values from the
            specified prototype item.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewItem.OnTextAttributeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TextPresenter.OnTextAttributeChanged override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewItem.SetDiagramDirty">
            <summary>
            TextPresenter.SetDiagramDirty override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewItem.DrawText(System.String,System.Windows.Rect,MindFusion.Text.DrawTextHint)">
            <summary>
            Laid-out text rendering callback.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewItem.UpdateTextLayout(System.Windows.Rect)">
            <summary>
            Invoked to ensure that the styled text of the item is laid out.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewItem.InvalidateTextLayout(System.Boolean)">
            <summary>
            Invalidates the styled text of the item. The item's text will be
            laid out again immediately before it is accessed.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewItem.Dirty">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewItem.Height">
            <summary>
            Gets or sets the height of this item.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewItem.Children">
            <summary>
            Gets a list of this item's children in the hierarchy.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewItem.IncomingLinks">
            <summary>
            Gets a collection of all links that point to this item.
            </summary>
            <remarks>
            The property returns a collection of all links that point to
            this item. Use it to access the links or get their number.
            </remarks>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewItem.OutgoingLinks">
            <summary>
            Gets a collection of all links that go out of this item.
            </summary>
            <remarks>
            The property returns a collection of all links that start from
            this item. Use it to access the links or get their number.
            </remarks>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.TreeViewItem.PropertyChanged">
            <summary>
            Implements INotifyPropertyChanged.PropertyChanged.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewItem.Label">
            <summary>
            Gets or sets the label of this item.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewItem.LabelFont">
            <summary>
            Gets or sets the label font of this item.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewItem.Image">
            <summary>
            Gets or sets the image that is displayed in this treeview item.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewItem.Expanded">
            <summary>
            Gets or sets whether this item is expanded to show its children.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewItem.Tag">
            <summary>
            Gets or sets custom data associated with this item.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewItem.LabelColor">
            <summary>
            Gets or sets the label color of this item.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TreeViewConnectionPoint">
            <summary>
            Represents a connection between a link and a TreeViewNode.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewConnectionPoint.#ctor">
            <summary>
            Initializes a new instance of the TreeViewConnectionPoint class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewConnectionPoint.#ctor(MindFusion.Diagramming.Wpf.TreeViewNode,MindFusion.Diagramming.Wpf.DiagramLink,System.Boolean,MindFusion.Diagramming.Wpf.TreeViewItem)">
            <summary>
            Initializes a new instance of the TreeViewConnectionPoint class.
            </summary>
            <param name="node">A TreeViewNode instance.</param>
            <param name="link">A DiagramLink instance.</param>
            <param name="incoming">Specifies which end of the link is represented by this TreeViewConnectionPoint.</param>
            <param name="item">The TreeViewItem to which the link connects.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewConnectionPoint.GetInitialPoint">
            <summary>
            ConnectionPoint.GetInitialPoint override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewConnectionPoint.GetIntersection(System.Windows.Point,System.Windows.Point)">
            <summary>
            ConnectionPoint.GetIntersection override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewConnectionPoint.LinkChanges(MindFusion.Diagramming.Wpf.DiagramItem,System.Windows.Point)">
            <summary>
            ConnectionPoint.LinkChanges override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewConnectionPoint.UpdateFromPoint(System.Windows.Point)">
            <summary>
            Updates the connection stated according to the specified point,
            without changing the related node.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewConnectionPoint.SaveEndRelative">
            <summary>
            ConnectionPoint.SaveEndRelative override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewConnectionPoint.GetEndPoint">
            <summary>
            ConnectionPoint.GetEndPoint override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewConnectionPoint.AddLinkToNode">
            <summary>
            ConnectionPoint.AddLinkToNode override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewConnectionPoint.RemoveLinkFromNode">
            <summary>
            ConnectionPoint.RemoveLinkFromNode override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewConnectionPoint.GetNearestAnchorPoint(System.Windows.Point)">
            <summary>
            ConnectionPoint.GetNearestAnchorPoint override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeViewConnectionPoint.GetNearestBorderPoint(System.Windows.Point)">
            <summary>
            ConnectionPoint.GetNearestBorderPoint override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewConnectionPoint.Item">
            <summary>
            Gets the item to which the link connects.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeViewConnectionPoint.Row">
            <summary>
            ConnectionPoint.Row override.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TextAttributes">
            <summary>
            Defines attributes of text content displayed by diagram items.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TextAttributes.#ctor(MindFusion.Diagramming.Wpf.ITextAttributes)">
            <summary>
            Initializes a new instance of the TextAttributes class.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextAttributes.TextPadding">
            <summary>
            Gets or sets the thickness of padding space between the item boundaries and its text.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextAttributes.FontFamily">
            <summary>
            Gets or sets the preferred font family for this DiagramItem. 
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextAttributes.FontSize">
            <summary>
            Gets or sets the font size for this DiagramItem.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextAttributes.FontStyle">
            <summary>
            Gets or sets the font style for this DiagramItem.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextAttributes.FontWeight">
            <summary>
            Gets or sets the font weight for this DiagramItem.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextAttributes.FontStretch">
            <summary>
            Gets or sets the font-stretching characteristics for this DiagramItem.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextAttributes.TextDecorations">
            <summary>
            Gets or sets the effects to apply to the text of this DiagramItem.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextAttributes.TextAlignment">
            <summary>
            Gets or sets a value that indicates the horizontal alignment of text content.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextAttributes.TextVerticalAlignment">
            <summary>
            Gets or sets a value that indicates the vertical alignment of text content.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextAttributes.TextTrimming">
            <summary>
            Gets or sets the text trimming to employ when text overflows the item area.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextAttributes.TextWrapping">
            <summary>
            Gets or sets how this DiagramItem should wrap text.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TextAttributes.TextBrush">
            <summary>
            Gets or sets the text displayed inside this item.
            </summary>
        </member>
        <member name="E:MindFusion.Diagramming.Wpf.TextAttributes.PropertyChanged">
            <summary>
            Implements the INotifyPropertyChanged.PropertyChanged event.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LinkRouterConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            TypeConverter.CanConvertFrom override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LinkRouterConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            TypeConverter.CanConvertTo override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LinkRouterConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            TypeConverter.ConvertFrom override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LinkRouterConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            TypeConverter.ConvertTo override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LinkRouterConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            TypeConverter.GetStandardValuesSupported override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LinkRouterConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            TypeConverter.GetStandardValues override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.LinkRouterConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            TypeConverter.GetStandardValuesExclusive override.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.GQueryKeys">
            <summary>
            Key Words For graph queries
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.GQuery">
            <summary>
            Public class for query execution
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GQuery.Query(MindFusion.Diagramming.Wpf.DiagramItem,System.String,System.Boolean)">
            <summary>
            Execute GQuery string on diagram items dItem
            </summary>
            <param name="dItem"></param>
            <param name="queryText"> GQuery string</param>
            <param name="select">Denotes if to select the yeilded result</param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GQuery.CollectResult(MindFusion.Diagramming.Wpf.DiagramItemCollection,System.String,MindFusion.Diagramming.Wpf.DiagramItemCollection@)">
            <summary>
            Collects the result of the queryText evaluation over DiagramItemCollection dItems
            </summary>
            <param name="dItems"></param>
            <param name="queryText"></param>
            <param name="collectItems"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.GQuery.CompileQuery(System.String,System.String@)">
            <summary>
            Initial check if txtQuery is in appropriate format
            </summary>
            <param name="txtQuery"></param>
            <param name="mssgText"></param>
            <returns></returns>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.ChangeItemCmd">
            <summary>
            Handles undo / redo of programmatic property changes.
            </summary>
            <remarks>
            You would create an instance of this class in order to enable
            undo / redo of changes to item's properties. The constructor
            records the initial state of the item and the Execute method
            records the final state and adds the ChangeItemCmd object to
            the undo manager's history.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ChangeItemCmd.#ctor(MindFusion.Diagramming.Wpf.DiagramItem,System.String)">
            <summary>
            Initializes a new instance of the ChangeItemCmd class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ChangeItemCmd.Execute">
            <summary>
            Excutes the command, adding it to the command history.
            </summary>
            <remarks>
            Subcommands are executed or redone in the same order in
            which they were added to the composite, and are undone
            in the opposite order.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ChangeItemCmd.Execute(System.Boolean)">
            <summary>
            Carries out the command action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ChangeItemCmd.Undo">
            <summary>
            Undoes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ChangeItemCmd.Redo">
            <summary>
            Redoes the command action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ChangeItemCmd.FreeUndoResources">
            <summary>
            Called to free the undo data when the command is removed from the undo/redo history.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ChangeItemCmd.FreeRedoResources">
            <summary>
            Called to free the redo data when the command is removed from the undo/redo history.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.ChangeItemCmd.Item">
            <summary>
            Gets a reference to diagram item affected by this operation.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.BezierTemplate">
            <summary>
            Represents a Bézier curve in a shape definition.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.BezierTemplate.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the BezierTemplate class
            with the specified coordinates.
            </summary>
            <param name="x1">
            The x-coordinate of the first control point of the curve.
            </param>
            <param name="y1">
            The y-coordinate of the first control point of the curve.
            </param>
            <param name="x2">
            The x-coordinate of the second control point of the curve.
            </param>
            <param name="y2">
            The y-coordinate of the second control point of the curve.
            </param>
            <param name="x3">
            The x-coordinate of the third control point of the curve.
            </param>
            <param name="y3">
            The y-coordinate of the third control point of the curve.
            </param>
            <param name="x4">
            The x-coordinate of the fourth control point of the curve.
            </param>
            <param name="y4">
            The y-coordinate of the fourth control point of the curve.
            </param>
            <remarks>
            A Bézier spline is defined by four control points. The spline
            goes through the first and last points, and the other two
            define the tension of the spline.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.BezierTemplate.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,System.Windows.Media.DashStyle,System.Double)">
            <summary>
            Initializes a new instance of the BezierTemplate class
            with the specified coordinates and visualization settings.
            </summary>
            <param name="x1">
            The x-coordinate of the first control point of the curve.
            </param>
            <param name="y1">
            The y-coordinate of the first control point of the curve.
            </param>
            <param name="x2">
            The x-coordinate of the second control point of the curve.
            </param>
            <param name="y2">
            The y-coordinate of the second control point of the curve.
            </param>
            <param name="x3">
            The x-coordinate of the third control point of the curve.
            </param>
            <param name="y3">
            The y-coordinate of the third control point of the curve.
            </param>
            <param name="x4">
            The x-coordinate of the fourth control point of the curve.
            </param>
            <param name="y4">
            The y-coordinate of the fourth control point of the curve.
            </param>
            <param name="color">
            The color of this segment.
            </param>
            <param name="dashStyle">
            The dash style of this segment.
            </param>
            <param name="width">
            The width of this segment.
            </param>
            <remarks>
            A Bézier spline is defined by four control points. The spline
            goes through the first and last points, and the other two
            define the tension of the spline.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.BezierTemplate.SaveToXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            ElementTemplate.SaveToXml override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.BezierTemplate.LoadFromXml(System.Xml.XmlElement,MindFusion.Diagramming.Wpf.XmlPersistContext)">
            <summary>
            ElementTemplate.LoadFromXml override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.BezierTemplate.Clone">
            <summary>
            Creates an exact copy of this BezierTemplate element.
            </summary>
            <returns>
            An instance of the BezierTemplate class.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.BezierTemplate.InitData(System.Windows.Rect,System.Double)">
            <summary>
            ElementTemplate.InitData override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.BezierTemplate.UpdateData(System.Windows.Rect,System.Double[],System.Double)">
            <summary>
            ElementTemplate.UpdateData override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.BezierTemplate.UpdatePath(System.Windows.Media.PathFigure,System.Double[])">
            <summary>
            ElementTemplate.UpdatePath override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.BezierTemplate.OutsideBounds">
            <summary>
            ElementTemplate.OutsideBounds override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.BezierTemplate.HitTest(System.Windows.Point,System.Double[],System.Double)">
            <summary>
            Determines whether a point lies near this Bezier segment.
            </summary>
            <param name="point">
            A Point value specifying the point location, assuming
            the shape rotation angle is zero.
            </param>
            <param name="data"></param>
            <param name="maxDist"></param>
            <returns>
            true if the point is on or near to this Bezier segment.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.BezierTemplate.SameAs(MindFusion.Diagramming.Wpf.ElementTemplate)">
            <summary>
            ElementTemplate.SameAs override.
            </summary>
            <param name="obj">
            The ElementTemplate to compare to this template.
            </param>
            <returns>
            true if the specified object is a BezierTemplate closely
            approximating this template; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.BezierTemplate.Draw(System.Windows.Media.DrawingContext,System.Windows.Media.Pen)">
            <summary>
            ElementTemplate.Draw override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.BezierTemplate.Coordinates">
            <summary>
            Gets a double array containing the coordinates of the
            points defining the bezier curve represented by this element.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.BezierTemplate.XmlName">
            <summary>
            ElementTemplate.XmlName override.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.SerializationOptions">
            <summary>
            Allows customization of some aspects of the binary serialization of WpfDiagram diagrams.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.SerializationOptions.#ctor">
            <summary>
             Initializes a new SerializationOptions instance.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.SerializationOptions.Base64StringEncoding">
            <summary>
            Specifies whether the SaveToString method should encode the binary stream
            into a base64 string or into a hexadecimal one.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.InteractionState">
            <summary>
            Encapsulates the current state of user interaction with the control.
            </summary>
            <remarks>
            Return an instance of this class from the StartDraw method of
            a custom Behavior class.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InteractionState.#ctor(MindFusion.Diagramming.Wpf.DiagramItem,System.Int32,MindFusion.Diagramming.Wpf.Action)">
            <summary>
            Initializes a new instance of the InteractionState class.
            </summary>
            <param name="currentItem">
            The DiagramItem to be created or modified.
            </param>
            <param name="adjustmentHandle">
            The index of the selection handle to be dragged with the mouse,
            defines what kind of modification to perform.
            </param>
            <param name="action">
            One of the Action enumeration values, specifying what kind of
            action to perform.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InteractionState.Start(System.Windows.Point,MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            This method is invoked in the beginning of the interaction,
            usually when the user presses the left mouse button over a
            modification handle.
            </summary>
            <param name="point">
            A .NET Point instance indicating the location of the cursor,
            in document coordinates.
            </param>
            <param name="diagram">
            The Diagram, at which the interaction is performed.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InteractionState.AddCreatingItem">
            <summary>
            Add item currently created, so that it is rendered
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InteractionState.Update(System.Windows.Point,MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            This method is invoked to update the interaction state,
            usually in response to the user moving the mouse after
            the modification has started.
            </summary>
            <param name="point">
            A .NET Point instance indicating the location of the cursor,
            in document coordinates.
            </param>
            <param name="diagram">
            The Diagram, at which the interaction is performed.
            </param>
            <returns>
            true if the update has been successful; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InteractionState.Complete(System.Windows.Point,MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            This method is invoked to complete the interaction,
            usually when the user releases the left mouse button.
            </summary>
            <param name="point">
            A .NET Point instance indicating the location of the cursor,
            in document coordinates.
            </param>
            <param name="diagram">
            The Diagram, at which the action is performed.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InteractionState.Cancel(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Cancels the user interaction.
            </summary>
            <param name="diagram">
            The Diagram, at which the action is performed.
            </param>
            <remarks>
            Call this method to cancel interaction, usually in response
            to the user clicking the right mouse button while dragging.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InteractionState.IsAllowed(System.Windows.Point)">
            <summary>
            Checks whether the current interaction can be completed
            at the specified point.
            </summary>
            <param name="point">
            A .NET Point instance indicating the location of the cursor,
            in document coordinates.
            </param>
            <returns>
            true if the action can be completed at point; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InteractionState.ValidateAndSetCursor(System.Windows.Point,MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Sets the cursor depending on whether the interaction
            can be completed at the specified point or not.
            </summary>
            <param name="point">
            A .NET Point instance indicating the location of the cursor,
            in document coordinates.
            </param>
            <param name="diagram">
            The Diagram, at which the interaction is performed.
            </param>
            <returns>
            One of the CursorHint enumeration values, which is used by
            DiagramView to set its Cursor property.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InteractionState.CancelNow">
            <summary>
            Instruct the interaction to terminate on the next pass.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InteractionState.ShouldCancelDrag">
            <summary>
            Gets a value indicating whether the interaction should terminate
            on the next pass.
            </summary>
            <returns>
            true if the interaction should terminate; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InteractionState.IsCompleting">
            <summary>
            Returns whether the interaction has been completed successfully.
            </summary>
            <returns>
            true if the interaction has been completed successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InteractionState.SetItemDeleted">
            <summary>
            Notifies the interaction that its associated diagram item
            has been deleted.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.InteractionState.SetHandleIndex(System.Int32)">
            <summary>
            Sets the modified selection handle to the handle
            with the specified index.
            </summary>
            <param name="newIndex">
            An integer value that specifies the index of the handle
            at which the modified selection handle should be set.
            </param>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.InteractionState.splitToChangeOrient">
            <summary>
            If a segment has been inserted in order to change the
            orientation of a cascading arrow, do not add any more
            segments if the orientation must be changed again.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.InteractionState.CurrentItem">
            <summary>
            Gets a reference to the DiagramItem to be created or modified.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.InteractionState.AdjustmentHandle">
            <summary>
            Gets the index of the selection handle to be modified.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.InteractionState.CurrentPoint">
            <summary>
            Gets the current location of the mouse pointer.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.InteractionState.Action">
            <summary>
            Gets the type of Action currently performed by the user in the Diagram.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.InteractionState.StartPoint">
            <summary>
            Gets the mouse position where the interaction started.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.InteractionState.MouseMoved">
            <summary>
            Gets or sets a value indicating whether the mouse pointer has
            moved since the user pressed down the mouse button.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.InteractionState.LinkTarget">
            <summary>
            Gets or sets the current target node when a link is being modified.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.InteractionState.Diagram">
            <summary>
            Gets the current Diagram instance.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Font">
            <summary>
            Replacement for System.Drawing.Font that does not reference System.Drawing.dll
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Font.#ctor(System.String,System.Double)">
            <summary>
            Contructs new Font
            </summary>
            <param name="name"></param>
            <param name="size"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Font.#ctor(System.String,System.Double,MindFusion.Diagramming.Wpf.GraphicsUnit)">
            <summary>
            Contructs new Font
            </summary>
            <param name="name"></param>
            <param name="size"></param>
            <param name="unit"></param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Font.Clone">
            <summary>
            Creates a copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Font.Name">
            <summary>
            Font Name
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Font.Size">
            <summary>
            Font Size
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Font.Style">
            <summary>
            Font Style
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Font.Weight">
            <summary>
            Font Weight
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Font.Decorations">
            <summary>
            Font Weight
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Font.Unit">
            <summary>
            The unit of measure of Size
            </summary>
        </member>
        <member name="T:MindFusion.Layout.FlowLayoutTraits">
            <summary>
            Values used as keys in FlowLayout rules.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.PossibleConnection">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.OrderingRule">
            <summary>
            Specified the preferred order for nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.NodeDirection">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.NodeDistance">
            <summary>
            Specifies the distance left between this node and the next in the sequence.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.LaneNode">
            <summary>
            Specifies that FlowLayout should treat a node as a lane.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.LogicID">
            <summary>
            Specifies a string used to identify items in FlowLayout rules.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.Lane">
            <summary>
            Specifies the lane to which a node should be assigned.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.VerticalSubgroupsAlignment">
            <summary>
            A boolean value specifying the alignment of nodes within a group.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.StandardLinkBend">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.InLink">
            <summary>
            Identifies possible incoming links in FlowLayout rules.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.OutLink">
            <summary>
            Identifies possible outgoing links in FlowLayout rules.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.NotSpecified">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.CustomPosition">
            <summary>
            Specifies a custom position for a FlowLayout group of nodes.
            </summary>
            <remarks>
            The value associated with this key should be a Point object.
            The position should be assigned to the start node of a group.
            </remarks>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.Priority">
            <summary>
            Specifies group priority for cases where the layout cannot
            determine the group order based on other criteria.
            </summary>
            <remarks>
            The value associated with this key should be an integer number.
            It should be assigned to the start node of a group.
            </remarks>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.SublaneID">
            <summary>
            Specifies the additiona Lane position.
            </summary>
            <remarks>
            The value associated with this key should be an integer number.
            By default all objects are assigned to zero SublaneID
            </remarks>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.LayoutSize">
             <summary>
             A space allocated for a node.
             </summary>
            <remarks>
             The value associated with this key should be of a SizeF type.
             </remarks>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.NodeMargins">
             <summary>
             Additianal node placement in the allocated node's space (from LayoutSize).
             </summary>
            <remarks>
             The value associated with this key should be of a SizeF type.
             By default node is placed in the center of the allocated space
             </remarks>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.VerticalLink">
            <summary>
            Specifies if the nodes linkt by this king of link will be arranged verticaly.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.BendVerticalLink">
            <summary>
            Specifies if vertical links will be bend, or intersected object will be moved right.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.AlignmentPoint">
            <summary>
            Specifies vertical and horizontal alignement.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.DestinationAlignmentPoint">
            <summary>
            Specifies alignement point at the destination node.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.OriginAlignmentPoint">
            <summary>
            Specifies alignement point at the origin node.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.SubLevelNegativeDefaultDistance">
            <summary>
            Default distance of nodes at the negative sub-level to the control-flow nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.SubLevelNegativeMinDistance">
            <summary>
            Minimum distance of nodes at the negative sub-level to the control-flow nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.SubLevelPositiveDefaultDistance">
            <summary>
            Default distance of nodes at the positive sub-level to the control-flow nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.SubLevelPositiveMinDistance">
            <summary>
            Minimum distance of nodes at the positive sub-level to the control-flow nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.GroupLayoutSize">
            <summary>
            Overrides the layout size of a group.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.GroupAlignmentPoint">
            <summary>
            Specifies the alignment point of a group.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.GroupMargins">
            <summary>
            Specifies the margin size of a group.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.MainProcessPriority">
            <summary>
            Specifies connected group priority in cases to avoid the change Lane effect
            </summary>
            <remarks>
            The value associated with this key should be an integer number.
            It should be assigned to the start node of a group.
            </remarks>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutTraits.HorizontalPriority">
            <summary>
            Specifies horizontal node priority for cases where the layout cannot
            determine the node order based on other criteria.
            </summary>
            <remarks>
            The value associated with this key should be an integer number.
            It should be assigned to the start node of a group.
            </remarks>
        </member>
        <member name="T:MindFusion.Layout.OrderDirection">
            <summary>
            Values controlling the direction of link segments in FlowLatyout rules.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.OrderDirection.Leftward">
            <summary>
            Specifies leftward link direction.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.OrderDirection.Rightward">
            <summary>
            Specifies rightward link direction.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.OrderDirection.Upward">
            <summary>
            Specifies upward link direction.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.OrderDirection.Downward">
            <summary>
            Specifies downward link direction.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.OrderDirection.NotSpecified">
            <summary>
            Unspecified link direction.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.PreferredRules">
            <summary>
            Specifies which set of rules to use.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.PreferredRules.ConnectorRules">
            <summary>
            Use connector rules.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.PreferredRules.NodeRules">
            <summary>
            Use node rules.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.FlowLayoutKeys">
            <summary>
            Defines keys that can be used to define FlowLayout rules.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutKeys.Symbol">
            <summary>
            Specifies a list of identifiers for nodes that should be
            placed with some offset from the main sequence line.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutKeys.PossibleNodeLogic">
            <summary>
            Specifies a list of identifiers for nodes that should be processed by FlowLayout.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.FlowLayoutKeys.ShiftLaneProcesses">
            <summary>
            Shift subprocesses in Lane
            </summary>
        </member>
        <member name="M:MindFusion.Layout.FlowLayoutKeys.#ctor">
            <summary>
            Initializes a new instance of the FlowLayoutKeys class.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.Extension">
            <summary>
            Define extension methods for any type that implements INode .
            </summary>
        </member>
        <member name="T:MindFusion.Layout.FlowLayout">
            <summary>
            Summary description for FlowLayout.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.FlowLayout.SeparateGraphGroups(MindFusion.Layout.IGraph,System.Boolean)">
             <summary>
            Devide incomming graph in sub grups, determinated by node with key FlowLayoutKeysEnum.LogicID in 
            Border Group Nodes - two lists of strings defining start and end group nodes
             </summary>
             <param name="iGraph">The graph to process.</param>
             <param name="sort">Specifies whether the nodes should be sorted by their position.</param>
        </member>
        <member name="M:MindFusion.Layout.FlowLayout.ArrangeGraphs">
            <summary>
            Arranges graph by given rules
            </summary>
        </member>
        <member name="M:MindFusion.Layout.FlowLayout.ArrangeLinkedGroups(MindFusion.Layout.Group,System.Collections.ArrayList,MindFusion.Layout.SimpleOrientation,System.Collections.ArrayList)">
             <summary>
            For each end node from given group - 
            If can find onother group, where this node will be a start group node - order group,
            and add it to outgoing ArrayList variable 
             </summary>
        </member>
        <member name="M:MindFusion.Layout.FlowLayout.ArrangeSubGroup(MindFusion.Layout.Group,System.Double,System.Double)">
            <summary>
            Arrange all nodes in given subgroup, as start order node will be placed at 
            point - (strtX, strtY)
            </summary>
        </member>
        <member name="M:MindFusion.Layout.FlowLayout.CntrlFlowNode(MindFusion.Layout.INode,MindFusion.Layout.Group)">
            <summary>
            Checks if any node is belong to controlflow
            </summary>
        </member>
        <member name="M:MindFusion.Layout.FlowLayout.IsLinkedToOtherLevel(MindFusion.Layout.INode,MindFusion.Layout.Group,System.Int32)">
            <summary>
            Checks if node is linked to other groups
            </summary>
            <param name="node"></param>
            <param name="gr"></param>
            <param name="id">1 or -1 which correspondes to outlink and inlinks</param>
        </member>
        <member name="M:MindFusion.Layout.FlowLayout.OrderSubNodes(MindFusion.Layout.Group,System.Collections.ArrayList,System.Int32)">
            <summary>
            Orders all nodes in specific side of the control flow; Used for layout levels heigher then 1
            </summary>
        </member>
        <member name="M:MindFusion.Layout.FlowLayout.OrderSubNodes(MindFusion.Layout.INode,MindFusion.Layout.Group,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList@,System.Collections.ArrayList@)">
             <summary>
            Used to order first level of the control flow, and returns a lists of all downword and all upword nodes
            or all leftword and all rightword nodes
             </summary>
        </member>
        <member name="M:MindFusion.Layout.FlowLayout.OrderSubNodes(MindFusion.Layout.INode,System.Collections.ArrayList)">
            <summary>
            Used to order controlFlow only, or any stright lined nodes
            </summary>
        </member>
        <member name="M:MindFusion.Layout.FlowLayout.OrderSubNodes(MindFusion.Layout.INode,System.Collections.ArrayList,System.Collections.ArrayList,System.Int32)">
            <summary>
            Does not call for ControlFlow; Orders any other level called in OrderSubNodes(Group gr, ArrayList NodesLine, int sign)
            It is used to order all nodes (nonPrrtyNodes) linked to the given one; The parameter sign will ensure to be
            ordered upword or downword the given node (strtOrdrNode);
            </summary>
        </member>
        <member name="M:MindFusion.Layout.FlowLayout.IsCnnctedSublevelNodes(MindFusion.Layout.INode,System.Collections.ArrayList,System.Collections.ArrayList@)">
            <summary>
            checks if there are sublevel nodes connected to the given node and already ordered
            </summary>
        </member>
        <member name="T:MindFusion.Layout.TriangularLayoutInfo">
            <summary>
            Contains settings for the TriangularLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.TriangularLayoutInfo.#ctor">
            <summary>
            Initializes a new instance of the TriangularLayoutInfo class.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TriangularLayoutInfo.Orientation">
            <summary>
            Gets or sets the orientation of the arranged graph.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TriangularLayoutInfo.BendNonplanarLinks">
            <summary>
            Gets or sets a value indicating whether the intersecting links in a
            non-planar graphs will be segmented and bended to improve presentation.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.TriangularLayoutInfo.GridSize">
            <summary>
            Gets or sets the size of the virtual grid the layout will place vertices on.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.TriangularLayout">
            <summary>
            Performs triangular layout on simple, connected graphs.
            </summary>
            <remarks>
            The triangular layout places vertices on a virtual grid, such that if the source graph
            is planar it is guaranteed that all edges will have a single segment and will not intersect.
            If the graph is not planar, the intersecting edges are optionally segmented and bended
            in order to improve readability.
            </remarks>
        </member>
        <member name="M:MindFusion.Layout.TriangularLayout.#ctor">
            <summary>
            Initializes a new instance of the TriangularLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.TriangularLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.TriangularLayoutInfo)">
            <summary>
            Applies the layout to the specified graph using the specified settings.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.TriangularLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.TriangularLayoutInfo,MindFusion.Layout.LayoutProgress)">
            <summary>
            Applies the layout to the specified graph using the specified settings
            and progress callback delegate.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.TriangularLayout.graph">
            <summary>
            The GraphLib representation of the graph to be arranged.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.TriangularLayout.graphToDiagMapNodes">
            <summary>
            Maps GraphLib vertices to INode objects.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.TriangularLayout.graphToDiagMapLinks">
            <summary>
            Maps GraphLib edges to ILink objects.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.Layout3D.Surface">
            <summary>
            Contains values specifying the type of surface on which nodes
            are initially placed when running 3D SpringLayout.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.Layout3D.Surface.Sphere">
            <summary>
            The nodes are initially placed on a sphere.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.Layout3D.Surface.Cone">
            <summary>
            The nodes are initially placed on a cone.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.Layout3D.Surface.Cylinder">
            <summary>
            The nodes are initially placed on a cylinder.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.Layout3D.Surface.Unspecified">
            <summary>
            The nodes are initially placed on a sphere.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.Layout3D.SpringLayoutInfo3D">
            <summary>
            Contains settings for the SpringLayout class.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.SpringLayoutInfo">
            <summary>
            Contains settings for the SpringLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.SpringLayoutInfo.#ctor">
            <summary>
            Initializes a new instance of the SpringLayoutInfo class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.SpringLayoutInfo.#ctor(System.Int32,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SpringLayoutInfo class.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SpringLayoutInfo.IterationCount">
            <summary>
            Gets or sets for how many iterations to run the layout routine.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SpringLayoutInfo.NodeDistance">
            <summary>
            Gets or sets the desired distance between nodes.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SpringLayoutInfo.MinimizeCrossings">
            <summary>
            Gets or sets whether crossing minimization mode is enabled.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SpringLayoutInfo.EnableClusters">
            <summary>
            Gets or sets whether allocating nodes to distinct clusters is enabled.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SpringLayoutInfo.RepulsionFactor">
            <summary>
            Gets or sets the repulsion factor.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SpringLayoutInfo.RandomSeed">
            <summary>
            Gets or sets the randomization seed to use for
            generating random node positions.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SpringLayoutInfo.Randomize">
            <summary>
            Gets or sets a value indicating whether the nodes should be placed
            at random positions when the layout routine starts.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SpringLayoutInfo.LayoutArea">
            <summary>
            Gets or sets the size of the layout area.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Layout3D.SpringLayoutInfo3D.#ctor">
            <summary>
            Initializes a new instance of the SpringLayoutInfo class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Layout3D.SpringLayoutInfo3D.#ctor(System.Int32,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SpringLayoutInfo class.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.Layout3D.SpringEdgeData3D">
            <summary>
            Encapsulates precached per-edge information.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.SpringEdgeData">
            <summary>
            Encapsulates precached per-edge information.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SpringEdgeData.Length">
            <summary>
            Gets or sets the length of the edge.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SpringEdgeData.Crossings">
            <summary>
            Gets or sets the number of crossings of this edge with other edges.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.Layout3D.SpringVertexData3D">
            <summary>
            Encapsulates precached per-vertex information.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.SpringVertexData">
            <summary>
            Encapsulates precached per-vertex information.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.Layout3D.SpringLayout3D">
            <summary>
            Implements the Spring-Embedder graph layout algorithm.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.SpringLayout">
            <summary>
            Implements the Spring-Embedder graph layout algorithm.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.SpringLayout.#ctor">
            <summary>
            Initializes a new instance of the SpringLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.SpringLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.SpringLayoutInfo)">
            <summary>
            Applies the layout on the specified graph using the specified settings.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.SpringLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.SpringLayoutInfo,MindFusion.Layout.LayoutProgress)">
            <summary>
            Applies the layout on the specified graph using the specified settings
            and progress callback delegate.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SpringLayout.Stretch">
            <summary>
            Gets or sets the stretch value.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.SpringLayout.GraphHasFrozenNodes">
            <summary>
            Returns whether there were some frozen nodes in the graph.
            I.e. whether node.LayoutTraits[SpringLayoutTraits.Frozen] == true.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Layout3D.SpringLayout3D.#ctor">
            <summary>
            Initializes a new instance of the SpringLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Layout3D.SpringLayout3D.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.SpringLayoutInfo,MindFusion.Layout.LayoutProgress)">
            <summary>
            Applies the layout on the specified graph using the specified settings
            and progress callback delegate.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ArrowHeads">
            <summary>
            Contains predefined arrowhead shapes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArrowHeads.None">
            <summary>
            Do not display an arrowhead shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArrowHeads.Arrow">
            <summary>
            Display an arrow-like shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArrowHeads.Triangle">
            <summary>
            Display a triangle.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArrowHeads.Circle">
            <summary>
            Display a circle.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArrowHeads.Tetragon">
            <summary>
            Display a tetragon.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArrowHeads.Rhombus">
            <summary>
            Display a rhombus.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArrowHeads.BowArrow">
            <summary>
            Display a bow arrow.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArrowHeads.PointerArrow">
            <summary>
            Display a pointer arrow.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArrowHeads.Pentagon">
            <summary>
            Display a pentagon.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArrowHeads.DoubleArrow">
            <summary>
            Display a double arrow.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArrowHeads.Reversed">
            <summary>
            Reversed arrowhead.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArrowHeads.RevTriangle">
            <summary>
            Display a reversed triangle.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArrowHeads.Quill">
            <summary>
            Display a quill.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArrowHeads.RevWithLine">
            <summary>
            Reversed arrowhead with intersecting line.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArrowHeads.RevWithCirc">
            <summary>
            Reversed arrowhead with a circle.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArrowHeads.BackSlash">
            <summary>
            Display a back slash.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArrowHeads.Slash">
            <summary>
            Display a slash.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.ArrowHeads.DefaultFlow">
            <summary>
            "Default flow" in BPMN diagrams.
            </summary>
        </member>
        <member name="T:MindFusion.AccessType">
            <summary>
            Specifies intended access.
            </summary>
        </member>
        <member name="T:MindFusion.AccessAttribute">
            <summary>
            Specifies intended access for types and members in the
            assembly that are declared as internal to hide them
            from the interface, but which can be used independently of the
            diagramming control.
            </summary>
        </member>
        <member name="M:MindFusion.AccessAttribute.#ctor">
            <summary>
            Initializes a new instance of the AccessAttribute class.
            </summary>
        </member>
        <member name="M:MindFusion.AccessAttribute.#ctor(MindFusion.AccessType)">
            <summary>
            Initializes a new instance of the AccessAttribute class.
            </summary>
        </member>
        <member name="P:MindFusion.AccessAttribute.Access">
            <summary>
            Gets or sets a value indicating the intended
            access of the attribute target.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.BaseLayout">
            <summary>
            Specifies how OrthogonalRouter should arrange nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.BaseLayout.Layered">
            <summary>
            Use LayeredLayout to arrange nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.BaseLayout.Grid">
            <summary>
            Use GridLayout to arrange nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.BaseLayout.Custom">
            <summary>
            Use the current node configuration.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.BaseLayout.Cascading">
            <summary>
            Use TreeLayout to arrange nodes.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.OrthogonalRouterInfo.#ctor">
            <summary>
            Initializes a new instance of the OrthogonalRouterInfo class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.OrthogonalRouterInfo.#ctor(System.Double,System.Windows.Size,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the OrthogonalRouterInfo class.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.OrthogonalRouterInfo.BendDistance">
            <summary>
            Gets or sets for how many times to decrease the bending length.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.OrthogonalRouterInfo.GridSize">
            <summary>
            Gets or sets the desired distance between adjacent grid points.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.OrthogonalRouterInfo.Margins">
            <summary>
            Gets or sets the distance between the top-left corner
            of the smallest rectangle containing the arranged tree
            and the top-left point of the document bounds.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.OrthogonalRouterInfo.RandomSeed">
            <summary>
            Random seed.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.Orientation">
            <summary>
            Specifies axial orientation.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.Orientation.Vertical">
            <summary>
            Indicates vertical orientation.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.Orientation.Horizontal">
            <summary>
            Indicates horizontal orientation.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.Constants.E">
            <summary>
            Gets a very small positive real number (0.01).
            </summary>
        </member>
        <member name="T:MindFusion.Layout.Pair">
            <summary>
            Summary description for Pair class. 
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Pair.#ctor">
            <summary>
            Initializes a new instance of the Pair class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Pair.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the Pair class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Pair.CompareTo(System.Object)">
            <summary>
            Implements IComparable.CompareTo.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Pair.Equals(System.Object)">
            <summary>
            Object.Equals override.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.Pair.GetHashCode">
            <summary>
            Object.GetHashCode override.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.Pair.PairElements">
            <summary>
            Gets the elements of the pair as an arraylist
            </summary>
        </member>
        <member name="P:MindFusion.Layout.Pair.FirstObject">
            <summary>
            Gets or sets the first pair object.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.Pair.SecondObject">
            <summary>
            Gets or sets the second pair object.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.LinkInfo.GetDisplacement(System.Windows.Rect,System.String)">
            <summary>
            rect - Current Empty Space
            flag - a flag which denotes which space direction of the point to be taken; "X" - will return pf.X
            </summary>
        </member>
        <member name="T:MindFusion.Layout.Interop">
            <summary>
            Provides methods, which abstract the differences between various platforms -
            WinForm, Silverlight and WPF so that the code can be more similar.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.GridLayer">
            <summary>
            Visual which contains only the diagram grid, to isolate grid drawing for better performance
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DummyNode">
            <summary>
            Represents virtual nodes used for disconnected links.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyNode.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the DummyNode class.
            </summary>
            <param name="parent">
            The Diagram this node will be associated with.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyNode.Draw(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.RenderOptions)">
            <summary>
            DiagramItem.Draw override.
            </summary>
            <param name="graphics">
            The DrawingContext object to draw the item to.
            </param>
            <param name="options">
            A RenderOptions object specifying options for the drawing operation.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyNode.DrawHandles(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.HandlesVisualStyle)">
            <summary>
            DiagramItem.DrawHandles override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyNode.ConsiderBounds">
            <summary>
            Specifies whether the node bounds should be considered
            when calculatin intersecton with other objects.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyNode.ContainsPoint(System.Windows.Point)">
            <summary>
            DiagramItem.ContainsPoint override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyNode.HitTestHandle(System.Windows.Point,System.Int32@)">
            <summary>
            DiagramItem.HitTestHandle override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyNode.GetHandleIdx(System.Windows.Point)">
            <summary>
            Returns the index of the selection handle located at the
            specified point. The point is expressed in document coordinates.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyNode.CreateConnectionPoint(MindFusion.Diagramming.Wpf.DiagramLink,System.Windows.Point,System.Boolean)">
            <summary>
            DiagramNode.CreateConnectionPoint override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyNode.GetIntersection(System.Windows.Point,System.Windows.Point)">
            <summary>
            DiagramNode.GetIntersection override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DummyNode.GetNearestOutlinePoint(System.Windows.Point)">
            <summary>
            Returns a point that lies on the outline of this node,
            at the smallest distance from the specified point.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DraggedShape">
            <summary>
            Contains drag-and-drop information for a shape being dragged
            from ShapeToolBar and ShapeListBox.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.DraggedShape.#ctor(System.String,System.Windows.Size)">
            <summary>
            Initializes a new instance of the DraggedShape class.
            </summary>
            <param name="id">
            The Id of the dragged shape.
            </param>
            <param name="size">
            The recommended size of the dragged shape.
            </param>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DraggedShape.Id">
            <summary>
            Gets the Id of the dragged shape.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.DraggedShape.Size">
            <summary>
            Gets the recommended size of the dragged shape.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.DiagramLinkProperties">
            <summary>
            Stores the values of DiagramLink properties during undo / redo operations.
            If you need to implement undo support for the additional properties defined by
            a class derived from DiagramLink, do so by deriving from DiagramLinkProperties
            and overriding the DiagramLink.SaveProperties, DiagramLink.RestoreProperties,
            and DiagramLink.CreateProperties methods.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.ContainerNodeProperties">
            <summary>
            Stores the values of ContainerNode properties during undo / redo operations.
            If you need to implement undo support for the additional properties defined by
            a class derived from ContainerNode, do so by deriving from ContainerNodeProperties
            and overriding the ContainerNode.SaveProperties, ContainerNode.RestoreProperties,
            and ContainerNode.CreateProperties methods.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.GraphLibUtilities">
            <summary>
            Provides utility methods for operating with the MindFusion.Graphs library.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.GraphLibUtilities.GraphFromIGraph(MindFusion.Layout.IGraph,System.Collections.Generic.Dictionary{MindFusion.Graphs.Vertex,MindFusion.Layout.INode},System.Collections.Generic.Dictionary{MindFusion.Graphs.Edge,MindFusion.Layout.ILink})">
            <summary>
            Creates a GraphLib.Graph object out of the specified IGraph object.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.RoutingOptions">
            <summary>
            Allows customization of various aspects of the link routing algorithm.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoutingOptions.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the RoutingOptions class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoutingOptions.SetDefaultMode">
            <summary>
            Resets all routing properties to their default values.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoutingOptions.SetQuickMode">
            <summary>
            Assigns to the routing properties a predefined set of values which
            allow finding paths quickly but the found paths are of low quality.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoutingOptions.SetMinSegmentsMode">
            <summary>
            Assigns to the routing properties a predefined set of values
            which allow finding paths that have a small number of segments.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoutingOptions.SetDefaultMeasures">
            <summary>
            Resets the GridSize and NodeVicinitySize to their default values.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoutingOptions.MaxAbsFunc(MindFusion.Geometry2D.PointI,MindFusion.Geometry2D.PointI)">
            <summary>
            Returns the greater distance between the projections
            of the specified points on the X and Y axes respectively.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoutingOptions.DistSquareFunc(MindFusion.Geometry2D.PointI,MindFusion.Geometry2D.PointI)">
            <summary>
            Returns the square of the distance between the specified points.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.RoutingOptions.DistanceFunc(MindFusion.Geometry2D.PointI,MindFusion.Geometry2D.PointI)">
            <summary>
            Returns the distance between the specified points.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RoutingOptions.GridSize">
            <summary>
            Gets or sets the size of the pieces of the routing grid.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RoutingOptions.NodeVicinitySize">
            <summary>
            Gets or sets the size of a buffer zone around a node
            in which routes get a penalty cost if they pass through it.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RoutingOptions.CrossingCost">
            <summary>
            Gets or sets a value added to the total cost of a route
            if it causes a link to cross another link.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RoutingOptions.LengthCost">
            <summary>
            Gets or sets a value added to the total cost of a route
            for each piece of the routing grid occupied by the route.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RoutingOptions.NodeVicinityCost">
            <summary>
            Gets or sets the size of a buffer zone around a node for
            which routes get a penalty cost if they pass through it.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RoutingOptions.TurnCost">
            <summary>
            Gets or sets a value added to the total cost of a route if it makes a turn.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RoutingOptions.DontOptimizeLongRoutes">
            <summary>
            Gets or sets a value indicating whether long routes don't have
            their number of segments minimized in order to save up processing time.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RoutingOptions.TriggerRerouting">
            <summary>
            Gets or sets a value indicating under what circumstances
            links are rerouted automatically.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RoutingOptions.StartOrientation">
            <summary>
            Gets or sets the desired orientation of the first segments of routed links.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RoutingOptions.EndOrientation">
            <summary>
            Gets or sets the desired orientation of the last segments of routed links.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RoutingOptions.Anchoring">
            <summary>
            Gets or sets a value indicating whether to align link ends
            to the anchor points of nodes.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RoutingOptions.IgnoreAnchoring">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RoutingOptions.SmartPolylineEnds">
            <summary>
            Gets or sets a value indicating whether the end segments of
            polyline links should be oriented orthogonally to the node bounds.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RoutingOptions.RouteHeuristics">
            <summary>
            Gets or sets a heuristic function used to evaluate
            the distance between two pieces of the routing grid.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RoutingOptions.MaxAbs">
            <summary>
            Gets a heuristic delegate function that returns max(dx, dy) as a
            cost evaluation of the distance between two pieces of the routing grid.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RoutingOptions.DistSquare">
            <summary>
            Gets a heuristic delegate function that returns the square
            distance dx^2 + dy^2 as a cost evaluation of the distance between
            two pieces of the routing grid.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.RoutingOptions.Distance">
            <summary>
            Gets a heuristic delegate function that returns the real distance
            sqrt(dx^2 + dy^2) between two pieces of the routing grid.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.RemoveItemCmd">
            <summary>
            Implements deletion of diagram items.
            </summary>
            <remarks>
            Instances of this class are implicitly created by WpfDiagram
            in response to deleting items interactively or programmatically.
            References to those instances are passed to handlers of the
            ActionRecorded, ActionUndone and ActionRedone events.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RemoveItemCmd.#ctor(MindFusion.Diagramming.Wpf.DiagramItem)">
            <summary>
            Initializes a new instance of the RemoveItemCmd class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RemoveItemCmd.Execute(System.Boolean)">
            <summary>
            Carries out the command action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RemoveItemCmd.Undo">
            <summary>
            Undoes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RemoveItemCmd.Redo">
            <summary>
            Redoes the command action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.RemoveItemCmd.GetItem">
            <summary>
            Gets the diagram item associated with the command.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.RemoveItemCmd.Item">
            <summary>
            Gets the item associated with the command.
            </summary>
        </member>
        <member name="F:MindFusion.Diagramming.Wpf.CameraInfo.NameProperty">
            <summary>
                Identifies the Name dependency property.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.CameraInfo.GetViewMatrix(System.Windows.Media.Media3D.Camera)">
            <summary>
                Obtains the view transform matrix for a camera.
            </summary>
            <param name="camera">
                Camera to obtain the 
            </param>
            <returns>
                A Matrix3D objecvt with the camera view transform matrix,
                or a Matrix3D with all zeros if the "camera" is null.
            </returns>
            <exception cref="P:MindFusion.Diagramming.Wpf.CameraInfo.ViewMatrix">
                if the 'camera' is neither of type MatrixCamera nor
                ProjectionCamera.
            </exception>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.CameraInfo.Name">
            <summary>
                Gets or sets the identifying name of the object. ETC.
                This is a dependency property.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.ScrollTreeViewCmd">
            <summary>
            Implements support for undo of TreeViewNode scroll operations.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ScrollTreeViewCmd.#ctor(MindFusion.Diagramming.Wpf.TreeViewNode)">
            <summary>
            Initializes a new instance of the ScrollTreeViewCmd class.
            </summary>
            <param name="node">The related TreeViewNode.</param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ScrollTreeViewCmd.Execute(System.Boolean)">
            <summary>
            Command.Execute override.
            </summary>
            <param name="undoEnabled">
            Specifies whether undo/redo is enabled. If undo is disabled,
            the command won't be saved in undo history and will never be
            called to undo or redo itself. In such case you might choose
            to skip some housekeeping operations such as saving state
            variables for later undo/redo.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ScrollTreeViewCmd.Undo">
            <summary>
            Command.Undo override.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.ScrollTreeViewCmd.Redo">
            <summary>
            Command.Redo override.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.ScrollTreeViewCmd.TreeViewNode">
            <summary>
            Gets a reference to the TreeViewNode affected by this operation.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.CascadeLayoutInfo">
            <summary>
            Contains settings for the CascadeLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CascadeLayoutInfo.#ctor">
            <summary>
            Initializes a new instance of the CascadeLayoutInfo class.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.CascadeLayoutInfo.Orientation">
            <summary>
            Gets or sets the orientation of the arranged graph.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.CascadeLayoutInfo.Padding">
            <summary>
            Gets or sets the spacing between nodes in adjacent layers.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.CascadeLayoutInfo.UnitsPerMillimeter">
            <summary>
            Gets or sets a coefficient representing the ratio between millimeter
            and the current default units of measure.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.CascadeLayoutStatistics">
            <summary>
            Encapsulates information about a cascade layout which has already complete.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.CascadeLayoutStatistics.#ctor">
            <summary>
            Initializes a new instance of the CascadeLayoutStatistics class.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.CascadeLayoutStatistics.NonplanarLinks">
            <summary>
            Gets the links which were breaking planarity in the source graph.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Behaviors.LinkTreeViewsBehavior">
            <summary>
            This class is used when the diagram behavior is set to Behavior.LinkContainers.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.LinkTreeViewsBehavior.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the LinkContainersBehavior class.
            </summary>
            <param name="diagram">
            The Diagram this behavior will be associated with.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.LinkTreeViewsBehavior.CreateNode">
            <summary>
            LinkNodesBehavior.CreateNode override.
            </summary>
            <returns>
            An instance of the TreeViewNode class.
            </returns>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.TreeEnumerator">
            <summary>
            Enables an easy standard method to itereate over the elements
            of a tree-like structure of objects.
            </summary>
            <remarks>
            The TreeEnumerator class implements the standard .NET IEnumerator
            interface. It provides an easy method to iterate over the elements
            of a tree-like structure of diagram items.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeEnumerator.#ctor(MindFusion.Diagramming.Wpf.DiagramNode,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TreeEnumerator class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeEnumerator.#ctor(MindFusion.Diagramming.Wpf.DiagramNode,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TreeEnumerator class.
            </summary>
            <param name="root">
            The root of the tree or subtree to be enumerated.
            </param>
            <param name="enumLinks">
            Specifies whether to enumerate links.
            </param>
            <param name="strict">
            Specifies whether to check strictly if the passed structure is a tree.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeEnumerator.BuildTree(MindFusion.Diagramming.Wpf.DiagramNode)">
            <summary>
            Generates a list with all items in the tree with the
            specified root.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the tree.
            </summary>
            <returns>
            true if the enumerator has successfully passed to the next
            DiagramItem in the collection; false if there are no more
            elements available to enumerate.
            </returns>
            <remarks>
            Initially an enumerator is positioned before the first element
            of the tree (the root), and the first call to MoveNext moves
            the enumerator over that first element.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.TreeEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before
            the first element in the collection.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.TreeEnumerator.Current">
            <summary>
            Gets the current element of the iteration.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.NotATreeException">
            <summary>
            An exception raised by the TreeEnumerator class if the
            specified node does not represent a root of a tree.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.SpringLayoutTraits">
            <summary>
            Indicates item traits specific to SpringLayout. Members of this enumeration
            can be used as keys in the DiagramItem.LayoutTraits hashtable.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SpringLayoutTraits.Frozen">
            <summary>
            If the LayoutTraits value associated with a node through this key is true,
            SpringLayout considers the repulsion forces exerted by the node to other nodes,
            but ignores forces acting on the node and keeps it in place.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.SpringLayoutMethod">
            <summary>
            Specifies what energy model SpringLayout should use for the simulation.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SpringLayoutMethod.Classic">
            <summary>
            Use Hooke's law of elasticity to treat links as springs, and Coulomb's inverse
            square law to implement repulsion between nodes.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.SpringLayoutMethod.FruchtermanReingold">
            <summary>
            Use artificial attraction forces for links and repulsion forces for nodes that
            cancel each other at about the distance specified in NodeDistance, along with
            a simulated cooling schedule used for fine-tuning. Based on the method of Thomas 
            Fruchterman and Edward Reingold.
            </summary>
        </member>
        <member name="T:MindFusion.Text.Layout">
            <summary>
            Layouts text in the interior of various shapes.
            </summary>
        </member>
        <member name="M:MindFusion.Text.Layout.#ctor">
            <summary>
            Initializes a new instance of the Layout class.
            </summary>
        </member>
        <member name="M:MindFusion.Text.Layout.LayoutInRectangle(MindFusion.Text.Text,System.Windows.Rect,MindFusion.Text.LayoutOptions,MindFusion.Diagramming.Wpf.ITextAttributes)">
            <summary>
            Layouts the specified text in the specified rectangle.
            </summary>
        </member>
        <member name="M:MindFusion.Text.Layout.LayoutInPolygon(MindFusion.Text.Text,System.Windows.Point[],MindFusion.Text.LayoutOptions,MindFusion.Diagramming.Wpf.ITextAttributes)">
            <summary>
            Layouts the specified text in the specified polygon.
            </summary>
        </member>
        <member name="M:MindFusion.Text.Layout.Draw(System.Double,System.Double,MindFusion.Text.RenderTextCallback,MindFusion.Text.DrawTextHint)">
            <summary>
            Draws a previously laid-out text with the specified offset.
            </summary>
        </member>
        <member name="M:MindFusion.Text.Layout.GetHLines(System.Int32)">
            <summary>
            Returns the appropriate h-lines collection
            depending on the line alignment and the total
            number of lines.
            </summary>
        </member>
        <member name="M:MindFusion.Text.Layout.FirstLine(System.Int32)">
            <summary>
            Returns the index of the first h-line depending
            on the line alignment and the total number of lines.
            </summary>
        </member>
        <member name="M:MindFusion.Text.Layout.FitTextInRect(System.Int32,System.Windows.Rect,MindFusion.Diagramming.Wpf.ITextAttributes,System.Boolean@,System.Int32@,System.Boolean@)">
            <summary>
            Tries to fit as many words from the source text
            as possible in the specified rectangle, starting
            from the word with the specified index.
            </summary>
        </member>
        <member name="M:MindFusion.Text.Layout.BuildLine(System.Double)">
            <summary>
            Creates single h-line at the specified vertical offset.
            </summary>
        </member>
        <member name="M:MindFusion.Text.Layout.BuildLines">
            <summary>
            Finds all h-lines which could fit in the specified
            area depending on the current layout settings.
            </summary>
        </member>
        <member name="M:MindFusion.Text.Layout.PolygonIntersect(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates all intersections between the internal
            polygon and the line segment defined by pt1 and pt2.
            </summary>
        </member>
        <member name="T:MindFusion.Text.RenderTextCallback">
            <summary>
            Delegate used by the layouting object when the text needs to be drawn.
            </summary>
            <param name="text">
            The portion of the text that should be drawn.
            </param>
            <param name="dest">
            The destination rectangle of the drawn text.
            </param>
            <param name="hint">
            A DrawTextHint object specifying the font, style and brush of the drawn text.
            </param>
        </member>
        <member name="T:MindFusion.Text.DrawTextHint">
            <summary>
            Structured data used in formatted text rendering.
            </summary>
        </member>
        <member name="M:MindFusion.Text.DrawTextHint.#ctor(System.Windows.Media.DrawingContext,MindFusion.Diagramming.Wpf.ITextAttributes,System.Windows.Media.Brush)">
            <summary>
            Initializes a new instance of the DrawTextHint class.
            </summary>
        </member>
        <member name="P:MindFusion.Text.DrawTextHint.Graphics">
            <summary>
            Gets the destination graphics.
            </summary>
        </member>
        <member name="P:MindFusion.Text.DrawTextHint.TextAttributes">
            <summary>
            Gets the font of the rendered text.
            </summary>
        </member>
        <member name="P:MindFusion.Text.DrawTextHint.Brush">
            <summary>
            Gets the brush used to render the text.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Behaviors.DrawShapesBehavior">
            <summary>
            This class is used when the diagram behavior is set to Behavior.DrawShapes.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.DrawShapesBehavior.#ctor(MindFusion.Diagramming.Wpf.Diagram)">
            <summary>
            Initializes a new instance of the DrawShapesBehavior class.
            </summary>
            <param name="diagram">
            The Diagram this behavior will be associated with.
            </param>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Behaviors.DrawShapesBehavior.CreateNode">
            <summary>
            LinkNodesBehavior.CreateNode override.
            </summary>
            <returns>
            An instance of the DiagramNode class.
            </returns>
        </member>
        <member name="T:MindFusion.Layout.HierarchicalLayoutTraits">
            <summary>
            Indicates item traits specific to hierarchical layouts. Members of this enumeration
            can be used as keys in the DiagramItem.LayoutTraits hashtable.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.HierarchicalLayoutTraits.Level">
            <summary>
            The number associated with this key specifies the index of the level
            of the item in the level-planar graph.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.HierarchicalLayoutInfo">
            <summary>
            Contains settings for the HierarchicalLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.HierarchicalLayoutInfo.#ctor">
            <summary>
            Initializes a new instance of the HierarchicalLayoutInfo class.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.HierarchicalLayoutInfo.Orientation">
            <summary>
            Gets or sets the orientation of the arranged graph.
            </summary>
        </member>
        <member name="P:MindFusion.Layout.HierarchicalLayoutInfo.LevelDistance">
            <summary>
            Gets or sets the distance between adjecent levels in the hierarchical layout.
            </summary>
        </member>
        <member name="T:MindFusion.Layout.HierarchicalLayout">
            <summary>
            Performs hierarchical layout on simple, connected, level-planar graphs.
            </summary>
            <remarks>
            The hierarchical layout places vertices on predefined levels, such that if the source graph
            is level-planar it is guaranteed that all edges will have a single segment and will not
            intersect. A planar graph is considered level-planar if it is still possible to draw it
            without edge intersections when its vertices are positioned on predefined levels.
            </remarks>
        </member>
        <member name="M:MindFusion.Layout.HierarchicalLayout.#ctor">
            <summary>
            Initializes a new instance of the HierarchicalLayout class.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.HierarchicalLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.HierarchicalLayoutInfo)">
            <summary>
            Applies the layout to the specified graph using the specified settings.
            </summary>
        </member>
        <member name="M:MindFusion.Layout.HierarchicalLayout.Arrange(MindFusion.Layout.IGraph,MindFusion.Layout.HierarchicalLayoutInfo,MindFusion.Layout.LayoutProgress)">
            <summary>
            Applies the layout to the specified graph using the specified settings
            and progress callback delegate.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.HierarchicalLayout.graph">
            <summary>
            The GraphLib representation of the graph to be arranged.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.HierarchicalLayout.graphToDiagMapNodes">
            <summary>
            Maps GraphLib vertices to INode objects.
            </summary>
        </member>
        <member name="F:MindFusion.Layout.HierarchicalLayout.graphToDiagMapLinks">
            <summary>
            Maps GraphLib edges to ILink objects.
            </summary>
        </member>
        <member name="T:MindFusion.Diagramming.Wpf.Commands.AddGroupCmd">
            <summary>
            Implements creation of groups.
            </summary>
            <remarks>
            Instances of this class are implicitly created by WpfDiagram
            in response to calls to the CreateGroup method. References to
            those instances are passed to handlers of the ActionRecorded,
            ActionUndone and ActionRedone events.
            </remarks>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.AddGroupCmd.#ctor(MindFusion.Diagramming.Wpf.DiagramItem,MindFusion.Diagramming.Wpf.Group)">
            <summary>
            Initializes a new instance of the AddGroupCmd class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.AddGroupCmd.#ctor(MindFusion.Diagramming.Wpf.DiagramItem,MindFusion.Diagramming.Wpf.Group,System.Boolean)">
            <summary>
            Initializes a new instance of the AddGroupCmd class.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.AddGroupCmd.Execute(System.Boolean)">
            <summary>
            Carries out the command action.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.AddGroupCmd.Undo">
            <summary>
            Undoes the command.
            </summary>
        </member>
        <member name="M:MindFusion.Diagramming.Wpf.Commands.AddGroupCmd.Redo">
            <summary>
            Redoes the command action.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.AddGroupCmd.Group">
            <summary>
            Gets a reference to the new group.
            </summary>
        </member>
        <member name="P:MindFusion.Diagramming.Wpf.Commands.AddGroupCmd.Item">
            <summary>
            Gets a reference to the master item in the group.
            </summary>
        </member>
    </members>
</doc>
